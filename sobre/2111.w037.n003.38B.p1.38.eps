%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 11/25/2021
%%BoundingBox: 0 0 967 400
%%HiResBoundingBox: 0 0 967 400
%%CropBox: 0 0 967 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 14834 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8CFCACFA8FFCACFA8FFCAA8CAA8
%CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CAA8
%CFA8CAA8CFFFCAFFCAFFCAFD13FFCFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFFD
%14FFCFCAFFCAFFCAFFCAA8CAA8CFA8CAFD14FFA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8FD15FFA8CAA8CFA8CAA8CFFFCACFA8FFCAFD14FFCFA8FFCACFA8FFCA
%CFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8
%FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCA
%CFA8FFCACFCAFD15FFCACFA8FFCACFA8A8CFA8CAA8CFFD14FFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8FD15FFA8CFA8CAA8CFA8CAFFCAFFCAFFCAFD14FFCFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCACFCAFD15FFCAFFCAFFCAFFCAA8CFA8CAA8CFFD14
%FFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8FD15FFA8CFA8CAA8CFA8CACFA8FFCACF
%A8FD15FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8CFCFFD14FFCFA8FFCACFA8FFCAA8CA
%A8CFA8CAA8FD13FFA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CF
%A8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8FD15FFA8CAA8CFA8CA
%A8CFFFCAFFCACFCAFD15FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFFD14FFCFCAFF
%CAFFCAFFCAA8CAA8CFA8CACFFD13FFA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFCACAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFCACFA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8FD15
%FFA8CAA8CFA8CAA8CFFFCACFA8FFCAFD06FFCAFD05FFCACAFD06FFCFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCAFFA8FFCACFA8FFCACFA8FFCACF
%A8FFCAFFCAFFCACFA8FFCAFFCAC3C3CFA8FFCACFA8CAA7CFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFCAFD05FFCAFD07FFCAFD07FFCACFA8FFCACFA8A8
%CFA8CAA8FFA8CFA8CFA8CA9AA1C9FFC3A099CAA8CFA7C9A8FFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA7C3A1CFA8CAA8CFA8CAA8CFA8CAA8
%CFA72727CFA8CAA8CFA8CA9975A1CFA8CFCAA1F8F852FFA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CFA8CFA8CACAC376A1A8CFA8CA7676A0CFA8FFA8CACA
%FFA8CAA8CFA8CAFFCAFFCACF7C2727CACACFA8C49BCACACA99C2CAFFC9C8
%C8C9CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC3BBC2A8FFCAFF
%CAFFCAFFCAFFCAFF7D27F827CAFFCAFFCAFFCAC39ACAA8FFCAFFA851F8F8
%A1FFCAFFCAFFCAFFCAFFCAFFCAFFCAA97EA9A8CFCAA876A1C9FFCAFFCAC3
%9ACACAFF7D27277DA7CACAFFCAFFCAA8CFA8CF27F8F8F87DFFCAA854797E
%CFA0BBBBC3A8CF9AA0C2CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%C999BC6FA8CACAA8CFA8CAA8CFA8CACA7D26764BCAA8CAA8CFA8CA787954
%A8A8CFA8CA766FF87DCACFA8CAA8CFA8CAA8CFA8CAA8A9555452CAA8FF52
%00277DA8CFA8CFA0C2C3CFCA7DFD05F8A7CACFA8CACFA8FF7DF8F85176A1
%CAFFA27955A3CAC2BBBCBCFFCA9A99A0A8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCAC9BBA0A1A1C3FFCACFA8FFCACFA8FFCACFA8C99ACAA8FFCACF
%A8FFA87F55797ECFCAFFCA9A9AA0A8CFA8FFCACFA8FFCACFA8FFCACFA878
%7676A8FFCF53002728CFCAFFCACABCC3CAFFA1764BF8F8F852FFA8FFCAA8
%CACA7DF8F8A0C3A1CFA27F54557ECF9ABB9999A0CF9A9AA1CFA8FFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CF9ABBBBA19AC2A7CFA8CAA8CFA8CAA8CAA8
%FFA19AA1CAA8CFA8CAA8CA5455547FA8CAA8CA9A9AA7CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CF76C39ACAA8CA27050052A8CAA8CFA7C29AC3A8C96F9A27
%F8F827A8CAA8CFFFCAFFA72727CAA0A27E7F557F55A9CFC9BBC275BCBCC3
%76C3C3C9C9FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC36F527D774BCACFFF
%CAFFCAFFCAFFCACFC3C27CC2BBC3CAFFCAFFCA7F547F79A9787F7FA2A1A3
%7FA9A8FFCAFFCAFFCAFFCAFFCAFF5376C2A17DFF764C002852FFCAFFCACF
%C2C3BCFD04C3A1F8F8F8A8CAFFCAA8CAA8CFA17854A2547854795455A2CF
%A7BC99BCBBBB99BC99BB93BB9ACAA8CFA8CAA8CFA8CAA8CFA8CAA8C26F27
%0027000052FFA8CAA8CFA8CAA8CABCBBBBC8C2BBBBBCA1CFA8CF7E55547F
%7E555479557954795479A2CFA8CAA8CFA8CAA8FF7D00219A4B2728272127
%007DCACAA8CFA8C9BCC3BCC2C2C9C89AF827A8CFA8CFFFCACFCAA9557955
%7F55A2547978CFA8FFC3BBBBBCBBBCBBBCBBBCBBBCBBCAA8FFCACFA8FFCA
%CFA8FFCACA99280028002805277DFFCACFA8FFCACFBCBCBBC2C8C899BCBB
%C2C9FFCAA95579547F5579547F557F547F5579A2FFCACFA8FFCAFF7D5200
%280028270500280028A1FFCACFA8FFCAC3BCC3FD04C8C2A0A8FFCACFA8A8
%CFA8A8547954795479787E54A8A8CAA8CFA1BC93BB99BB99BC99BB99BB99
%CAA8CFA8CAA8CFA8CAA8CFC9990027002700270052A1CFA8CAA8FFA0BB99
%BCC1C89F9A6FBC6F9AA8CFA8A35455547954795479545554795479A2CFA8
%CAA8CF52000027002700272727000028CFA8CFA8CAA8CFA8C39AC8C2C8A0
%C2BCCAA8CFA8CAFFCACFA27F557F547F557F7EFFCAFFCAFFCAFFCACABCBC
%BBC2BBBC999ABBBCC3FFCAFFCAFFCAFFCAFFCAFF762800280028272876CF
%CAFFCAFFCAC29976BBC2C8C8BBC2BB7699C9CAFFCAA97E7F7F7F547F557F
%787F7F7F55A9CAFFCAFF5205274C05280028054C272727CACAFFCAFFCAFF
%CAFFCAC9C8C8C8C9C2C2C3FFCAFFCAA8CFCA7F5479547E547954A8CACFA8
%CAA8CFA8CFA8C299BB99BCBBA193BC99C2A8CFA8CAA8CFA8CAA8CFCA7D00
%28282800270076C3CAA8CAA8CABBBC6F99BBC8C1BBBB9993C29ACAA8CFCA
%CAA8CA54555479787F787F54557ECFA8CF7D27004B4B2800270028272727
%A8CACAA8CFA8CAA8CFA8CFA7C8C8C8C2C2BCC3A8CFA8CACFA8FF7E79547F
%7E7F5479A2CFA8FFCACFA8FFCACFBCBCBBBCBBC2CAC299BCBBCAA8FFCACF
%A8FFCACFA8FFA8A1A1CA52004C7D7DCACAFFCFFFCAA0A0CAA1CAC9CFC3C9
%A1CAA19AC9FFCAFFCFFFA8A9A3A29AA25579547F55A3CAFFCF7D00280528
%004C2728002877FFCAFFCACFA8FFCACFA8FFCACFC2C9C2C3BCC2C3CFA8FF
%CAA8CAA87F5479547E545554A9CACAA8CFA8CAA8CFA8BB93BBBBBB99CAA1
%BC99C2A7CAA8CFA8CAA8CFA8CAA8CFC3C3C3A127A8FD08FFA1CAFD09FFCA
%A1FD08FFCA99C277555455547FA8CAA8CFA728000500052727002700A8CA
%CAA8CFA8CAA8CFA8CAA8CFA1C2BCC3BCC2BCCAA8CAA8CFFFCAFF7E79547F
%7EA29BC3C3FFCAFFCAFFCAFFCACF9AC39A9B9AA1A8CFC3C3C3CFCAFFCAFF
%CAFFCAFFCAFFCACFC3C9C3C39ACAFD1CFFA06F9BA37F7F7EA9CACFCAFFCA
%FFA87D2828004C272800287DFFCAFFCAFFCAFFCAFFCAFFC3C3C2C39AA070
%7DCFFFCAFFCAA8CACAA9547954A2BBBBBBC3A8CAA8CFA8CAA8CFA8795479
%557F55A9CACA76A0CACAA8CFA8CAA8CFA8CAA8CFA8C9C2C9A176A1FD1CFF
%CAA15429537DCFA8CFA8CAA8CFA8CFCACFA8520028002700A2CACAA8CFA8
%CAA8CFA8CFA8769A760028002805CACACAA8CFFFCACFA87F557F77C2BCC3
%BBCACACFA8FFCACFCACB7F7F547F797FA2FFCAC9A1FFCACFA8FFCACFA8FF
%CACFA8FFC9C8C2C9C3FD1FFF2827277DCFCFA8FFCACFA8FFCACFCAFF7E7F
%54785454A2FFCACFA8FFCACFA8FFCACFA0A12828002805277DFFCACFA8A8
%CFA8CA54555578BBC2BCBBA1FFA8CAA8CFA8CFA27F787F5479547FA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8C9C1C8C1CEFD1EFFA828005127CFA8CA
%A8CFA8CAA8CFA8CAA87F7F79547F787EA8CFA8CAA8CFA8CAA8CFA8FF5200
%28280027007DCACFA8CAFFCAFFCACAA1C49AC2BCC2BBC3CAFFCAFFCAFFCA
%A9557F7F7F557F78FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFC9C8C8C8C9
%FD1FFF28272728A2FFCAFFCAFFCAFFCAFFCACB797F547F797F54FFCAFFCA
%FFCAFFCAFFCAFFCA5200282828272752FFCAFFCAA8CFA8CFA7A19AC299C2
%C2BB99CAA8CAA8CFA8CF7E79547F54795479A2CFCACFA8CFA8CAA8CFA8CA
%A8CFA8CAA8C9C1C8C1C9FD1FFF5200272753CACAA8CFA8CAA8CFA8CFA27F
%7879547F5454A8CFA8CAA8CFA8CAA8CFCAA80027002800280052A8CFA8CA
%CFA8FFCACA76A0BCBCBCC3BBBCC3FFCACFA8FFCAA9547F7F7F547F7F7F78
%A9A8CBCACFC9CAA8FFCACFA8FFCAFFC9C8C8C8C9FD1FFF2828055227CFCA
%CFA8FFCACFA8FFCAA9787F5579787F54A8CAFFCACFA8FFCACFA8FF7D0500
%282828002828CFCAFFCAA8CAA8CFA8C399BC99BC9ABCBBC2A8CFA8CAA8CF
%7E55547F785554795455545554C8C1C8C8CAA8CFA8CAA8CFA8C9C1C8C1C9
%FD1FFF280027272752FFA8CAA8CFA8CAA8CFA27F5479547F54547ECFA8CF
%A8CAA8CFA8CAA8520027002800270028A8CFA8CFFFCAFFCAFFC2C2BBC2BC
%C3BBBCC2FFCAFFCAFFCAA9557F79A3547F557F547F5579C2C8C8C9CAFFCA
%FFCAFFCAFFC9C8C8C8C9FD1FFF282827284B52CAFFCAFFCAFFCAFFCAA97F
%7F557F7F7F4EA2CAFFCAFFCAFFCAFFCACF282800282728002800A8CAFFCA
%A8CAA8CFA8C299BCBBC29ABCBBC9A8CFA8CAA8CF7E5554797E7F54795479
%547954C3C1C8C2C9A8CFA8CAA8CAA0C8C2C8C2C9FD1FFF280028004C277D
%CACAA8CFA8CAA8CF7E7F5479547F545478CAA8CFA8CAA8CFA8CAA8C39A76
%4B5327282752A7CFA8CFFFCACFA8FFC2BCBBC2BCC3BBC3CACFA8FFCACFCA
%A9557F547F7F7F547F55795479A2C9C8C8C9FFA8A37E7FA0C1C1C8C2C8C9
%FD1FFF52050028275227CACACFA8FFCACFCAA97F7F547F7F784E7ECACFA8
%FFCACFA8FFCACFC3C3C2C3CAC3C2C2C9FFCACFA8A8CFA8CAA8C299BC99C2
%BCBBA1CFA8CAA8CFA8CF7E555479547FA87E787F787F7EA9C3C2C1C8A8CA
%545554C39FC8C2C8C1C9FD1FFFA200270027272728FFA8CAA8CFA8CF7E7F
%5479547F54544ECAA8CAA8CFA8CAA8CFA8C29AC2A1CFA0C2BCCAA8CFA8CA
%FFCAFFCAFFBCC2BBC2BCC2C2FFCAFFCAFFCAFFCAA9557F547F7FCFCAFFCA
%FFCAFFCACAC3C9C8CFCAA3557F78C2C2C8C2C8C9FD1FFFA87D002827284B
%287DFFCAFFCAFFCAA97F7F547F7F7E5479A8FFCAFFCAFFCAFFCACABCC3C3
%FFCAC9BCC3C9FFCAFFCAA8CFA8CAA8C2BBBC99C2C2CAA8CFA8CAA8CFA8CF
%7E795479547FA8CAA8CFA8CAA8CFA8CAA7C8C9CF7879547E9FC8C2C8C2C9
%CAFFA8FFCAFFA8FFCFFFA2A9A9A9A8A9A9A9A8FFCAFFA8FFCFFF7D7E7D7E
%7D7DCA28002800272752CACAA8CFA8CF7E7F5479547F78544EA8CACAA8CF
%A8CAA8FFC3C2BCCAA8CFA1C2BCCAA8CFA8CACFA8FFCACABBBCBBBCBBCACA
%CFA8FFCACFA8FFCAA9547F557978FFCACFA8FFCACFA8FFCAFFA8FFCA7F54
%7FCACFC9C8C8C8C2C9CACFA8CFCACFA8CFA8795479557F547955A3CACFCA
%CFA8FFA8280027272728FFA72700280052C8CFCACFA8FFCAA3787F557978
%7F54547EFFCACFA8FFCACFA8C3BCC3A8FFCAC9BCC3CAFFA8FFCAA8CAA8CF
%A7C29AC2BCC2A1FFA8CAA8CFA8CAA8CFA2555479547FA8CFA8CAA8CFA8CA
%A8CFA8CAA8CF7E5577CFA8C9C1C8C2C8A7FFA8CAA8CFA8CAA8A85479547F
%7E795479A2CFA8CFA8CAA8CF520000272728A8FF77000052A0C8A0CAA8CA
%A8CF7E7F5479FD04544E7EA8CFA8CFA8CFA8CABCC2A1CFA8FFA1BC9ACAA8
%CAA8CFFFCAFFCACAC2C3C2C2997CCAFFCAFFCAFFCAFFCACB557F557978FF
%CAFFCAFFCAFFCAFFCAFFCAFFCAA355A9CFFFC9FD04C8CFCAFFCAFFCAFFCA
%FFA8A37FA97FA37FA97FFFCAFFCAFFCAFFCF7D0028002800CACFFF5252C9
%C8C8C2C2FFCAFFCAA97EA37EA37EA37878A2FFCACA7EA9A8A97EC3C2CACA
%FFCACABCC3CAFFCAFFCAA8CAA8CFA8CAA0C376F827FFA8CAA8CFA8CAA8CF
%A87E787E78A2A8CFA8CAA8CFA8CAA8CFA8CAA8CF7E79A8CFA8C9C2C8C2C9
%A7CFA8CAA8CFA8CAA8FF77534CA8A17776A2CACAA8CFA8CAA8FFA8524B52
%517CA8CFCACAA8C9C2C299CAA8CAA8CFA8C3C27652A17651F852A8FF5328
%4E7F7F7954A2CACAA8CFA19B77CAA8CAA8CFFFCACFA8FFA8284C280052A8
%FFCACFA8FFCACFC3C9C8C8C2C8CAFFA8FFCACFA8FFCACFA8FFCACFCACBA8
%CFA8FFCAA2A17F7ECFCAFFCACFA8FFCACFA85252287DA1002727A8CFFFA8
%FFCAFFA8CFCFC9C8C8C9FFA8FFCAC9C8C2BCCAA8FFCACFCACF2627F8F8F8
%27F8F8F82776CA5228297F79797EFFCACFCAA37F7F7EFFCACFA8A8CFA8CA
%A8A800000028272852CAA8CAA8CFA7C3C1C8C2C8C2CAA8CAA8CFA8CAA8CF
%A8CAA8CFA8CAA8CFA8CAA8CA5455547954A2A2CFA8CAA8CFCAA12853287D
%52000027527D7DCAA8CFA8C9C2C8C2C8C1C9A8CAA8CAC8C299CAA8CAA8CF
%A8CF7DFD06F82DF800F8F852FF7D28015454A8A8CFA8CA787F797FA8CFA8
%CAFFCAFFCAFFA8280028002700007DFFCAFFC9FD07C8CAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCA7F557F557954797ECFCAFFCAFF53522852
%537E2852285227527DFFCAC9C1C2C2C2BBC2C3FFCAFFCAC8BBCACFFFCAFF
%CAFFCAA22953294D282828544D544D54CAFFCA7D2753CAFFCAFFA8532953
%287ECFFFCAA8CFA8CAA8CF7D7D777D52534CA8CACAA8CAC8C9C2C9C9C9C8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CF7E7F787F7E7F787FA8
%CAA8CFA8A87EFD04A8FFA8A9A8FFA8A8A8FFC2C29AC3C2C3A0CAA8CAA8FF
%A1C9A8CFA8CAA8CFA8CFFD04A2787F7E7F7EA8A2A8A2CFA8CFCAA87DCFA8
%CFA8CA52534C53A1CFA8CACFA8FFCACFA8FFCFFFCAFFCFFFCAFFCACFA8FF
%CAFFA8FFCAFFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%CAFFCACFCAFFCACFA8FFA8CFCAFFCACFA8CFA8CFA8CFCACFA8CFCAFFA8FF
%CAFFA8FFCACFA8FFCACFA8FFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACF
%A8FFCACFCAFFCACFA8FFCAFFCAFFCFFFA8FFCAA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFFFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2111.w037.n003.38B.p1.38</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator 24.2 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-11-25T17:36+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-11-25T17:36:01+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-11-25T17:36:01+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>108</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9B5jOW7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqu9KX+RvuOGkW70pf5G+440tu9KX+Rv&#xA;uONLbvSl/kb7jjS270pP5G+440trcCXYq7FUx0YAtLUV2H8csxtWVNOK+A+7LWl3FfAfdiruK+A+&#xA;7FXcV8B92KpVrIAljoKfCf15VkbsSX5W2uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kr7f&#xA;+/j/ANZf14RzQeTI8yHFdirsVdiq2X+6f/VP6sBSGN5juU7FXYqmWi/al+Q/jlmNqypplrS7FXYq&#xA;7FUq1n+9j/1T+vKsjdiS7K212KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVfb/38f8ArL+v&#xA;COaDyZHmQ4rsVdirsVWy/wB0/wDqn9WApDG8x3KdirsVcvmPQ9GkUapfQWbXJ424mlSMuw6hebLy&#xA;69snA01zFpwdYtQCaOadgB/XJ+IGAxFKdC87WWpiWJ4JIbu2do7iOgZQQAysrA9HR1b2rQ9MrhnB&#xA;cnPopQs9LpDt+YVg/mGLRba2meQVa7lYACMVKoAK1YsUY+wX3GR/Mi6He2fybIQMyRXDfzTuXX9O&#xA;i2kZlPWlN/145dZjx/UacaGlnLkEJf3kN00bxVKgdT74TMSAI5LGBjsULgZuxV2KuxVC6hqdlp8I&#xA;mu5PTRjxXYkk+wGV5MsYCy3YNNPKagLKpaXVvd26XFu/qQyCqOKitDTvkoTEhY5MMuKWORjIUQrZ&#xA;Jg7FWN+dfzC8peTNOe916/jgIQvDZqytczb0pFDUM2+1eg7kDCBbEkBG+UvNGleavLlj5g0oubC/&#xA;QvEJV4yKVYo6uAWHJXUqaEjwOJFJBtNJWKRO6ipVSQPEgZE8mURZAY35T83nWby8s5IHjktqMHZO&#xA;CsG3oKmtQCNiAaUPcE04shlzdhrdJHGLjdct2RXM629tLOys6wo0hRBychRWiqOp8Bl7rXnX5f8A&#xA;59eUPOuvvolnbXmn3bQ/WLT6+scfrqDRhHwkkqw607gE9skY0gSelZFk7FXYq4TxQOkkrBEVhUkg&#xA;d/fJRiSdkHknH6Ytv5X+4f1yzxA0+GUkv/zC0+z1aPTWsbueSUFklhEJQBSofkXlQ1XmNgCfDocr&#xA;OcByYaCcgCK3Tp9atVUtwkNATQAVNPpyZyBxxiJNJBon5k6brGpzWMNhdwfV1PqyziEDnsVVfTlk&#xA;r8B5GtKVHvSuOpjI0HLy9nZMcSZVsR+PuTHVPOXl3TlRNRvYbJp6rCLmWKLmfBebCv0ZbxuH4ZCF&#xA;VlZQykFSKgjcEHKW9vFUDrt7cWGiahfW0XrXFrbTTww0J5vHGWVaDfcimIQXxl+XflOb8w9R1PzF&#xA;5h1OWR7CdJbyS4+NJWl5PHG7NRURvTavxUAAFNxk8szEbM9HgjkO55Pq5/MNjo3lK1t3u0uNRis4&#xA;4FVHDuZFiC8m3qN9yTmdoOz8mWYuJEepLDNIRJASD8t7m6k16RGkd4/q7kqzEgfGm++bvtzBjjhB&#xA;EQDxDp5Fpx5JE0SUq1HVZdN1m5v5WYG2uXlkA5GpSQkig3PhTPNwZeLtz4nvxCB0wB+ng/QyHzl5&#xA;h+s6fpep6TcsqpOgvYFBMwjehIaNBIx40P7JHv0OZucY8ovYug0umyYpETBHL9rLdAuWk02D6xNA&#xA;904LssD80AYkrxrv9mlffL9NjGOAiC6/VAmZNbe5M8yHGdirsVdiry/XNefUtchsrqVKh5hb2CFR&#xA;LKqo1Vj5OnxVUNX2p3zVgyzTNiwPsephjx6bGDGVSlXPmfcnv5aXtp9QutJicmawkrPG5blG01W9&#xA;Mq5LKF7V69ffM/GTZBFdzpNZCNCcTd3fvZnlrguxV5t+aPlTyxe6ja67fFW1O3h+qRxusUiCJnLl&#xA;nSSg6kjlUUJ2NcrnOtgXM0uIH1Ebd/T3Mi8g23l7S/L9po+kTn6vApaG1kNJIhITIYwpCtRSxG9T&#xA;4nBDLGXWyx1GmnDfhIh0ZKwJUgHiSKA+By4OK8U0rVJ7DWIbxmaqzK9wBtyAorVp34imd3Ps/D4U&#xA;owjGNjuceWonI3IkvWpvMehRlo21CBJRsVZwCD7g9M44aDORtCXybhOLyXy7+XOgHznp3mXUXNnc&#xA;aPKyRTXLPGLjgrJEqGRk/u68iSp5dieuYWlxZZEgRJrnQdp2hHFUZD6v0Pa0dJEDowdGFVZTUEex&#xA;GTIINF1i7Al2KvO/zPVLu+sLBNVhs5njkZ1d4S8KqORm9F3RmqBxBCkA7nbNjpO0TpsUuGPqPIss&#xA;WnGWdE0nfke8tbTyXDcXM8KQ2oma4nDoyIiuzDmytIKrHxr8R+ZzAlknkNyslllgIyoPl2Lzd5mH&#xA;5hXF9ptzPZXGoam8gtzWgM89QrRuCpoCBuubPw4SgLo7OGMmSEiASPJ9l5qnIYVFcpovmC4LKFhd&#xA;yJABvwehU7eApmv4/Dme56SWL8zpxX1fpGzz38+vy+tfN+tafeQyH1ZbJre2uYuL0eFpJgnAunLm&#xA;XA2qR4b1GWc/Dy5OpxaDjBEtpD8fa8M8uecPNX5e/mFZW95q939S0q6it9TtFkkeM2iOBLD6LHjV&#xA;Y60Wnwt8sy+YdSfTKrfdCOjoroQyMAVYdCDuDlLkLbieO3t5Z5TSOFGkc/5KipyUIGUhEcygl4hL&#xA;fsL64urNEsRPI0hitlESjl7IFBOwqep753ePs7DHGIGIkPMcz3uKMsgbBpq2je6kaAKZLiU1iPVm&#xA;f+X35fryzMfCqQ2gNiOld/8Am/dfksfVd83pHkTyvc6THNd3oCXVwAqxA1KINzUjapOcz2x2hHMR&#xA;GH0x+0t2KFc0N5u8nXNzcvqGnKHeTeeCtCWH7S1237jOT1WlJPFF6bsztWMI+Hk2rkWD3ljJE5gv&#xA;ICjjcxyrQ796MM1/qgeoL0MZQyRsVIfNYDTcbU75FsZl5J83TSTxWF3N68E+1tOTyIbsvLuD0GbD&#xA;S6iQlwSee7U7OgYeLj6c65HzZ9mzeadiqRed7q6tPLF9d25YG3jMsvDZvTQcnpTfoN8pzxlKNR5l&#xA;zNBOEctz5AH50+KdU1S91S+lvbyQyTympJ6AdlUdgOwzfYcMccRGPIOpz55ZZmcjZLJ/ym8zav5f&#xA;852s+mgStchoJrNiFW4Q/F6QY7K7FRwb+aldq4M8QYm2OK+IAcy+yo3Dxq4FAwBpsevyqM1DmEVz&#xA;SXzb5gXRdN9UMqTSkrGzfZUD7TmvhXMfU5TAbfUXP7O0gyzuX0R5sM8pXqahfG9WYzrNE0glJJLV&#xA;ZfHfOf1QkNpc7ek1BicI4Pp6Jbq0l5D5huI1jKxCTmso2oGXnyrWteZpSnvlmMDgBvdtwSlKIBHp&#xA;Zn+X/nGPXrR4WLtNBXhM6lfVjVivIE7N8x2PjXN3gnL6Z/UHmu0NNAfvMf0E/b5eRY15o8s6np2s&#xA;SX1pbtNaNJ68bqvqKhryKuu+wPjtTO87O7Qx5cQhI1MCu6/c6KcCCxyc3Nw093MS7tJ++c0qZJOT&#xA;bj34nNtGhUR3NSkzu9OTFqCgqa0GSApU40DzDquiSpNHzexdqSQtX03p14k7BvcZg63Q49QKP19/&#xA;X+xnGZD162uIrm2iuIjWKZFkQ/5LCozhckDCRieYcsG2DfmX+b2jeS1WzSM6hrs6hoLBDQKGqFeV&#xA;qHiCeijc/jlmLAZ78gwlOtur5hvfPXmK581XfmX1zbapdsxkMNQq1XgFUOX+FQAKHM+WnhKIieTV&#xA;j1E8cuIGihLnW9Zvobyt1II7hUm1OMOVjneN+EbtGtFJX1B298MYCFD5fJZzOS5da3+dfpDLvyP8&#xA;pXvmPz5ZXjoz2GkOl5dztUgNFvBHU92dRt/KDkdRMRhXexxgylZfXOapy0i8yaJJeKtzbCtwgoyf&#xA;zL7e4zGz4eLcc3adna0Y/TL6T9iC06A21uo4lJSKvUUavvnO58sxMiyHY5ZCZ7wwbzT+WnknzZ5s&#xA;tLzX7Z2eCRVd4HEXqqAAsc5oSyV8CG8Dm27PzGEQOhadZoY5MXEB6h9r2JVVVCqAFAoANgAM2roE&#xA;t8zV/wAPajTr9Xk6f6pzL0H9/D+sGE+ReNWoBuI1IqGYLv0+Lb+Od1qTWOR7hfy3cbH9QTHy1DON&#xA;f09ghoLiOtfh25CvXNd2h2jp/ClDxI8RBFXZtyIaPNXFwS4R1p7PnFtjsVeW+eJK+ZbkHYKIwP8A&#xA;kWp/Wc1Wpw5J5DwxJ+D1/ZWSEdPGyBz+9C+V4rW51y3trlFmgnEsUsTUIZXiZSCPpyWn0eaMwZQk&#xA;B30WXaOqxnBLhlG9uo7wqSeWNQ0+79GP04hA4ED8go2PwkAfRtlEtPMSbcetxTxjuI5PV15cRy2a&#xA;m4Hjm6eJLeKobUbGDUNPurCfkILuJ4JSho3CRSjUJB3ocING0EPGNR/I/wAq2lneW9hbFNTMMsVt&#xA;cXMkkiB5EZA5UEL+1sabdaZL+UJiXqGzsI9l4pwuBN/jyQn5S/kPol5NFc61qs1r5k027WYafbPA&#xA;6hYXDxs20h+PjWhoadsypasTuI5EOvlpZ4ameh/Ts+i7Ty5b20XpCeR1H2eXHb7hmLHCAOa5tUch&#xA;ugCkXmvyJc6rc2UtpcqiROBcrKA37oHkQg6cnICknoN+uU5tIJmy5ej7SlhiQOpa0j8q9D0qaSS1&#xA;uJwjlmER4cV5nk3Gijq1T9OU5uzIT5ks5ds5DHh4Y1du1L8rdIv5ZpHvLmNpl4koUFPh41FVwQ7L&#xA;hGtyzh27ljDhAj9qGs/y2m0zWrKbTbgLp0NFlWSnqFeDhgKCndAo7b+2Ww0QjKwjN2ucuMxkB7gy&#xA;79DQfzt+H9MyvDDqfFLF/PnlDR59Jm1S9nnSPTIJpykPCr0WtDVSf2aDM7Sa+WljLhAN96YR8SYB&#xA;eSwNbS26y6I8k0zUJMfJpFQjluFAp1Xtmx7K7Q1GpyE5QBiA7tuLbqfK3P1+mwYsY4Dc7+NUrwaR&#xA;5o1aWOExXMoU0V5+fBKnf4n2GbrJq9PhBJMR7ubqREl61pdl9R022s+XM28SxlvEqKE5w+oy+Jkl&#xA;P+cbcuIoPlr85vJXnKx886nrb2k9zYXc/r2uoRI0sapQcUcgNwMYHGjU6bbZm4JxMOFx5iQlbz+S&#xA;aa++u3d3Rpgob1QoSsryrXlwCgsQW65YIiHDGPL9Ff2MjI5OKUuf6b/tTP8AL7SrTV/OWl6Tesws&#xA;7+YW9xwIVijg7Amu9emHNtG+5rxnf3vsry/5c0Ty9psem6NaJZ2ce/pp1ZjsWdjVnY06sa5qZTMj&#xA;ZcsADkmWRSpzzxQQvNK3GNBVm8B9GAkAWWUIGRERzLDNU8xReq7Q0RGY0kkoOvgM0E9Lx5DI9S9N&#xA;g0vDEcZSbSdQ07Vdej06HUIJb6UGZohIrNwQ/E3EH8Mz8WknXIiKc+uxY41YJ7g9QzYvLKV1bpc2&#xA;s1vJ/dzI0b/JwQf15PHMwkJDmDaCLeNz+XtWtbh1lg2hejOGWhoaVG/fOr1fbGmlgmOPcxO2/Mhs&#xA;0miy+JGXDtxA/ajYGWK2adBWdZFCPv8AB1YEdqkr3zy+JoX1e7mOKXCfpr5vU9NvFvbCC6XpMgYj&#xA;wPcfQc3+OfFEHveH1GI48hgehROTaXkvmU2155n1BHV/X5OqOrgLWKKirxKE7stPtZ3HZwMNPDur&#xA;7y4eT6il2i6q9je2jMAYYZ1l3G61ID0I/mVaZlarT+JCQ6mNfqRE0Xq+r6Bp2sNZyXXI/VJVuIuB&#xA;oGZfs8qdRXf5553KFuzxZzDkmYAAoOgyTS3irsVSTWwWuoo9gGXc0qaCp2zQ9pZJRy7H+H9buOz9&#xA;oE+aaeStEsoZ7nU1MhuXPpENI7IFoD8KElV+jNl2VkOSBJ5jZwu08hsR6c2W5tXUuxV2KuxV2Kux&#xA;VbLFHLG8UqLJFIpV0YAqykUIIOxBGKQafIv523xsPzeu9Fhkez0h47OFYLaT6skIkjjJePh8C7k1&#xA;qpFCfnmbjy5IYfQaqzXevFxS9W72n8qvMI17yHpV21RcwxfVLtD9pZbb903L3YKG+nNdnFTPm3wN&#xA;hluVM3Yq8S/M3yn5c1jzFqV9d2nK6jktoTOruhYei1eQUgH7IFfbOt7M0kJYYcQ58R+1xMv1Mf8A&#xA;LXlXyxomuWGrpCRJaXMJjVmd9y9S3xHiOKg/TTMjVaGHAREbkFjDm+jc4pzXYqgNd0e31nSp9NuJ&#xA;JIorgLWSFuMilGDqVJB7qMBFsoTMTYfHPnPW4td8w3wjlmaytXmj0svIZVFvCKLXlUlpFj5M/Kte&#xA;tc3WlwRhGgKLi6jUTyyuRvuXflfrM+m+f/L0yyFYxfRxN4BLk+hJ96Pvjm3gQ1QNEPtPNM5rsVeb&#xA;ecYUh8wzurOTLEAUJ+AcyjEgU6/uhmq1uSiYvU9kYrgJ3ysJWlf0fMKberFU/wCxkzCH0n3j9Ltj&#xA;9Y9x/QzfyFPI+kSRMDxhlIjPajAMR9+bTQSJhXcXme3IAZgR1DJsznTPFtXujF5mvLlfjMd5I6g9&#xA;DxlJH6s9A0sL08Y/0B9zhS5lBXkAtrt4h8UatWMn9qM/EjbfzKQcyYS4o2xT61/MDzBbMwQxNCWJ&#xA;jgdKqik1CKQVbiOg3zWZexsE9zYPeC2DKQzPRfM91qWmx3DIkcpJWQLWlQewJOee9uZp6XUSxQ5C&#xA;qJ57h3Wl0sZwEj1/WyC2l9WBHJBYj4qeOW6bLx4wbsuJmhwyIVcva0l1hlN1AVIJ+yab9mOc/wBq&#xA;0cg/q/pdvoAeA/juZH5Q/wB4pv8AjL/xqM2HYv8Ady/rfodf2n9Y9ye5uXWuxV2KuxV2KuxV2Kvi&#xA;3/nJf/yb2qf8YbT/AKh0zOwfS1y5so/IHzmttrsmk3DgWnmEG5tydguowqBcJ2AMq0ce3Ed8w82P&#xA;av5v3dP1fNyYS3vv+/q+hMxG52KvIvN0gOo3pBr6l5IG8f3SIB/xM53XZg/dR/qj7bcOfMsd1L/j&#xA;kp/zEH/iGZc/r+CA9x0K8+u6LY3dameCN2P+UVHL8c4DU4+DJKPcS5gOyOylLGfzK1W80vyJrV3Z&#xA;RSTXYtmigSFWZw837sOAoJ+DnzPyyzEAZC2MrrZ8YWSst7HGwILN6bKRv8fwnb6c3UJAG+jhUp2t&#xA;xJbXUNzH/eQOsiV/mQhh+rIkWh96W1xHc20VxEaxTIsiE/ysKj9eaQhz1XAl5r5zbl5huB/KsY/4&#xA;QH+OaTWn94XseyBWnj8fvQNlbTXVs9vCvKWW4hVB7lZMqhEyFDvH6XLzZBA8R5CMv969N0vT4dPs&#xA;YrSLpGPibuzHdmPzObzFjEIgB4rU5zlmZnqi8saHiOvKF1zUVHRbqYD5CQ56HozeGH9WP3OFLmU4&#xA;8ueWz5isZgbj0Z7IqkbFQwZHqQrUodiNjmDr+0PysxtcZMoQ4kZ/yq/Vq/7129P9n/zTmP8A6IMX&#xA;82X2MvBKf2Hl+XQ9LWKhupmkq8ifCqq1ABxJJO57Zxvb/Dq8niRFHk7fs/IQOCRFBO9LYqZYW6qa&#xA;0/A5rOypEGUD0/sKdaLqQecR+bdcGqGG7vma3DvFItF40NV3oM9D13ZWOell4cPWY7Os02UDLHiP&#xA;ptkWmj92h/4tP/Js547j5F63J1936WfeUP8AeKb/AIy/8ajOn7F/u5f1v0PO9p/WPcnubl1rsVdi&#xA;rsVdirsVdir5V/5yg8ozy6/P5rs1528LQ2GqAf7rkEMckUh9mWUJ7EDxzK08/wCFEo7W8Z0LUHt7&#xA;hYxMbZ/USa0uweJguojWKWvYV+FvbffiMsyx/iHT7R+PxusD0fX/AOXHneDzb5eS6cCHVrQ/V9Ws&#xA;zs0VwuzfD/K9OS/d1BzWZIcJ25Hk5UZX72V5WyeO+Z2Zry6JpT9IXgH0GMZ3ugFY4/1I/pcKfMpF&#xA;qsTDSLWUH4WuJlce6pGV/wCJNl8j668h+lQ9W/LS7+seULRSatA0kTfQ5Yf8Kwzju14cOoPnRcnG&#xA;dmU5rGxKvMt16Gky0NGmpEv+y6/8KDlOeVRc7s3Fx5h5bsc8u+XNM1G5e7v7OG6SD4Y/WjSQcyP8&#xA;oHoMp0l3duw7XyRERGtz9yS6T5Q8sR65DGmj2K0moaW0QqFP+r7YIZ8hmAZHn3lvz6fEMBkIxHp7&#xA;g9RVVVQqgKqiiqNgAMzXmm8VYB5n015NYuJ5FuAshXiyQhlIVANm5rXp4ZqNTiJmTv8AJ6vs3OBh&#xA;jEcO3n5+5B+SvMnlqLzefLyXnrarLDLILcqnKJoONQ4V5GRikpI5U2By/RYSCTR+IcPtnUiQEQY3&#xA;5G/m9LzYOgdirxnzbEYvMmoKe8xb/g/i/jnfdmyvTw9zhz+oss/KwH6vqJ7c4t/obNJ7RfVD3H9D&#xA;bh6s6znG92KrQihiwA5Hqab5EQAN1uniNU838o6Wtx51vZHUGCyaZwrCp9QycU+4cj86Z1vaeoMd&#xA;LAD+MD7nFxj1Ms1K3t4bqFIEWNftFVFATxYV/VnmHaOOMMlRFCno9HOUoEyN/gIrSQfWc12C/iTl&#xA;vZMfWT3Bp1x9ICa8m8T9+b91Sje+o1nOqk8mjcL16lT4ZZiNTF94UjZ48unaizlFu2Lg8SoS6JBH&#xA;anpZ3X5vD/R+cf1uL4U6ujSJu9O1Oa/lVJ3DciiRBLksAvwgfDGR0HbK4azCIizH5x/WnwZ1dGvc&#xA;9V06F7XT7a2LEmGJIyancqoBOcVnyceSUu8lyAKCJ5N4nKkviHzfBquh+adV0lrmdRZXUsUdZH3j&#xA;DH026/tJQ5usZEoguFIUae3/AJFNBrVn5v0XVIzdafezpdhZalZIrtGU0bxVY06Hbtmuy7CJHMCv&#xA;k5MdyWDal/zj55oj86SaRZgtohDXEeruKoluD9l6UrKvTiOvXYdLcuvjDEZkWR0Yw05lMRe4+V7b&#xA;TfKltaaJp0LzmTgr9GmfioT1ZG70VaeFBQUAzltNr8s8hJ3Eund7nfy7Pj4ZN8PCOZ6s2zduneS+&#xA;YtG1OOeZmhYL69xO5JWgDts3XuqjOx03amnjEAzAPDEfINQ0mSQ4gNklvtO1M6GzmOtnyiuoZuSG&#xA;P0ykgeQPWnGgWprTLMnaWn4weMcmMNNkkLA2Zr+TF1Fc+WJ5reaO4tXumMU0MiSKTwQMKoWoQR0O&#xA;aDtjLDJkBib9LPGNmQL588pPcS28eoxySQyNDJwDFRIp4spcDgKEb1OUY+zM848UY7e8fdzU5IpR&#xA;5n160u7uCxjLK6APxcceXqKCnHx+E5h63s3PGAnw3Hy3r3u57Iz4gTZqRZVpViLKwig/bArIfFju&#xA;cpxw4Y04WqzeLkMmMWMYHmwp4TykV8AGOYcI/vPi7vPP/BL/AKI/QzPM95x2KvFP+chR50j1DQbn&#xA;y4t+QiXAmaxWVgGJjIEgjBG4G3LMvTRgQRKvi1zyTibiSPc8c8qap508oa7Lrtrplz+kgrRytcQy&#xA;+myOwaVZl4qzAlQftCh3zKyY4zoXs0RkQSer6m/LnzjP5u8sRavcWLafOZHhlgYkqWjp8SEhTxNe&#xA;/wAvfNdlx8EqciErFpzqsx9FoFZ0Z1r6iU2+8HNXrtX4fpo2Q7DR4rPEaoJS1sk4USRiYxqAC6hj&#xA;RRTwzSnU5pnYy+Hc7ICMfKynWlxRxWSKiBBvsop3Phm/0EpSwgyJPP73Uav+8KLzLcd2KuxVRgtL&#xA;W3aRoIkiaZi8pVQCzE1LMR1OTnklKrJNckAMQ/MfU76x/R31WX0/U9bn8KmvHhT7QPic23ZHZ+DU&#xA;8Xix4uGq59b7lOpnj+k1bGND876vpTMCFvIZH5vHKxVqnqVcBqfKlM3ep7Fw5AOAcBArb9Tj+PK9&#xA;93onlrzJb67aySxxtDJCwWWJjypUVBDbVBzmdfoJaeQBNg9W6E+JGavc3trpd1cWNq99exRM1tZx&#xA;05SyAfAm5Xqeu+YcI2aTI0LfO+ieSvNlvrWlXknljVEutO1GC+n1SaySJp0EvO59eQytxBU1Bq3T&#xA;3zZTkDEi+jiR5oXzR+U/5xS+b9U1qx0S5e2nv5760KTxMDHJM0sfwrKG+yRtsccc4cIHkmRNvX/K&#xA;/mn8yTMLXW/Jl8tlEVQ6rzhR+FaepLAz+G7BHYj/ACu+Lkwx5gtscp5FmGr6tb6bbrLMwXm3BKgn&#xA;elf2Qc1erznHG4iy7LR6U5pUOiQz+Z7a5K0R5CBt6cTVNfnmhzSyZTcndY9AcY6D3lO9BuTcWTP6&#xA;UsNJCOMy8CdhuB4ZuOzYGOOj3uo7Qjw5OYO3RT8x3c9taJ6MbStK3ppGgJ5Ofsg07ZDtKM5CIHIn&#xA;f9DZ2bjjKRs1Q+zq1oOiGyVrm6Il1GfeaT+UfyL7DMjSaUYx5sddrfFPDHbGOX603zLde+VPzc8o&#xA;/mn5j85+Yp7G7mXQpJOI0/6xcCH0rZFi5NEF9MBinKp2365s8eguIlxQs+e7TLJPcWaYJY/l95sj&#xA;RLLUbOPULIj0wIr0xzQpyLkQgv6P2mLUaNh16dcv/knN0o/ENXEyXyl+W35s+WLoaj5Wv760Sajg&#xA;paTtHMnVDJFSWF9j/lDwOROhhyOSFshfR7S/5WjzHolpr0IPlnzjLGfr7QxslvPMhKsZrVqUEhXk&#xA;DSorvyyrHrJ6eZAlxAdR+N2Zx8QvkUv8n6B5rXzdBpXmHSmgNtW4bUIP3llMkRFODnoWYj4D8VM2&#xA;2btiMsEv5xFfNrjjPFu9nY8VLUJoK0HU/LOWcp8+r+ZtpFeM406Z9Rac3IBtZ/rPP1K7EECn7NOn&#xA;052Zy4TDhuXDw1XwcKzdve9Ou2vNPtrtoJLZriJJWtphxljLqG4SL2Za0I8c46QokOYERkUuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVayK6lWAZT1BFRihb9XgoB6a0U1UcRsfbDxFeENvFFJTmitTp&#xA;yAP68Fq0tvbqQViQEdCFAOGytLyAaVHTcYE23irsVdirsVdirsVdirsVdirsVdirsVdiqZ/7hP8A&#xA;P1Mt9LT63f7hP8/Ux9K+t3+4T/P1MfSvrd/uE/z9TH0r63f7hP8AP1MfSvrd/uE/z9TH0r63f7hP&#xA;8/Ux9K+t3+4T/P1MfSvrd/uE/wA/Ux9K+t3+4T/P1MfSvrd/uE/z9TH0r63f7hP8/Ux9K+t3+4T/&#xA;AD9TH0r63f7hP8/Ux9K+t3+4T/P1MfSvrd/uE/z9TH0r63f7hP8AP1MfSvrd/uE/z9TH0r63f7hP&#xA;8/Ux9K+t3+4T/P1MfSvrd/uE/wA/Ux9K+t3+4T/P1MfSvrd/uE/z9TH0r63f7hP8/Ux9K+t3+4T/&#xA;AD9TH0r63f7hP8/Ux9K+t3+4T/P1MfSvrd/uE/z9TH0r63f7hP8AP1MfSvrd/uE/z9TH0r63f7hP&#xA;8/Ux9K+t3+4T/P1MfSvrf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:a258f9f4-d42d-2a44-939f-5183d0a1d82d</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:a258f9f4-d42d-2a44-939f-5183d0a1d82d</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:f714f5c7-7a8c-d04a-8967-b226b9b9eeba</stRef:instanceID>
            <stRef:documentID>xmp.did:f714f5c7-7a8c-d04a-8967-b226b9b9eeba</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88</stEvt:instanceID>
                  <stEvt:when>2021-11-02T18:45:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.2 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f714f5c7-7a8c-d04a-8967-b226b9b9eeba</stEvt:instanceID>
                  <stEvt:when>2021-11-25T17:35:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.2 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a258f9f4-d42d-2a44-939f-5183d0a1d82d</stEvt:instanceID>
                  <stEvt:when>2021-11-25T17:36:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.2 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>967.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
967 400 li
967 0 li
cp
clp
967 400 mo
0 400 li
0 0 li
967 0 li
967 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.937255 .870588 .831373 rgb
f
377.377 141.765 mo
376.118 135.133 365.973 124.698 365.99 114.404 cv
365.99 114.404 358.888 110.463 352.001 116.199 cv
348.7 118.949 348.278 121.936 348.168 124.662 cv
348.099 126.394 347.354 128.081 346.001 129.164 cv
345.548 129.526 345.022 129.834 344.411 130.068 cv
340.359 131.617 336.714 132.236 334.844 137.86 cv
334.207 139.777 334.615 142.066 335.243 144.376 cv
336.358 148.482 334.132 152.755 330.125 154.185 cv
330.01 154.226 li
322.293 156.96 318.212 171.559 332.509 180.875 cv
357.051 196.866 375.885 159.749 375.885 159.749 cv
375.885 159.749 379.183 151.276 377.377 141.765 cv
cp
.968627 .45098 .309804 rgb
f
333.958 279.351 mo
314.795 280.754 li
320.121 298.997 li
335.656 301.594 li
333.958 279.351 li
cp
.988235 .639216 .592157 rgb
f
394.219 214.052 mo
394.219 214.052 414.96 280.175 395.404 296.4 cv
375.849 312.625 332.562 305.911 332.562 305.911 cv
329.852 272.404 li
353.519 269.805 li
379.893 210.201 li
394.219 214.052 li
cp
.956863 .623529 .258824 rgb
f
348.646 329.409 mo
349.001 349.313 li
369.22 341.823 li
370.713 326.144 li
348.646 329.409 li
cp
.988235 .639216 .592157 rgb
f
347.403 203.893 mo
347.403 203.893 342.69 218.718 343.5 230.645 cv
344.312 242.57 345.636 269.603 345.372 274.373 cv
345.106 279.144 343.407 331.883 343.407 331.883 cv
343.407 331.883 352.474 334.533 362.306 334.533 cv
372.139 334.533 377.632 333.474 377.632 333.474 cv
377.632 333.474 387.231 274.638 386.311 257.146 cv
385.39 239.655 387.75 212.1 387.75 212.1 cv
347.403 203.893 li
cp
1 .74902 .411765 rgb
f
408.324 195.171 mo
389.166 171.662 li
380.501 178.778 li
386.386 198.237 li
408.324 195.171 li
cp
.988235 .639216 .592157 rgb
f
393.871 171.202 mo
393.871 171.202 386.466 163.926 382.98 159.024 cv
379.495 154.122 377.097 151.238 377.097 151.238 cv
385.483 178.105 li
385.483 178.105 391.397 171.896 393.871 171.202 cv
cp
.117647 .129412 .262745 rgb
f
374.997 340.886 mo
374.997 340.886 373.704 334.386 370.342 334.076 cv
366.98 333.767 362.163 340.886 362.163 340.886 cv
362.163 340.886 349.028 339.957 348.1 340.886 cv
347.171 341.814 347.171 362.242 348.1 362.552 cv
349.028 362.861 403.503 362.861 405.979 362.552 cv
408.455 362.242 404.913 351.719 400.029 349.861 cv
395.146 348.005 389.887 347.998 389.887 347.998 cv
374.997 340.886 li
cp
.501961 .45098 .92549 rgb
f
326.043 304.592 mo
326.043 304.592 332.36 303.019 332.507 299.705 cv
332.654 296.393 325.443 291.997 325.443 291.997 cv
325.443 291.997 325.741 279.066 324.787 278.198 cv
323.832 277.331 303.787 278.285 303.527 279.21 cv
303.267 280.136 305.811 333.589 306.23 336.005 cv
306.65 338.42 316.811 334.452 318.405 329.573 cv
319.999 324.695 319.759 319.534 319.759 319.534 cv
326.043 304.592 li
cp
f
390.109 204.997 mo
390.109 204.997 389.388 160.471 375.672 149.987 cv
361.957 139.504 347.403 149.987 347.403 149.987 cv
352.293 207.893 li
352.293 207.893 373.147 212.614 390.109 204.997 cv
cp
.117647 .129412 .262745 rgb
f
355.617 137.973 mo
355.846 147.116 li
355.846 147.116 357.561 149.703 362.921 150.003 cv
366.914 150.228 368.124 148.149 368.124 148.149 cv
366.958 140.172 li
357.247 138.291 li
355.617 137.973 li
cp
.988235 .639216 .592157 rgb
f
357.247 138.291 mo
357.276 138.539 357.378 138.832 357.534 139.166 cv
359.695 143.682 365.313 144.526 367.619 144.675 cv
366.958 140.172 li
357.247 138.291 li
cp
0 0 0 rgb
f
368.474 119.28 mo
368.474 119.28 373.561 130.624 371.829 137.041 cv
370.097 143.458 364.256 142.506 360.756 141.302 cv
357.255 140.099 355.616 137.975 355.616 137.975 cv
355.616 137.975 352.368 139.111 350.159 136.102 cv
347.95 133.092 349.259 129.599 351.112 128.784 cv
352.965 127.969 355.19 129.291 355.19 129.291 cv
353.425 125.997 li
353.425 125.997 360.56 109.104 368.474 119.28 cv
cp
.988235 .639216 .592157 rgb
f
355.19 129.291 mo
355.19 129.291 360.089 130.279 363.492 124.828 cv
366.895 119.377 366.583 117.138 366.583 117.138 cv
369.973 122.766 li
369.973 122.766 370.731 118.864 369.17 116.376 cv
367.61 113.889 365.99 114.404 365.99 114.404 cv
355.189 117.103 li
352.345 125.76 li
355.19 129.291 li
cp
.968627 .45098 .309804 rgb
f
365.993 136.942 mo
365.307 136.942 364.089 136.718 362.944 135.377 cv
362.81 135.219 362.828 134.982 362.985 134.848 cv
363.143 134.714 363.379 134.732 363.514 134.89 cv
364.88 136.491 366.301 136.174 366.362 136.159 cv
366.56 136.113 366.764 136.233 366.814 136.434 cv
366.864 136.634 366.744 136.836 366.544 136.887 cv
366.52 136.893 366.314 136.942 365.993 136.942 cv
cp
0 0 0 rgb
f
368.086 133.771 mo
368.05 133.771 368.013 133.766 367.977 133.754 cv
367.779 133.694 367.667 133.484 367.728 133.286 cv
368.37 131.191 366.796 128.937 366.781 128.915 cv
366.66 128.746 366.701 128.512 366.87 128.392 cv
367.038 128.272 367.272 128.312 367.392 128.481 cv
367.466 128.585 369.194 131.062 368.445 133.506 cv
368.396 133.667 368.247 133.771 368.086 133.771 cv
cp
f
362.45 128.736 mo
362.395 128.736 362.338 128.724 362.285 128.698 cv
362.099 128.607 362.022 128.382 362.113 128.196 cv
362.386 127.64 362.782 127.289 363.291 127.152 cv
364.26 126.89 365.248 127.542 365.29 127.57 cv
365.461 127.685 365.508 127.917 365.394 128.089 cv
365.279 128.26 365.046 128.308 364.875 128.194 cv
364.867 128.189 364.118 127.702 363.484 127.876 cv
363.189 127.957 362.962 128.169 362.787 128.526 cv
362.722 128.659 362.588 128.736 362.45 128.736 cv
cp
f
368.842 128.203 mo
368.802 128.203 368.761 128.196 368.721 128.183 cv
368.526 128.116 368.42 127.904 368.487 127.708 cv
368.533 127.572 368.96 126.379 369.819 126.254 cv
370.306 126.181 370.791 126.468 371.242 127.106 cv
371.36 127.275 371.321 127.509 371.152 127.629 cv
370.981 127.748 370.748 127.709 370.628 127.539 cv
370.368 127.169 370.117 126.966 369.927 126.997 cv
369.637 127.038 369.321 127.589 369.198 127.949 cv
369.144 128.104 368.998 128.203 368.842 128.203 cv
cp
f
362.692 125.402 mo
362.596 125.402 362.5 125.365 362.427 125.292 cv
362.281 125.146 362.281 124.908 362.427 124.762 cv
364.277 122.912 365.535 123.951 365.587 123.996 cv
365.745 124.13 365.763 124.367 365.628 124.524 cv
365.495 124.679 365.259 124.698 365.104 124.569 cv
365.061 124.536 364.285 123.966 362.958 125.292 cv
362.884 125.365 362.789 125.402 362.692 125.402 cv
cp
f
351.4 333.782 mo
351.176 333.772 351.016 333.598 351.025 333.391 cv
351.044 332.944 352.958 288.433 351.918 263.821 cv
350.878 239.185 351.023 225.335 351.024 225.198 cv
351.027 225.005 351.175 224.845 351.368 224.828 cv
358.893 224.198 359.292 215.883 359.305 215.529 cv
359.313 215.322 359.485 215.173 359.693 215.168 cv
359.9 215.176 360.062 215.35 360.055 215.557 cv
360.051 215.648 359.634 224.632 351.771 225.542 cv
351.756 227.795 351.718 241.286 352.667 263.79 cv
353.708 288.433 351.793 332.977 351.774 333.424 cv
351.765 333.625 351.599 333.782 351.4 333.782 cv
cp
.968627 .45098 .309804 rgb
f
370.105 124.967 mo
370.005 124.967 369.906 124.928 369.833 124.85 cv
369.512 124.513 368.925 124.068 368.666 124.14 cv
368.576 124.161 368.517 124.296 368.483 124.406 cv
368.423 124.604 368.212 124.715 368.015 124.656 cv
367.817 124.595 367.706 124.386 367.766 124.188 cv
367.93 123.647 368.252 123.466 368.494 123.409 cv
369.285 123.226 370.202 124.147 370.377 124.335 cv
370.52 124.485 370.513 124.722 370.363 124.865 cv
370.291 124.933 370.198 124.967 370.105 124.967 cv
cp
0 0 0 rgb
f
354.721 134.647 mo
354.622 134.647 354.522 134.608 354.449 134.53 cv
351.345 131.26 li
351.202 131.11 351.209 130.873 351.359 130.73 cv
351.509 130.587 351.746 130.593 351.889 130.744 cv
354.993 134.014 li
355.135 134.164 355.129 134.401 354.979 134.544 cv
354.906 134.613 354.813 134.647 354.721 134.647 cv
cp
f
351.442 133.778 mo
351.26 133.778 351.101 133.646 351.072 133.46 cv
351.041 133.255 351.181 133.064 351.385 133.032 cv
353.525 132.702 li
353.729 132.673 353.921 132.811 353.952 133.015 cv
353.984 133.22 353.844 133.411 353.639 133.443 cv
351.5 133.773 li
351.481 133.776 351.461 133.778 351.442 133.778 cv
cp
f
373.022 207.611 mo
373.022 207.611 362.598 202.841 358.711 198.248 cv
354.824 193.654 353.519 185.526 353.519 185.526 cv
332.562 190.827 li
332.562 190.827 332.562 201.163 342.456 209.34 cv
350.634 216.098 371.955 218.743 371.955 218.743 cv
373.022 207.611 li
cp
.988235 .639216 .592157 rgb
f
347.403 149.987 mo
347.403 149.987 335.036 155.749 331.679 168.518 cv
328.321 181.286 330.618 192.417 330.618 192.417 cv
357.15 191.335 li
352.293 166.624 li
351.638 162.999 350.621 159.448 349.256 156.026 cv
347.403 149.987 li
cp
.117647 .129412 .262745 rgb
f
363.172 150.333 mo
362.717 150.333 362.225 150.307 361.691 150.249 cv
356.631 149.698 354.91 146.699 354.839 146.572 cv
354.739 146.391 354.804 146.164 354.984 146.063 cv
355.166 145.963 355.394 146.026 355.495 146.207 cv
355.51 146.234 357.121 148.997 361.772 149.504 cv
366.342 150.001 367.589 147.968 367.602 147.948 cv
367.706 147.77 367.936 147.708 368.113 147.809 cv
368.292 147.911 368.356 148.136 368.255 148.316 cv
368.205 148.407 367.081 150.333 363.172 150.333 cv
cp
1 1 1 rgb
f
381.963 301.969 mo
381.936 301.969 381.909 301.966 381.88 301.959 cv
381.678 301.914 381.552 301.713 381.597 301.511 cv
381.62 301.415 383.792 291.719 385.246 276.002 cv
387.112 255.811 386.549 224.229 386.543 223.913 cv
386.542 223.782 386.607 223.659 386.718 223.589 cv
392.854 219.714 li
393.03 219.604 393.261 219.654 393.372 219.831 cv
393.482 220.006 393.429 220.237 393.254 220.349 cv
387.297 224.11 li
387.343 226.917 387.783 256.708 385.992 276.07 cv
384.534 291.842 382.351 301.58 382.329 301.677 cv
382.29 301.851 382.135 301.969 381.963 301.969 cv
cp
f
389.887 348.373 mo
383.976 348.373 li
383.769 348.373 383.601 348.205 383.601 347.998 cv
383.601 347.791 383.769 347.623 383.976 347.623 cv
389.887 347.623 li
390.094 347.623 390.262 347.791 390.262 347.998 cv
390.262 348.205 390.094 348.373 389.887 348.373 cv
cp
.117647 .129412 .262745 rgb
f
319.759 319.909 mo
319.599 319.909 319.451 319.806 319.401 319.646 cv
317.651 314.005 li
317.589 313.807 317.7 313.597 317.898 313.535 cv
318.099 313.474 318.306 313.585 318.368 313.782 cv
320.118 319.423 li
320.179 319.621 320.068 319.831 319.871 319.893 cv
319.833 319.904 319.796 319.909 319.759 319.909 cv
cp
f
547.703 131.1 mo
547.703 131.1 543.036 119.989 542.592 112.434 cv
542.147 104.878 543.703 102.211 544.814 101.989 cv
545.925 101.767 547.259 106.434 547.259 106.434 cv
547.259 106.434 547.036 99.3223 549.48 98.8779 cv
551.925 98.4336 552.814 104.656 552.814 104.656 cv
552.814 104.656 553.703 99.5449 555.703 100.434 cv
557.703 101.322 558.369 112.878 558.369 112.878 cv
558.369 112.878 559.925 107.1 561.48 107.767 cv
563.036 108.434 564.147 116.878 563.036 119.989 cv
561.925 123.1 559.036 126.878 559.036 126.878 cv
547.703 131.1 li
cp
.976471 .533333 .458824 rgb
f
553.258 124.586 mo
553.067 124.586 552.904 124.441 552.886 124.248 cv
552.206 117.232 557.898 112.767 558.141 112.581 cv
558.305 112.455 558.54 112.485 558.666 112.649 cv
558.793 112.813 558.762 113.048 558.599 113.175 cv
558.542 113.218 552.993 117.581 553.632 124.175 cv
553.651 124.381 553.501 124.565 553.295 124.584 cv
553.282 124.586 553.271 124.586 553.258 124.586 cv
cp
0 0 0 rgb
f
545.925 115.031 mo
545.765 115.031 545.616 114.927 545.566 114.766 cv
545.506 114.567 545.617 114.358 545.815 114.297 cv
556.704 110.964 li
556.904 110.903 557.112 111.014 557.173 111.212 cv
557.233 111.411 557.122 111.62 556.924 111.681 cv
546.035 115.014 li
545.998 115.025 545.961 115.031 545.925 115.031 cv
cp
f
477 338.333 mo
459 338.333 li
459 326.333 li
477 326.333 li
477 338.333 li
cp
.988235 .639216 .592157 rgb
f
508 337.333 mo
488.667 337.333 li
488.667 325.333 li
508 325.333 li
508 337.333 li
cp
f
461.333 202.333 mo
461.333 202.333 455 238 452.667 276.333 cv
450.333 314.667 452.667 329 452.667 329 cv
452.667 329 482.333 330.667 483.667 329 cv
485 327.333 486.333 310.667 486.333 310.667 cv
486.333 310.667 485 329.333 486.333 329.333 cv
487.667 329.333 512.667 330 513 328.333 cv
513.333 326.667 523.667 278.333 525.333 262.667 cv
527 247 505.667 200.667 505.667 200.667 cv
461.333 202.333 li
cp
.501961 .45098 .92549 rgb
f
486.307 318.354 mo
486.06 318.328 485.911 318.143 485.934 317.938 cv
492.159 261.849 li
492.183 261.643 492.374 261.508 492.573 261.517 cv
492.779 261.54 492.928 261.726 492.905 261.931 cv
486.68 318.02 li
486.658 318.212 486.496 318.354 486.307 318.354 cv
cp
1 1 1 rgb
f
435.167 195.917 mo
435.167 195.917 436.5 173.333 451.167 159.917 cv
465.833 146.5 474.917 145.583 474.917 145.583 cv
484.167 144.667 li
484.167 144.667 494.5 143 513.417 155.083 cv
532.333 167.167 538 195.667 538 195.667 cv
506.667 201.667 li
461.333 202.333 li
435.167 195.917 li
cp
.968627 .45098 .309804 rgb
f
473.893 146.722 mo
473.893 146.722 472.333 168.778 473.444 186.556 cv
474.556 204.333 476.333 209.667 476.333 209.667 cv
476.333 209.667 480.778 211.111 484.444 211 cv
488.111 210.889 491.111 209.667 491.111 209.667 cv
491.111 209.667 491.553 197.294 490.333 182.333 cv
489.111 167.333 485.333 144.444 485.333 144.444 cv
473.893 146.722 li
cp
1 .74902 .411765 rgb
f
473.833 139.944 mo
473.893 146.722 li
473.893 146.722 476.479 148.859 479.75 148.86 cv
484.167 148.861 485.667 145.444 485.667 145.444 cv
485.5 137.5 li
473.833 139.944 li
cp
.988235 .639216 .592157 rgb
f
473.833 139.944 mo
473.833 139.944 476.667 144.667 480.667 143.833 cv
484.667 143 485.072 138.278 485.072 138.278 cv
473.833 139.944 li
cp
0 0 0 rgb
f
487.195 120.239 mo
487.195 120.239 489.738 132.325 485.895 138.195 cv
482.05 144.065 476.898 142.448 474.572 140.721 cv
471.435 138.391 470.745 135.097 470.745 135.097 cv
470.745 135.097 466.501 136.017 465.022 132.568 cv
463.47 128.946 466.072 125.958 468.199 125.749 cv
470.326 125.539 470.581 125.923 470.581 125.923 cv
469.89 122.038 li
469.89 122.038 482.596 107.43 487.195 120.239 cv
cp
.988235 .639216 .592157 rgb
f
462.841 198.264 mo
462.626 198.259 462.462 198.088 462.466 197.881 cv
462.468 197.804 462.574 190.053 458.699 184.778 cv
454.834 179.519 447.733 178.048 447.662 178.034 cv
447.458 177.994 447.327 177.796 447.367 177.593 cv
447.408 177.391 447.598 177.257 447.808 177.299 cv
448.11 177.359 455.263 178.835 459.302 184.333 cv
463.331 189.817 463.223 197.569 463.216 197.896 cv
463.212 198.101 463.045 198.264 462.841 198.264 cv
cp
.117647 .129412 .262745 rgb
f
455.471 175.931 mo
454.641 175.94 454.51 176.243 454.467 176.342 cv
453.947 177.542 456.505 181.112 458.601 183.541 cv
458.521 181.719 458.178 177.938 456.719 176.481 cv
456.348 176.111 455.939 175.931 455.471 175.931 cv
cp
459 184.931 mo
458.897 184.931 458.796 184.888 458.724 184.809 cv
458.117 184.145 452.82 178.256 453.779 176.044 cv
454.023 175.481 454.581 175.191 455.439 175.181 cv
456.139 175.181 456.737 175.439 457.248 175.951 cv
459.417 178.114 459.378 184.297 459.375 184.56 cv
459.373 184.713 459.278 184.851 459.134 184.906 cv
459.091 184.922 459.045 184.931 459 184.931 cv
cp
f
512.114 194.708 mo
511.91 194.708 511.743 194.545 511.739 194.341 cv
511.732 194.014 511.623 186.262 515.652 180.778 cv
519.691 175.279 526.844 173.804 527.146 173.744 cv
527.353 173.701 527.547 173.836 527.588 174.038 cv
527.628 174.241 527.496 174.438 527.293 174.479 cv
527.222 174.493 520.12 175.963 516.256 181.222 cv
512.381 186.497 512.487 194.249 512.489 194.326 cv
512.493 194.533 512.329 194.704 512.122 194.708 cv
512.119 194.708 512.116 194.708 512.114 194.708 cv
cp
f
519.483 172.375 mo
519.015 172.375 518.606 172.555 518.235 172.926 cv
516.775 174.384 516.433 178.164 516.353 179.985 cv
518.449 177.556 521.008 173.986 520.487 172.787 cv
520.444 172.687 520.313 172.385 519.505 172.375 cv
519.498 172.375 519.49 172.375 519.483 172.375 cv
cp
515.954 181.375 mo
515.909 181.375 515.864 181.367 515.82 181.35 cv
515.677 181.295 515.581 181.158 515.579 181.004 cv
515.576 180.742 515.538 174.559 517.706 172.395 cv
518.218 171.884 518.815 171.625 519.483 171.625 cv
520.373 171.635 520.932 171.926 521.176 172.488 cv
522.135 174.701 516.838 180.589 516.23 181.253 cv
516.158 181.332 516.058 181.375 515.954 181.375 cv
cp
f
453.444 190.444 mo
453.444 190.444 465.111 192.778 462.444 195.333 cv
459.778 197.889 453.111 196.222 453.111 196.222 cv
453.444 190.444 li
cp
.988235 .639216 .592157 rgb
f
524.037 189.893 mo
524.037 189.893 512.577 193.091 515.427 195.44 cv
518.277 197.789 524.801 195.629 524.801 195.629 cv
524.037 189.893 li
cp
f
474.222 130.486 mo
474.031 130.486 473.868 130.342 473.849 130.148 cv
473.642 128.05 li
473.622 127.844 473.772 127.66 473.978 127.64 cv
474.192 127.615 474.369 127.771 474.388 127.977 cv
474.595 130.075 li
474.616 130.281 474.465 130.464 474.259 130.484 cv
474.247 130.486 474.234 130.486 474.222 130.486 cv
cp
0 0 0 rgb
f
481.254 129.724 mo
481.063 129.724 480.9 129.579 480.881 129.385 cv
480.674 127.287 li
480.654 127.081 480.804 126.897 481.01 126.877 cv
481.225 126.854 481.401 127.008 481.42 127.214 cv
481.627 129.312 li
481.648 129.518 481.498 129.702 481.292 129.722 cv
481.279 129.723 481.266 129.724 481.254 129.724 cv
cp
f
615.135 357.867 mo
615.16 358.308 614.825 358.682 614.386 358.717 cv
563.364 362.829 li
562.915 362.865 562.521 362.53 562.484 362.08 cv
562.094 357.435 li
562.094 357.375 li
562.088 356.975 562.374 356.621 562.783 356.556 cv
563.063 356.513 563.29 356.339 563.397 356.098 cv
563.455 355.978 563.483 355.827 563.461 355.667 cv
563.304 354.309 563.205 351.35 564.813 348.859 cv
567 345.5 578.503 341.791 583.584 339.505 cv
586.895 338.021 588.564 334.11 589.331 331.56 cv
589.753 330.154 591 329.158 592.459 329.089 cv
598.247 328.854 611.9 328.297 612.783 328.466 cv
613.896 328.671 615.138 338.876 614.74 342.881 cv
614.352 346.887 613.522 351.567 613.522 351.567 cv
614.85 351.32 li
615.135 357.867 li
cp
1 .74902 .411765 rgb
f
615.135 357.867 mo
615.16 358.308 614.825 358.682 614.386 358.717 cv
563.364 362.829 li
562.915 362.865 562.521 362.53 562.484 362.08 cv
562.094 357.435 li
562.094 357.375 li
562.088 356.975 562.374 356.621 562.783 356.556 cv
563.063 356.513 563.29 356.339 563.397 356.098 cv
577.746 355.142 613.522 351.567 613.522 351.567 cv
614.85 351.32 li
615.135 357.867 li
cp
.968627 .45098 .309804 rgb
f
584.461 338.76 mo
584.293 338.76 584.141 338.646 584.098 338.477 cv
584.047 338.276 584.168 338.072 584.369 338.021 cv
589.907 336.616 li
590.105 336.566 590.312 336.687 590.362 336.888 cv
590.413 337.088 590.292 337.292 590.091 337.343 cv
584.553 338.748 li
584.522 338.756 584.491 338.76 584.461 338.76 cv
cp
1 1 1 rgb
f
586.276 341.625 mo
586.271 341.625 578.269 341.507 578.269 341.507 cv
578.062 341.504 577.896 341.333 577.899 341.126 cv
577.902 340.921 578.069 340.757 578.274 340.757 cv
578.28 340.757 586.282 340.875 586.282 340.875 cv
586.489 340.878 586.654 341.049 586.651 341.256 cv
586.648 341.461 586.481 341.625 586.276 341.625 cv
cp
f
692.529 322.565 mo
692.849 322.869 692.859 323.371 692.563 323.697 cv
658.108 361.552 li
657.805 361.886 657.288 361.91 656.955 361.606 cv
653.497 358.48 li
653.455 358.437 li
653.178 358.148 653.146 357.695 653.399 357.368 cv
653.573 357.145 653.622 356.863 653.535 356.613 cv
653.495 356.485 653.413 356.356 653.288 356.255 cv
652.245 355.371 650.152 353.277 649.624 350.359 cv
648.928 346.413 654.795 335.847 656.943 330.706 cv
658.349 327.361 656.896 323.364 655.714 320.978 cv
655.063 319.663 655.292 318.083 656.312 317.036 cv
660.377 312.911 669.969 303.178 670.729 302.698 cv
671.682 302.088 679.56 308.692 682.005 311.89 cv
684.457 315.08 687.049 319.065 687.049 319.065 cv
687.85 317.979 li
692.529 322.565 li
cp
1 .74902 .411765 rgb
f
692.529 322.565 mo
692.849 322.869 692.859 323.371 692.563 323.697 cv
658.108 361.552 li
657.805 361.886 657.288 361.91 656.955 361.606 cv
653.497 358.48 li
653.455 358.437 li
653.178 358.148 653.146 357.695 653.399 357.368 cv
653.573 357.145 653.622 356.863 653.535 356.613 cv
663.361 346.114 687.049 319.065 687.049 319.065 cv
687.85 317.979 li
692.529 322.565 li
cp
.968627 .45098 .309804 rgb
f
656.819 329.663 mo
656.75 329.663 656.68 329.644 656.617 329.604 cv
656.442 329.492 656.392 329.26 656.504 329.086 cv
659.588 324.277 li
659.699 324.102 659.932 324.053 660.105 324.164 cv
660.28 324.275 660.331 324.508 660.219 324.682 cv
657.135 329.49 li
657.063 329.603 656.942 329.663 656.819 329.663 cv
cp
1 1 1 rgb
f
654.177 335.896 mo
654.075 335.896 653.973 335.854 653.899 335.772 cv
653.76 335.619 653.771 335.382 653.925 335.243 cv
659.851 329.864 li
660.003 329.726 660.242 329.736 660.38 329.89 cv
660.52 330.043 660.508 330.28 660.354 330.419 cv
654.429 335.798 li
654.357 335.863 654.267 335.896 654.177 335.896 cv
cp
f
589.667 212.333 mo
589.667 212.333 576.167 246.667 572.5 270.167 cv
568.833 293.667 581.5 331.833 581.5 331.833 cv
620.5 331.333 li
620.5 331.333 613.167 293.5 611.833 282 cv
610.833 269.333 617.833 214.5 617.833 214.5 cv
589.667 212.333 li
cp
.117647 .129412 .262745 rgb
f
635 211.667 mo
635 211.667 642.333 242.333 657 268 cv
671.667 293.667 678.667 301 678.667 301 cv
650 329 li
650 329 613 288.667 608.667 262.667 cv
604.333 236.667 604.667 213.333 604.667 213.333 cv
635 211.667 li
cp
f
607.333 146.667 mo
607.333 146.667 587.904 146.262 578.217 147.624 cv
572.014 148.497 566.845 122.292 566.845 122.292 cv
543.705 127.638 li
543.705 127.638 542.667 168.167 561.167 175.5 cv
579.667 182.833 589.833 181.5 589.833 181.5 cv
589.833 181.5 586.833 211.5 587.5 212.667 cv
588.167 213.833 602.084 216.833 615.542 216.167 cv
629 215.5 637.5 213.167 638.167 212.667 cv
638.833 212.167 636.833 150.167 636.833 149.667 cv
636.833 149.167 621.782 145.888 607.333 146.667 cv
cp
.501961 .45098 .92549 rgb
f
620.354 139.036 mo
619.432 148.458 li
619.432 148.458 617.468 151 611.912 150.909 cv
607.773 150.841 606.422 149.771 606.422 149.771 cv
607.461 145.055 li
608.48 140.457 li
618.647 139.241 li
620.354 139.036 li
cp
.976471 .533333 .458824 rgb
f
618.647 139.241 mo
618.599 139.496 618.471 139.791 618.285 140.124 cv
615.716 144.624 609.854 145.075 607.461 145.055 cv
608.48 140.457 li
618.647 139.241 li
cp
0 0 0 rgb
f
608.48 118.775 mo
608.48 118.775 602.38 130.105 603.688 136.859 cv
604.994 143.613 611.095 143.068 614.799 142.088 cv
618.503 141.107 620.354 139.038 620.354 139.038 cv
620.354 139.038 623.623 140.454 626.128 137.513 cv
628.634 134.571 627.545 130.867 625.692 129.887 cv
623.841 128.907 621.444 130.105 621.444 130.105 cv
623.514 126.837 li
623.514 126.837 617.413 108.862 608.48 118.775 cv
cp
.976471 .533333 .458824 rgb
f
611.666 273.819 mo
611.519 273.819 611.379 273.731 611.319 273.587 cv
605.496 259.443 603.728 243.36 603.534 241.445 cv
589.914 233.097 li
589.738 232.989 589.683 232.758 589.791 232.581 cv
589.898 232.404 590.129 232.349 590.307 232.458 cv
604.085 240.903 li
604.186 240.965 604.251 241.07 604.262 241.188 cv
604.277 241.359 605.885 258.419 612.013 273.302 cv
612.092 273.493 612 273.712 611.809 273.791 cv
611.762 273.811 611.714 273.819 611.666 273.819 cv
cp
1 .74902 .411765 rgb
f
609.444 330.708 mo
609.273 330.708 609.119 330.591 609.079 330.418 cv
608.981 329.997 599.358 287.971 605.966 256.257 cv
606.009 256.053 606.209 255.926 606.409 255.966 cv
606.612 256.008 606.742 256.207 606.7 256.409 cv
600.126 287.964 609.712 329.829 609.81 330.248 cv
609.856 330.449 609.731 330.651 609.529 330.698 cv
609.501 330.705 609.472 330.708 609.444 330.708 cv
cp
f
621.444 130.105 mo
621.444 130.105 616.896 128.852 615.548 124.93 cv
614.199 121.008 615.548 118.721 615.548 118.721 cv
615.548 118.721 613.873 117.359 611.177 118.067 cv
608.48 118.775 607.104 121.613 607.104 121.613 cv
607.104 121.613 600.978 115.943 603.504 111.858 cv
606.029 107.772 610.604 111.858 610.604 111.858 cv
610.604 111.858 610.278 107.609 616.978 108.917 cv
623.677 110.224 623.677 118.721 623.677 118.721 cv
623.677 118.721 626.292 116.27 628.253 121.989 cv
630.214 127.708 626.443 130.486 626.443 130.486 cv
626.443 130.486 624.767 129.396 621.444 130.105 cv
cp
0 0 0 rgb
f
621.39 135.6 mo
621.279 135.6 621.17 135.551 621.096 135.458 cv
620.967 135.295 620.994 135.06 621.157 134.931 cv
625.078 131.826 li
625.239 131.698 625.477 131.725 625.604 131.887 cv
625.733 132.05 625.706 132.286 625.543 132.414 cv
621.622 135.519 li
621.554 135.574 621.472 135.6 621.39 135.6 cv
cp
f
372.84 206.714 mo
372.84 206.714 370.184 193.272 374.077 194.984 cv
377.971 196.695 379.135 204.523 379.135 204.523 cv
372.84 206.714 li
cp
.988235 .639216 .592157 rgb
f
625.311 135.6 mo
625.247 135.6 625.183 135.584 625.123 135.55 cv
622.853 134.243 li
622.674 134.139 622.611 133.91 622.715 133.73 cv
622.818 133.551 623.048 133.491 623.228 133.592 cv
625.498 134.9 li
625.677 135.003 625.739 135.233 625.636 135.412 cv
625.566 135.533 625.439 135.6 625.311 135.6 cv
cp
0 0 0 rgb
f
577.667 148.497 mo
575.637 150.666 571.715 155.336 572.031 157.336 cv
572.08 157.645 572.231 157.856 572.508 158.001 cv
573.227 158.38 573.943 158.248 574.698 157.598 cv
576.633 155.928 578.125 151.159 577.667 148.497 cv
cp
573.304 158.962 mo
572.918 158.962 572.534 158.863 572.158 158.666 cv
571.676 158.411 571.375 157.992 571.29 157.453 cv
570.827 154.524 576.9 148.198 577.595 147.486 cv
577.686 147.393 577.817 147.354 577.944 147.382 cv
578.071 147.41 578.174 147.501 578.217 147.624 cv
579.175 150.354 577.504 156.167 575.188 158.166 cv
574.574 158.695 573.938 158.962 573.304 158.962 cv
cp
1 1 1 rgb
f
612.184 151.69 mo
607.822 151.69 605.08 150.307 604.956 150.243 cv
604.772 150.148 604.7 149.923 604.795 149.739 cv
604.89 149.554 605.114 149.48 605.299 149.576 cv
605.33 149.592 608.504 151.182 613.316 150.908 cv
618.067 150.64 620.02 147.715 620.039 147.686 cv
620.152 147.511 620.387 147.462 620.558 147.576 cv
620.731 147.688 620.781 147.921 620.668 148.094 cv
620.581 148.228 618.485 151.367 613.359 151.657 cv
612.955 151.679 612.563 151.69 612.184 151.69 cv
cp
f
589.833 181.875 mo
589.587 181.851 589.438 181.666 589.46 181.459 cv
590.293 173.793 li
590.315 173.588 590.489 173.431 590.706 173.46 cv
590.912 173.483 591.062 173.668 591.039 173.874 cv
590.206 181.541 li
590.185 181.732 590.022 181.875 589.833 181.875 cv
cp
f
611.124 302.333 mo
376.743 302.333 li
375.872 302.333 375.167 301.628 375.167 300.757 cv
375.167 195.909 li
375.167 195.039 375.872 194.333 376.743 194.333 cv
611.124 194.333 li
611.994 194.333 612.7 195.039 612.7 195.909 cv
612.7 300.757 li
612.7 301.628 611.994 302.333 611.124 302.333 cv
cp
f
620.588 189.688 mo
619.925 189.787 619.274 189.923 618.628 190.1 cv
615.181 191.042 603.771 194.229 602.424 195.5 cv
600.833 197 598.333 206.101 599 209.384 cv
599.667 212.667 601.801 212.833 601.801 212.833 cv
601.801 212.833 602.591 214.5 604.295 214.667 cv
606 214.833 607.5 213.833 607.5 213.833 cv
607.5 213.833 610.072 215.204 611.952 214.686 cv
613.833 214.167 615.333 210.833 614.833 209.833 cv
614.333 208.833 612.333 210.167 612.333 210.167 cv
613.167 207.167 li
613.167 207.167 617.833 207.667 620.333 206.167 cv
622.833 204.667 623 202.167 623 202.167 cv
626.833 202.167 li
626.333 188.833 li
620.588 189.688 li
cp
.976471 .533333 .458824 rgb
f
636.833 149.667 mo
636.833 149.667 670 161 669.333 187.333 cv
668.667 213.667 623.833 209.333 623.833 209.333 cv
623.833 185 li
636.833 149.667 li
cp
.501961 .45098 .92549 rgb
f
648.587 180.014 mo
648.259 180.014 647.894 180.056 647.501 180.142 cv
644.934 180.701 642.575 182.171 641.231 183.137 cv
643.948 182.908 646.237 182.717 647.392 182.626 cv
649.025 182.498 649.861 181.853 650.099 181.292 cv
650.221 181.001 650.188 180.719 650.003 180.497 cv
649.739 180.179 649.237 180.014 648.587 180.014 cv
cp
623.833 185.375 mo
623.64 185.375 623.477 185.228 623.459 185.032 cv
623.441 184.826 623.595 184.644 623.801 184.626 cv
623.933 184.615 632.827 183.849 639.838 183.255 cv
640.734 182.52 643.798 180.181 647.341 179.409 cv
648.812 179.087 649.992 179.31 650.58 180.018 cv
650.946 180.459 651.023 181.03 650.789 181.584 cv
650.371 182.573 649.123 183.243 647.45 183.374 cv
646.136 183.477 643.351 183.71 640.138 183.982 cv
640.098 184.016 640.075 184.035 640.073 184.038 cv
639.927 184.165 639.709 184.16 639.569 184.03 cv
632.615 184.62 623.994 185.362 623.865 185.374 cv
623.854 185.375 623.844 185.375 623.833 185.375 cv
cp
1 1 1 rgb
f
601.801 213.208 mo
601.629 213.208 601.475 213.09 601.435 212.916 cv
601.133 211.577 600.946 206.461 602.315 202.867 cv
602.389 202.673 602.608 202.577 602.8 202.649 cv
602.993 202.723 603.09 202.939 603.017 203.133 cv
601.703 206.582 601.878 211.474 602.167 212.75 cv
602.212 212.952 602.085 213.153 601.884 213.199 cv
601.855 213.205 601.828 213.208 601.801 213.208 cv
cp
0 0 0 rgb
f
606.833 214.042 mo
606.672 214.042 606.523 213.938 606.475 213.776 cv
606.425 213.615 605.296 209.763 607.141 203.56 cv
607.2 203.361 607.409 203.247 607.606 203.307 cv
607.806 203.366 607.919 203.574 607.859 203.773 cv
606.084 209.742 607.181 213.521 607.192 213.559 cv
607.252 213.757 607.14 213.966 606.941 214.025 cv
606.905 214.036 606.869 214.042 606.833 214.042 cv
cp
f
610.833 211.875 mo
610.766 211.875 610.697 211.856 610.636 211.818 cv
610.46 211.71 610.405 211.479 610.515 211.303 cv
612.682 207.803 li
612.789 207.627 613.021 207.573 613.197 207.682 cv
613.373 207.79 613.428 208.021 613.318 208.197 cv
611.151 211.697 li
611.081 211.812 610.958 211.875 610.833 211.875 cv
cp
f
613 208.375 mo
612.961 208.375 612.921 208.369 612.882 208.355 cv
610.882 207.688 li
610.685 207.623 610.579 207.411 610.645 207.215 cv
610.709 207.019 610.922 206.908 611.118 206.978 cv
613.118 207.645 li
613.315 207.71 613.421 207.922 613.355 208.118 cv
613.304 208.275 613.157 208.375 613 208.375 cv
cp
f
631.59 224.106 mo
625.146 224.106 623.546 218.721 623.527 218.657 cv
623.472 218.458 623.588 218.252 623.786 218.195 cv
623.988 218.137 624.192 218.256 624.249 218.453 cv
624.328 218.729 626.283 225.173 635.127 222.86 cv
635.326 222.804 635.532 222.928 635.584 223.128 cv
635.637 223.328 635.517 223.533 635.316 223.585 cv
633.924 223.95 632.687 224.106 631.59 224.106 cv
cp
1 .74902 .411765 rgb
f
672.333 306.931 mo
672.23 306.931 672.129 306.889 672.055 306.808 cv
671.732 306.451 639.653 270.633 630.188 223.741 cv
630.147 223.538 630.278 223.341 630.481 223.3 cv
630.688 223.251 630.883 223.39 630.923 223.593 cv
640.347 270.276 672.289 305.949 672.611 306.304 cv
672.75 306.457 672.738 306.694 672.585 306.834 cv
672.513 306.898 672.423 306.931 672.333 306.931 cv
cp
f
529.305 190.822 mo
529.305 190.822 528.381 184.045 525.3 186.201 cv
522.22 188.358 520.987 200.68 524.684 201.912 cv
528.381 203.144 529.305 190.822 529.305 190.822 cv
cp
.988235 .639216 .592157 rgb
f
534.93 191.438 mo
534.93 191.438 534.006 184.661 530.925 186.817 cv
527.845 188.974 526.612 201.296 530.31 202.527 cv
534.006 203.76 534.93 191.438 534.93 191.438 cv
cp
f
540.188 193.583 mo
540.188 193.583 540.403 187.534 537.392 188.95 cv
534.381 190.366 531.448 200.924 534.486 202.557 cv
537.523 204.188 540.188 193.583 540.188 193.583 cv
cp
f
447.735 190.377 mo
447.735 190.377 448.659 183.601 451.739 185.757 cv
454.82 187.913 456.052 200.235 452.355 201.467 cv
448.659 202.699 447.735 190.377 447.735 190.377 cv
cp
f
442.109 190.994 mo
442.109 190.994 443.034 184.217 446.114 186.373 cv
449.194 188.529 450.427 200.851 446.73 202.083 cv
443.034 203.315 442.109 190.994 442.109 190.994 cv
cp
f
436.852 193.139 mo
436.852 193.139 436.636 187.09 439.647 188.505 cv
442.659 189.921 445.591 200.48 442.553 202.112 cv
439.516 203.744 436.852 193.139 436.852 193.139 cv
cp
f
486.108 125.957 mo
486.108 125.957 492.516 123.092 493.103 128.082 cv
493.782 133.862 486.863 134.032 486.863 134.032 cv
486.108 125.957 li
cp
f
478.247 134.175 mo
478.139 134.175 478.033 134.129 477.958 134.04 cv
476.577 132.38 477.258 128.928 477.289 128.781 cv
477.33 128.579 477.522 128.447 477.73 128.488 cv
477.933 128.53 478.064 128.728 478.023 128.93 cv
478.017 128.962 477.384 132.177 478.535 133.561 cv
478.667 133.72 478.646 133.956 478.487 134.088 cv
478.417 134.147 478.331 134.175 478.247 134.175 cv
cp
0 0 0 rgb
f
489.137 131.451 mo
489.102 131.451 489.064 131.446 489.028 131.436 cv
488.83 131.375 488.718 131.167 488.777 130.968 cv
490.17 126.334 li
490.229 126.136 490.437 126.024 490.638 126.083 cv
490.836 126.143 490.948 126.352 490.889 126.55 cv
489.496 131.184 li
489.447 131.347 489.298 131.451 489.137 131.451 cv
cp
f
491.727 129.521 mo
491.688 129.52 489.864 129.332 489.864 129.332 cv
489.658 129.311 489.508 129.126 489.529 128.92 cv
489.55 128.714 489.739 128.563 489.94 128.586 cv
491.765 128.773 li
491.971 128.794 492.121 128.979 492.1 129.185 cv
492.08 129.378 491.917 129.521 491.727 129.521 cv
cp
f
469.747 132.596 mo
469.598 132.596 469.458 132.508 469.399 132.362 cv
467.583 127.877 li
467.504 127.685 467.597 127.466 467.79 127.389 cv
467.981 127.311 468.2 127.404 468.278 127.596 cv
470.094 132.081 li
470.172 132.272 470.08 132.491 469.887 132.569 cv
469.841 132.587 469.793 132.596 469.747 132.596 cv
cp
f
466.989 130.915 mo
466.813 130.915 466.656 130.791 466.621 130.612 cv
466.581 130.409 466.713 130.212 466.917 130.172 cv
468.716 129.816 li
468.924 129.773 469.117 129.909 469.156 130.111 cv
469.197 130.314 469.064 130.512 468.86 130.552 cv
467.061 130.907 li
467.037 130.912 467.012 130.915 466.989 130.915 cv
cp
f
470.581 125.923 mo
470.581 125.923 471.57 125.966 472.117 124.558 cv
472.664 123.149 472.661 122.425 472.661 122.425 cv
472.661 122.425 475.513 124.58 478.613 123.299 cv
481.713 122.019 482.605 120.468 482.605 120.468 cv
482.605 120.468 482.543 124.418 483.995 125.916 cv
485.446 127.413 487.93 125.419 487.93 125.419 cv
487.93 125.419 490.148 122.46 490.227 117.508 cv
490.305 112.557 485.446 109.645 483.067 110.197 cv
480.688 110.75 478.667 114.057 474.533 116.544 cv
470.399 119.031 467.419 117.869 465.584 120.912 cv
463.75 123.955 465.628 127.265 465.628 127.265 cv
465.628 127.265 467.339 125.16 470.581 125.923 cv
cp
f
469.14 124.9 mo
469.14 124.9 470.273 129.271 470.828 129.311 cv
471.382 129.351 471.452 124.51 471.452 124.51 cv
469.14 124.9 li
cp
f
485.127 124.883 mo
485.127 124.883 485.636 128.651 486.355 128.704 cv
487.076 128.755 488.223 124.438 488.223 124.438 cv
485.127 124.883 li
cp
f
541.193 356.65 mo
541.173 356.75 541.153 356.85 541.123 356.95 cv
540.673 358.86 539.604 361.42 538.783 362.24 cv
537.943 363.07 530.153 362.73 521.543 363.03 cv
513.833 363.29 488.503 362.5 487.863 361.56 cv
487.383 360.84 487.083 356.6 486.974 355.5 cv
486.934 355.14 486.913 354.92 486.913 354.92 cv
486.913 354.92 486.604 334.99 488.184 333.73 cv
489.764 332.46 507.783 332.78 509.373 333.73 cv
510.943 334.68 519.483 344.79 522.023 345.74 cv
524.554 346.69 537.193 349.22 540.043 352.07 cv
541.333 353.36 541.523 355.05 541.193 356.65 cv
cp
.117647 .129412 .262745 rgb
f
481.663 357.86 mo
481.663 360.12 481.003 362.71 479.663 363.35 cv
478.333 364 467.473 365.37 457.973 364.41 cv
448.893 363.49 447.003 362.71 446.333 361.74 cv
445.993 361.23 446.713 358.74 447.503 356.45 cv
447.873 355.35 448.263 354.29 448.553 353.53 cv
448.823 352.8 449.163 352.11 449.573 351.45 cv
450.563 349.86 452.503 346.6 453.003 344.93 cv
453.663 342.67 454.663 337.82 455.333 335.55 cv
456.003 333.29 458.663 332.32 458.663 332.32 cv
458.663 332.32 476.333 331.35 477.663 332.65 cv
479.003 333.94 479.663 344.61 479.663 346.22 cv
479.663 347.84 li
479.663 349.72 481.053 353.86 481.513 356.49 cv
481.604 357.02 481.663 357.48 481.663 357.86 cv
cp
f
483.246 125.296 mo
483.189 125.292 483.133 125.275 483.08 125.245 cv
481.882 124.531 479.996 124.472 479.976 124.472 cv
479.787 124.488 479.607 124.294 479.611 124.087 cv
479.617 123.88 479.79 123.717 479.997 123.723 cv
480.078 123.721 482.101 123.788 483.464 124.6 cv
483.642 124.706 483.7 124.936 483.594 125.114 cv
483.519 125.24 483.382 125.306 483.246 125.296 cv
cp
0 0 0 rgb
f
471.866 126.531 mo
471.767 126.525 471.67 126.48 471.602 126.398 cv
471.468 126.24 471.489 126.003 471.646 125.87 cv
472.86 124.849 474.842 124.46 474.926 124.445 cv
475.135 124.405 475.326 124.54 475.365 124.742 cv
475.403 124.945 475.27 125.142 475.067 125.181 cv
475.048 125.185 473.191 125.55 472.13 126.444 cv
472.053 126.508 471.958 126.537 471.866 126.531 cv
cp
f
637.813 209.708 mo
623.833 209.708 li
623.626 209.708 623.458 209.54 623.458 209.333 cv
623.458 209.126 623.626 208.958 623.833 208.958 cv
637.813 208.958 li
638.021 208.958 638.188 209.126 638.188 209.333 cv
638.188 209.54 638.021 209.708 637.813 209.708 cv
cp
1 1 1 rgb
f
484.991 323.598 mo
452.104 323.598 li
451.897 323.598 451.729 323.43 451.729 323.223 cv
451.729 323.016 451.897 322.848 452.104 322.848 cv
484.991 322.848 li
485.198 322.848 485.366 323.016 485.366 323.223 cv
485.366 323.43 485.198 323.598 484.991 323.598 cv
cp
f
514.113 323.695 mo
488.728 323.695 li
488.521 323.695 488.353 323.527 488.353 323.32 cv
488.353 323.113 488.521 322.945 488.728 322.945 cv
514.113 322.945 li
514.32 322.945 514.488 323.113 514.488 323.32 cv
514.488 323.527 514.32 323.695 514.113 323.695 cv
cp
f
479.281 149.264 mo
474.515 149.264 473.5 146.041 473.458 145.903 cv
473.4 145.705 473.512 145.498 473.709 145.438 cv
473.904 145.375 474.116 145.489 474.177 145.687 cv
474.212 145.803 475.096 148.514 479.281 148.514 cv
479.308 148.514 479.334 148.514 479.36 148.514 cv
484.991 148.468 485.732 144.799 485.739 144.762 cv
485.777 144.559 485.969 144.425 486.177 144.461 cv
486.38 144.499 486.515 144.694 486.478 144.898 cv
486.469 144.941 485.609 149.213 479.367 149.264 cv
479.338 149.264 479.309 149.264 479.281 149.264 cv
cp
.117647 .129412 .262745 rgb
f
492.792 166.125 mo
492.818 167.204 493.054 170.44 494.889 172.38 cv
495.828 173.374 497.069 173.894 498.577 173.927 cv
500.345 173.971 501.769 173.438 502.738 172.356 cv
504.486 170.404 504.402 167.157 504.325 166.125 cv
492.792 166.125 li
cp
498.764 174.679 mo
498.696 174.679 498.629 174.678 498.562 174.677 cv
496.844 174.639 495.424 174.039 494.342 172.893 cv
491.91 170.32 492.035 165.923 492.041 165.737 cv
492.048 165.535 492.214 165.375 492.416 165.375 cv
504.666 165.375 li
504.854 165.375 505.013 165.514 505.038 165.7 cv
505.063 165.885 505.618 170.261 503.299 172.854 cv
502.216 174.065 500.69 174.679 498.764 174.679 cv
cp
f
527.641 197.941 mo
527.62 197.941 527.599 197.94 527.578 197.936 cv
527.374 197.901 527.236 197.708 527.271 197.503 cv
528.471 190.437 li
528.505 190.233 528.699 190.09 528.903 190.13 cv
529.107 190.165 529.245 190.358 529.211 190.563 cv
528.011 197.629 li
527.979 197.812 527.82 197.941 527.641 197.941 cv
cp
0 0 0 rgb
f
533.738 199.431 mo
533.494 199.407 533.344 199.223 533.365 199.017 cv
534.093 191.964 li
534.113 191.759 534.299 191.604 534.504 191.63 cv
534.71 191.651 534.86 191.835 534.839 192.042 cv
534.111 199.094 li
534.092 199.287 533.929 199.431 533.738 199.431 cv
cp
f
449.01 197.131 mo
448.827 197.131 448.666 196.997 448.639 196.81 cv
447.568 189.36 li
447.539 189.155 447.68 188.965 447.885 188.936 cv
448.095 188.898 448.281 189.048 448.31 189.254 cv
449.381 196.703 li
449.41 196.908 449.269 197.098 449.064 197.127 cv
449.045 197.13 449.028 197.131 449.01 197.131 cv
cp
f
443.834 199.996 mo
443.66 199.996 443.503 199.874 443.467 199.696 cv
441.781 191.514 li
441.74 191.311 441.871 191.112 442.074 191.071 cv
442.28 191.025 442.475 191.16 442.516 191.362 cv
444.202 199.545 li
444.244 199.748 444.113 199.946 443.91 199.988 cv
443.884 199.993 443.859 199.996 443.834 199.996 cv
cp
f
481.663 357.86 mo
481.663 360.12 481.003 362.71 479.663 363.35 cv
478.333 364 467.473 365.37 457.973 364.41 cv
448.893 363.49 447.003 362.71 446.333 361.74 cv
445.993 361.23 446.713 358.74 447.503 356.45 cv
450.683 357.28 457.533 358.72 466.173 358.56 cv
474.343 358.4 479.213 357.23 481.513 356.49 cv
481.604 357.02 481.663 357.48 481.663 357.86 cv
cp
1 1 1 rgb
f
541.123 356.95 mo
540.673 358.86 539.604 361.42 538.783 362.24 cv
537.943 363.07 530.153 362.73 521.543 363.03 cv
513.833 363.29 488.503 362.5 487.863 361.56 cv
487.383 360.84 487.083 356.6 486.974 355.5 cv
486.974 355.5 505.923 357.5 523.554 357.08 cv
533.863 356.83 538.804 356.87 541.123 356.95 cv
cp
f
471 341 mo
470.919 341 470.838 340.975 470.77 340.921 cv
466.985 337.979 460.312 340.497 460.246 340.522 cv
460.054 340.601 459.836 340.502 459.761 340.308 cv
459.686 340.114 459.783 339.897 459.976 339.823 cv
460.265 339.712 467.11 337.124 471.231 340.329 cv
471.394 340.456 471.423 340.691 471.296 340.855 cv
471.222 340.95 471.112 341 471 341 cv
cp
f
471 345.168 mo
470.926 345.168 470.851 345.146 470.785 345.101 cv
466.186 341.892 460.314 344.274 460.255 344.299 cv
460.06 344.378 459.844 344.287 459.764 344.097 cv
459.685 343.905 459.776 343.686 459.966 343.605 cv
460.222 343.5 466.28 341.042 471.215 344.485 cv
471.385 344.604 471.426 344.838 471.308 345.008 cv
471.235 345.112 471.119 345.168 471 345.168 cv
cp
f
514.75 350.595 mo
514.711 350.595 514.671 350.589 514.632 350.575 cv
514.437 350.511 514.329 350.301 514.394 350.104 cv
514.44 349.961 515.609 346.584 521.953 345.372 cv
522.163 345.328 522.353 345.468 522.392 345.67 cv
522.431 345.873 522.297 346.069 522.094 346.108 cv
516.224 347.23 515.116 350.308 515.105 350.339 cv
515.053 350.495 514.906 350.595 514.75 350.595 cv
cp
f
514.048 343.819 mo
513.873 343.819 513.716 343.696 513.681 343.519 cv
513.64 343.315 513.771 343.118 513.974 343.077 cv
518.365 342.188 li
518.572 342.141 518.767 342.279 518.807 342.481 cv
518.848 342.685 518.717 342.882 518.514 342.923 cv
514.122 343.812 li
514.097 343.817 514.072 343.819 514.048 343.819 cv
cp
f
511.11 340.273 mo
510.926 340.273 510.766 340.138 510.739 339.951 cv
510.71 339.746 510.853 339.556 511.058 339.527 cv
514.919 338.983 li
515.146 338.954 515.314 339.099 515.343 339.302 cv
515.372 339.507 515.229 339.697 515.024 339.726 cv
511.163 340.27 li
511.145 340.272 511.127 340.273 511.11 340.273 cv
cp
f
476.287 350.596 mo
476.24 350.596 476.192 350.587 476.145 350.568 cv
462.825 345.138 453.424 350.489 453.331 350.544 cv
453.153 350.648 452.922 350.589 452.819 350.41 cv
452.713 350.231 452.774 350.002 452.952 349.897 cv
453.049 349.84 462.768 344.307 476.428 349.873 cv
476.62 349.951 476.712 350.171 476.634 350.362 cv
476.575 350.508 476.434 350.596 476.287 350.596 cv
cp
f
481.759 134.428 mo
481.812 134.434 481.863 134.451 481.91 134.48 cv
482.086 134.588 482.143 134.818 482.035 134.995 cv
481.994 135.064 480.987 136.687 479.323 136.489 cv
479.117 136.465 478.97 136.278 478.995 136.073 cv
479.019 135.867 479.206 135.72 479.411 135.745 cv
480.593 135.885 481.388 134.617 481.395 134.604 cv
481.474 134.476 481.619 134.411 481.759 134.428 cv
cp
0 0 0 rgb
f
607.846 134.011 mo
607.639 134.011 607.471 133.843 607.471 133.636 cv
607.471 129.469 609.272 127.129 609.349 127.032 cv
609.478 126.87 609.712 126.841 609.874 126.968 cv
610.037 127.096 610.066 127.332 609.938 127.495 cv
609.922 127.517 608.221 129.745 608.221 133.636 cv
608.221 133.843 608.053 134.011 607.846 134.011 cv
cp
f
610.449 137.225 mo
610.087 137.225 609.769 137.171 609.533 137.1 cv
609.336 137.039 609.226 136.83 609.285 136.632 cv
609.347 136.434 609.557 136.324 609.753 136.382 cv
609.829 136.404 611.632 136.921 612.764 135.226 cv
612.879 135.053 613.114 135.008 613.283 135.122 cv
613.456 135.237 613.502 135.47 613.387 135.642 cv
612.559 136.884 611.364 137.225 610.449 137.225 cv
cp
f
615.73 128.946 mo
615.608 128.946 615.489 128.886 615.417 128.776 cv
615.1 128.293 614.775 128.047 614.453 128.046 cv
613.978 128.046 613.523 128.574 613.388 128.777 cv
613.273 128.95 613.041 128.996 612.869 128.883 cv
612.696 128.77 612.648 128.538 612.762 128.365 cv
612.79 128.321 613.474 127.296 614.451 127.296 cv
615.043 127.296 615.578 127.656 616.044 128.364 cv
616.157 128.538 616.109 128.771 615.937 128.884 cv
615.873 128.925 615.802 128.946 615.73 128.946 cv
cp
f
607.683 128.437 mo
607.477 128.437 607.309 128.27 607.308 128.063 cv
607.307 127.77 607.204 127.115 606.896 126.961 cv
606.669 126.847 606.257 126.992 605.744 127.374 cv
605.579 127.499 605.344 127.464 605.22 127.296 cv
605.096 127.13 605.131 126.896 605.297 126.772 cv
606.07 126.196 606.72 126.033 607.234 126.292 cv
608.034 126.694 608.058 127.924 608.058 128.063 cv
608.058 128.27 607.891 128.437 607.684 128.437 cv
607.683 128.437 li
cp
f
615.73 125.514 mo
615.646 125.514 615.561 125.486 615.49 125.427 cv
613.33 123.629 li
613.171 123.497 613.149 123.261 613.282 123.102 cv
613.415 122.941 613.65 122.92 613.811 123.054 cv
615.971 124.851 li
616.13 124.983 616.151 125.22 616.019 125.379 cv
615.944 125.468 615.838 125.514 615.73 125.514 cv
cp
f
606.259 124.616 mo
606.123 124.616 605.991 124.541 605.925 124.411 cv
605.831 124.226 605.904 124 606.089 123.907 cv
608.493 122.681 li
608.673 122.586 608.902 122.659 608.997 122.845 cv
609.091 123.029 609.018 123.255 608.833 123.349 cv
606.429 124.575 li
606.375 124.603 606.316 124.616 606.259 124.616 cv
cp
f
370.946 210.813 mo
370.946 210.813 364.172 207.648 367.423 205.133 cv
370.673 202.618 383.935 205.332 384.021 209.59 cv
384.107 213.849 370.946 210.813 370.946 210.813 cv
cp
.988235 .639216 .592157 rgb
f
369.763 216.885 mo
369.763 216.885 362.989 213.721 366.24 211.205 cv
369.491 208.689 382.752 211.403 382.838 215.662 cv
382.924 219.92 369.763 216.885 369.763 216.885 cv
cp
f
372.277 223.115 mo
370.573 223.113 368.873 222.738 367.41 221.864 cv
366.121 221.095 365.139 219.989 366.366 218.647 cv
368.822 215.964 380.795 216.331 381.512 220.031 cv
382.043 222.771 375.638 223.119 372.277 223.115 cv
cp
f
378.628 218.526 mo
378.583 218.523 369.455 217.431 369.455 217.431 cv
369.25 217.406 369.103 217.22 369.127 217.014 cv
369.152 216.809 369.331 216.662 369.544 216.687 cv
378.673 217.779 li
378.878 217.804 379.025 217.99 379 218.196 cv
378.978 218.387 378.816 218.526 378.628 218.526 cv
cp
0 0 0 rgb
f
378.137 211.798 mo
378.113 211.798 378.088 211.796 378.064 211.791 cv
369.64 210.104 li
369.437 210.063 369.305 209.865 369.345 209.662 cv
369.386 209.459 369.589 209.329 369.787 209.367 cv
378.21 211.055 li
378.414 211.096 378.545 211.293 378.505 211.496 cv
378.469 211.675 378.313 211.798 378.137 211.798 cv
cp
f
386.939 176.483 mo
386.764 176.483 386.608 176.36 386.572 176.181 cv
385.116 168.887 li
385.076 168.684 385.208 168.487 385.41 168.446 cv
385.61 168.407 385.811 168.537 385.852 168.741 cv
387.308 176.035 li
387.348 176.238 387.216 176.435 387.013 176.476 cv
386.989 176.48 386.964 176.483 386.939 176.483 cv
cp
1 1 1 rgb
f
330.618 192.792 mo
330.418 192.792 330.252 192.634 330.244 192.432 cv
330.235 192.225 330.396 192.051 330.604 192.042 cv
356.78 190.975 li
356.872 184.943 li
356.875 184.738 357.042 184.574 357.247 184.574 cv
357.459 184.578 357.625 184.748 357.622 184.955 cv
357.525 191.341 li
357.522 191.54 357.364 191.702 357.165 191.71 cv
330.634 192.792 li
330.629 192.792 330.624 192.792 330.618 192.792 cv
cp
f
865.841 117.719 mo
864.686 120.957 861.678 124.891 861.678 124.891 cv
857.004 126.629 li
849.884 129.284 li
849.884 129.284 845.023 117.719 844.565 109.86 cv
844.097 101.991 845.721 99.2119 846.876 98.9829 cv
848.031 98.7539 849.416 103.615 849.416 103.615 cv
849.416 103.615 849.187 96.2036 851.737 95.7456 cv
854.276 95.2876 855.203 101.762 855.203 101.762 cv
855.203 101.762 856.13 96.4429 858.211 97.3696 cv
860.221 98.2544 860.938 109.496 860.99 110.277 cv
860.99 110.318 860.99 110.297 861.012 110.266 cv
861.043 110.121 861.146 109.767 861.303 109.298 cv
861.844 107.591 863.031 104.489 864.228 105 cv
865.841 105.697 866.997 114.482 865.841 117.719 cv
cp
.976471 .533333 .458824 rgb
f
860.265 108.405 mo
860.401 108.309 860.466 108.132 860.41 107.965 cv
860.344 107.76 860.123 107.648 859.919 107.715 cv
848.651 111.398 li
848.444 111.466 848.334 111.686 848.401 111.89 cv
848.469 112.096 848.688 112.207 848.894 112.14 cv
860.161 108.457 li
860.198 108.445 860.233 108.427 860.265 108.405 cv
cp
0 0 0 rgb
f
767.128 320.805 mo
767.256 336.218 li
788.633 335.709 li
788.548 316.681 li
767.128 320.805 li
cp
.988235 .639216 .592157 rgb
f
822 350.544 mo
822.031 357.3 li
786.616 357.463 li
786.616 357.463 783.296 353.839 780.104 352.945 cv
776.913 352.053 776.026 357.512 776.026 357.512 cv
764.285 357.565 li
764.074 350.447 li
764.015 348.473 li
764.938 347.95 li
764.938 347.95 765.747 333.88 766.531 333.486 cv
767.315 333.094 769.335 334.415 775.825 334.257 cv
781.096 334.127 785.511 329.44 788.594 326.913 cv
789.179 326.431 790.003 326.606 790.399 327.298 cv
791.367 328.992 794.608 330.984 798.007 333.252 cv
803.031 336.604 813.64 340.712 817.751 343.292 cv
821.308 345.521 821.29 349.226 821.227 350.185 cv
821.214 350.337 821.2 350.419 821.2 350.419 cv
822 350.544 li
cp
0 0 0 rgb
f
822 350.544 mo
822.031 357.3 li
786.616 357.463 li
786.616 357.463 783.296 353.839 780.104 352.945 cv
776.913 352.053 776.026 357.512 776.026 357.512 cv
764.285 357.565 li
764.074 350.447 li
821.227 350.185 li
821.214 350.337 821.2 350.419 821.2 350.419 cv
822 350.544 li
cp
.435294 .372549 .807843 rgb
f
778.981 216.445 mo
778.981 216.445 782.185 225.364 790.517 270.685 cv
797.579 309.1 798.079 325.721 798.079 325.721 cv
798.079 325.721 769.333 328.063 765.652 326.448 cv
761.971 324.833 761.466 213.339 761.466 213.339 cv
778.981 216.445 li
cp
f
735.303 321.676 mo
734.588 337.072 li
755.961 337.733 li
756.916 318.729 li
735.303 321.676 li
cp
.988235 .639216 .592157 rgb
f
794.1 118.238 mo
795.256 121.476 798.264 125.41 798.264 125.41 cv
802.938 127.148 li
810.058 129.803 li
810.058 129.803 814.918 118.238 815.376 110.379 cv
815.845 102.51 814.221 99.731 813.065 99.502 cv
811.91 99.2729 810.525 104.134 810.525 104.134 cv
810.525 104.134 810.755 96.7227 808.204 96.2646 cv
805.665 95.8066 804.738 102.281 804.738 102.281 cv
804.738 102.281 803.812 96.9619 801.729 97.8882 cv
799.721 98.7734 799.003 110.015 798.95 110.796 cv
798.95 110.837 798.95 110.816 798.93 110.785 cv
798.898 110.64 798.795 110.286 798.639 109.817 cv
798.098 108.11 796.91 105.008 795.714 105.518 cv
794.1 106.216 792.944 115.001 794.1 118.238 cv
cp
f
811.908 113.078 mo
812.075 113.078 812.23 112.97 812.281 112.802 cv
812.345 112.595 812.229 112.377 812.022 112.314 cv
800.688 108.845 li
800.48 108.781 800.263 108.897 800.2 109.103 cv
800.137 109.31 800.254 109.528 800.459 109.591 cv
811.794 113.061 li
811.832 113.072 811.871 113.078 811.908 113.078 cv
cp
0 0 0 rgb
f
754.621 108.827 mo
902.619 108.827 li
903.52 108.827 904.249 108.097 904.249 107.197 cv
904.249 30.0669 li
904.249 29.1665 903.52 28.437 902.619 28.437 cv
754.621 28.437 li
753.722 28.437 752.991 29.1665 752.991 30.0669 cv
752.991 107.197 li
752.991 108.097 753.722 108.827 754.621 108.827 cv
cp
1 1 1 rgb
f
794.1 118.238 mo
795.256 121.476 798.264 125.41 798.264 125.41 cv
802.938 127.148 li
804.54 127.18 li
804.54 127.18 806.403 119.935 803.322 115.709 cv
801.022 112.534 799.544 111.243 798.95 110.796 cv
798.742 110.65 798.648 110.598 798.648 110.598 cv
798.639 109.817 li
798.098 108.11 797.015 105.553 795.714 105.518 cv
793.633 105.462 792.944 115.001 794.1 118.238 cv
cp
.988235 .639216 .592157 rgb
f
771.048 259.933 mo
768.863 211.53 li
737.604 211.082 li
737.604 211.082 733.682 223.519 732.526 235.553 cv
731.372 247.588 728.027 324.05 728.444 325.109 cv
728.861 326.169 763.516 327.7 765.652 326.448 cv
767.788 325.197 771.048 259.933 771.048 259.933 cv
cp
.501961 .45098 .92549 rgb
f
736.823 325.694 mo
736.059 325.667 li
736.08 325.072 738.185 266.012 739.994 248.88 cv
741.805 231.756 743.352 220.05 743.367 219.935 cv
744.125 220.034 li
744.108 220.15 742.563 231.846 740.755 248.959 cv
738.947 266.065 736.844 325.1 736.823 325.694 cv
cp
1 1 1 rgb
f
768.769 158.719 mo
768.769 158.719 778.6 153.861 783.688 148.31 cv
788.777 142.758 791.09 120.552 791.09 120.552 cv
814.684 129.342 li
814.684 129.342 814.684 159.413 803.581 174.679 cv
792.478 189.946 774.898 193.647 774.898 193.647 cv
768.769 158.719 li
cp
.117647 .129412 .262745 rgb
f
770.913 159.419 mo
770.913 159.419 772.65 152.818 763.38 149.451 cv
753.397 145.827 737.953 145.827 732.867 153.438 cv
728.325 160.237 735.881 163.95 735.881 163.95 cv
735.881 163.95 733.621 205.634 733.621 210.709 cv
733.621 215.783 735.128 217.232 737.199 217.414 cv
739.271 217.596 746.806 220.313 760.555 219.951 cv
774.304 219.589 779.389 216.508 780.52 215.421 cv
781.649 214.333 780.896 209.621 780.331 209.439 cv
779.766 209.259 779.766 208.534 779.766 208.534 cv
779.766 208.534 782.214 189.142 770.913 159.419 cv
cp
f
779.245 191.627 mo
779.498 191.604 779.655 191.414 779.634 191.199 cv
778.985 184.503 775.628 171.939 775.594 171.813 cv
775.538 171.606 775.324 171.482 775.115 171.538 cv
774.907 171.593 774.784 171.808 774.84 172.016 cv
774.873 172.141 778.214 184.643 778.857 191.274 cv
778.877 191.476 779.047 191.627 779.245 191.627 cv
cp
.968627 .45098 .309804 rgb
f
747.575 145.76 mo
748.632 154.389 li
748.632 154.389 750.602 156.688 756.055 156.509 cv
760.117 156.375 761.428 155.371 761.428 155.371 cv
760.331 151.062 li
759.257 146.86 li
749.254 145.92 li
747.575 145.76 li
cp
.988235 .639216 .592157 rgb
f
749.254 145.933 mo
749.307 146.183 749.437 146.469 749.625 146.793 cv
752.225 151.168 758.107 151.475 760.456 151.415 cv
759.376 146.917 li
749.254 145.933 li
cp
0 0 0 rgb
f
758.885 125.663 mo
758.885 125.663 765.069 136.683 763.902 143.336 cv
762.735 149.991 756.735 149.561 753.082 148.662 cv
749.429 147.763 747.574 145.763 747.574 145.763 cv
747.574 145.763 744.39 147.209 741.879 144.364 cv
739.368 141.52 740.374 137.864 742.176 136.87 cv
743.978 135.875 746.352 137.01 746.352 137.01 cv
744.263 133.837 li
744.263 133.837 749.943 116.083 758.885 125.663 cv
cp
.988235 .639216 .592157 rgb
f
760.065 140.081 mo
760.288 140.076 760.46 139.899 760.456 139.684 cv
760.384 135.558 758.42 133.61 758.336 133.528 cv
758.183 133.379 757.937 133.381 757.785 133.537 cv
757.636 133.691 757.639 133.938 757.792 134.088 cv
757.811 134.106 759.609 135.916 759.675 139.697 cv
759.679 139.91 759.854 140.081 760.065 140.081 cv
cp
0 0 0 rgb
f
746.492 142.427 mo
746.61 142.427 746.726 142.374 746.803 142.273 cv
746.934 142.103 746.9 141.857 746.729 141.727 cv
742.825 138.746 li
742.653 138.614 742.409 138.649 742.278 138.819 cv
742.147 138.99 742.181 139.235 742.352 139.366 cv
746.256 142.347 li
746.326 142.401 746.41 142.427 746.492 142.427 cv
cp
f
742.643 142.495 mo
742.711 142.495 742.78 142.477 742.843 142.439 cv
745.05 141.116 li
745.234 141.005 745.295 140.766 745.184 140.581 cv
745.074 140.396 744.834 140.335 744.648 140.446 cv
742.441 141.77 li
742.257 141.88 742.196 142.12 742.308 142.305 cv
742.381 142.427 742.51 142.495 742.643 142.495 cv
cp
f
755.656 136.263 mo
755.685 136.263 755.713 136.26 755.741 136.254 cv
755.952 136.207 756.085 135.999 756.038 135.788 cv
755.601 133.806 li
755.554 133.596 755.346 133.462 755.135 133.509 cv
754.925 133.556 754.792 133.764 754.838 133.975 cv
755.276 135.957 li
755.316 136.139 755.478 136.263 755.656 136.263 cv
cp
f
761.248 135.667 mo
761.279 135.667 761.312 135.664 761.344 135.656 cv
761.553 135.604 761.68 135.391 761.627 135.182 cv
761.133 133.214 li
761.079 133.004 760.869 132.876 760.659 132.93 cv
760.45 132.982 760.323 133.195 760.375 133.404 cv
760.87 135.373 li
760.914 135.55 761.073 135.667 761.248 135.667 cv
cp
f
753.563 132.804 mo
753.721 132.762 753.841 132.623 753.852 132.451 cv
753.911 131.468 755.299 131.371 755.312 131.369 cv
755.528 131.358 755.689 131.17 755.677 130.956 cv
755.663 130.74 755.478 130.576 755.263 130.59 cv
754.54 130.634 753.153 131.071 753.072 132.403 cv
753.06 132.618 753.223 132.804 753.438 132.817 cv
753.481 132.819 753.523 132.815 753.563 132.804 cv
cp
f
761.273 131.556 mo
761.341 131.554 761.409 131.534 761.471 131.495 cv
761.652 131.379 761.706 131.138 761.59 130.956 cv
760.816 129.742 759.499 129.874 758.909 130.113 cv
758.71 130.194 758.613 130.422 758.694 130.622 cv
758.775 130.821 759.002 130.918 759.201 130.837 cv
759.315 130.792 760.328 130.429 760.932 131.376 cv
761.009 131.496 761.141 131.56 761.273 131.556 cv
cp
f
754.602 156.521 mo
756.673 156.521 758.899 156.35 761.182 155.944 cv
761.395 155.906 761.535 155.704 761.498 155.492 cv
761.46 155.279 761.25 155.141 761.046 155.175 cv
751.184 156.931 743.883 154.213 743.703 153.282 cv
743.578 152.634 745.772 151.179 747.901 150.226 cv
748.098 150.138 748.186 149.906 748.098 149.709 cv
748.01 149.512 747.778 149.424 747.582 149.513 cv
746.415 150.035 742.634 151.861 742.937 153.43 cv
743.212 154.854 748.145 156.521 754.602 156.521 cv
cp
.968627 .45098 .309804 rgb
f
765.722 166.399 mo
765.766 166.399 765.81 166.392 765.853 166.376 cv
766.056 166.304 766.162 166.081 766.089 165.878 cv
763.645 159.019 li
763.571 158.815 763.347 158.708 763.146 158.782 cv
762.943 158.854 762.837 159.078 762.91 159.281 cv
765.354 166.14 li
765.411 166.3 765.561 166.399 765.722 166.399 cv
cp
f
749.254 166.399 mo
749.47 166.399 749.645 166.224 749.645 166.009 cv
749.645 159.149 li
749.645 158.934 749.47 158.759 749.254 158.759 cv
749.039 158.759 748.864 158.934 748.864 159.149 cv
748.864 166.009 li
748.864 166.224 749.039 166.399 749.254 166.399 cv
cp
f
790.061 152.199 mo
790.372 152.257 790.63 152.194 790.866 151.997 cv
791.115 151.789 791.125 151.616 791.105 151.489 cv
790.941 150.403 788.059 148.736 785.724 147.653 cv
786.801 149.379 788.663 151.935 790.061 152.199 cv
cp
789.915 152.966 mo
787.52 152.512 784.739 147.559 784.43 146.995 cv
784.351 146.851 784.371 146.67 784.481 146.547 cv
784.592 146.423 784.769 146.384 784.922 146.447 cv
785.6 146.729 791.558 149.259 791.878 151.371 cv
791.927 151.695 791.878 152.17 791.366 152.596 cv
791.046 152.863 790.671 153 790.269 153 cv
790.153 153 790.034 152.989 789.915 152.966 cv
cp
f
804.275 123.024 mo
804.474 123.024 804.644 122.874 804.663 122.671 cv
805.37 115.37 799.445 110.722 799.192 110.527 cv
799.022 110.396 798.777 110.428 798.646 110.599 cv
798.515 110.769 798.546 111.014 798.717 111.146 cv
798.775 111.191 804.551 115.732 803.887 122.596 cv
803.865 122.811 804.022 123.002 804.237 123.022 cv
804.25 123.024 804.263 123.024 804.275 123.024 cv
cp
0 0 0 rgb
f
746.352 137.01 mo
746.352 137.01 752.514 134.283 754.357 129.803 cv
756.201 125.322 755.911 124.261 755.911 124.261 cv
760.338 128.538 li
760.338 128.538 758.915 121.063 752.805 121.495 cv
746.694 121.927 742.789 127.718 742.252 131.331 cv
741.714 134.943 746.352 137.01 746.352 137.01 cv
cp
f
741.178 137.818 mo
741.178 137.818 736.168 133.272 739.677 126.411 cv
743.186 119.55 749.636 119.316 752.805 119.66 cv
755.974 120.002 758.378 122.809 758.378 122.809 cv
758.378 122.809 761.093 122.053 763.173 121.927 cv
765.306 121.797 766.807 122.332 766.19 122.494 cv
749.254 126.948 746.352 137.01 746.352 137.01 cv
746.352 137.01 742.678 136.052 741.178 137.818 cv
cp
.501961 .45098 .92549 rgb
f
788.415 355.389 mo
788.076 362.137 li
752.706 360.362 li
752.706 360.362 749.589 356.562 746.451 355.495 cv
743.313 354.429 742.129 359.832 742.129 359.832 cv
730.402 359.243 li
730.581 352.124 li
730.629 350.148 li
731.58 349.678 li
731.58 349.678 733.157 335.673 733.962 335.323 cv
734.767 334.974 736.711 336.403 743.2 336.601 cv
748.47 336.759 753.134 332.321 756.352 329.966 cv
756.962 329.517 757.775 329.737 758.133 330.449 cv
759.007 332.194 762.134 334.36 765.404 336.811 cv
770.236 340.432 780.605 345.114 784.569 347.916 cv
787.998 350.335 787.778 354.034 787.662 354.988 cv
787.641 355.139 787.623 355.22 787.623 355.22 cv
788.415 355.389 li
cp
0 0 0 rgb
f
788.415 355.389 mo
788.076 362.137 li
752.706 360.362 li
752.706 360.362 749.589 356.562 746.451 355.495 cv
743.313 354.429 742.129 359.832 742.129 359.832 cv
730.402 359.243 li
730.581 352.124 li
787.662 354.988 li
787.641 355.139 787.623 355.22 787.623 355.22 cv
788.415 355.389 li
cp
.501961 .45098 .92549 rgb
f
786.42 350.492 mo
786.385 350.423 782.778 343.503 769.519 340.843 cv
769.67 340.094 li
783.329 342.835 786.956 349.854 787.104 350.152 cv
786.42 350.492 li
cp
1 1 1 rgb
f
768.574 308.716 mo
767.818 308.608 li
770.33 291.051 770.664 234.006 770.666 233.432 cv
770.668 233.281 li
778.341 225.103 li
778.898 225.626 li
771.43 233.586 li
771.409 236.87 771.03 291.552 768.574 308.716 cv
cp
f
773.028 327.057 mo
769.214 290.682 li
769.975 290.602 li
773.788 326.977 li
773.028 327.057 li
cp
f
910.689 125.955 mo
910.689 125.955 917.56 120.861 926.123 125.152 cv
934.687 129.444 932.429 138.175 932.429 138.175 cv
932.429 138.175 939.337 146.123 936.618 154.424 cv
933.898 162.725 920.367 165.626 913.924 156.667 cv
907.48 147.708 916.743 139.084 916.743 139.084 cv
916.743 139.084 908.943 139.373 910.689 125.955 cv
cp
0 0 0 rgb
f
900.76 270.674 mo
871.779 335.191 li
857.283 328.846 li
875.344 265.019 li
900.76 270.674 li
cp
.976471 .533333 .458824 rgb
f
932.413 268.413 mo
928.016 338.747 li
912.472 337.689 li
907.05 271.694 li
932.413 268.413 li
cp
f
887.433 206.57 mo
887.433 206.57 867.951 266.372 868.223 268.198 cv
868.494 270.024 900.978 274.952 900.978 274.952 cv
904.839 259.147 li
904.839 218.031 li
887.433 206.57 li
cp
.117647 .129412 .262745 rgb
f
922.951 200.53 mo
922.951 200.53 930.088 214.989 931.617 226.238 cv
933.146 237.486 938.498 271.384 938.498 272.658 cv
938.498 273.933 923.716 274.952 917.599 274.952 cv
911.482 274.952 904.839 274.952 904.839 274.952 cv
904.839 274.952 901.29 229.33 900.651 228.311 cv
900.013 227.291 885.992 216.489 885.992 216.489 cv
892.977 206.297 li
922.951 200.53 li
cp
f
902.403 154.911 mo
902.403 154.911 880.443 152.514 872.48 140.699 cv
864.518 128.884 861.377 122.826 861.377 122.826 cv
849.884 129.284 li
849.884 129.284 853.965 169.949 882.789 178.405 cv
898.477 183.007 902.403 154.911 902.403 154.911 cv
cp
.976471 .533333 .458824 rgb
f
891.543 134.037 mo
891.543 134.037 888.125 124.819 888.438 122.438 cv
888.75 120.057 898.534 116.586 906.568 119.924 cv
914.602 123.263 915.569 133.598 913.975 137.958 cv
909.868 149.183 900.147 144.508 900.147 144.508 cv
900.147 144.508 884.804 140.534 891.543 134.037 cv
cp
0 0 0 rgb
f
920.657 203.943 mo
920.657 203.943 917.313 155.533 914.562 152.825 cv
911.809 150.116 893.885 149.029 885.993 157.283 cv
878.101 165.536 882.505 209.605 882.505 209.605 cv
920.657 203.943 li
cp
1 .74902 .411765 rgb
f
893.438 146.455 mo
893.44 146.668 li
893.623 150.705 li
893.754 153.869 li
893.754 153.869 893.484 154.605 897.168 154.364 cv
902.104 154.021 903.695 151.899 903.695 151.899 cv
903.899 144.48 li
902.403 144.767 li
893.438 146.455 li
cp
.976471 .533333 .458824 rgb
f
893.44 146.668 mo
893.623 150.705 li
896.022 150.412 900.388 149.37 902.149 145.595 cv
902.285 145.288 902.374 145.012 902.403 144.782 cv
893.455 146.607 li
893.44 146.668 li
cp
0 0 0 rgb
f
891.861 127.353 mo
891.861 127.353 887.277 137.865 888.936 143.768 cv
890.595 149.67 895.973 148.737 899.19 147.594 cv
902.408 146.45 903.9 144.475 903.9 144.475 cv
903.9 144.475 906.907 145.492 908.916 142.695 cv
910.925 139.898 909.685 136.689 907.967 135.955 cv
906.25 135.22 904.21 136.461 904.21 136.461 cv
905.808 133.406 li
905.808 133.406 899.065 117.89 891.861 127.353 cv
cp
.976471 .533333 .458824 rgb
f
892.354 140.746 mo
892.194 140.746 892.047 140.644 891.996 140.484 cv
891.277 138.224 892.854 135.911 892.922 135.813 cv
893.04 135.644 893.274 135.6 893.443 135.719 cv
893.614 135.836 893.656 136.07 893.539 136.24 cv
893.524 136.261 892.105 138.352 892.711 140.257 cv
892.773 140.455 892.664 140.665 892.467 140.728 cv
892.43 140.74 892.391 140.746 892.354 140.746 cv
cp
0 0 0 rgb
f
904.69 141.426 mo
904.599 141.426 904.507 141.393 904.436 141.326 cv
904.283 141.185 904.274 140.948 904.416 140.796 cv
907.248 137.75 li
907.388 137.598 907.628 137.589 907.777 137.731 cv
907.93 137.872 907.938 138.109 907.797 138.261 cv
904.965 141.307 li
904.892 141.386 904.791 141.426 904.69 141.426 cv
cp
f
907.706 140.593 mo
907.688 140.593 907.671 140.592 907.652 140.589 cv
905.676 140.305 li
905.471 140.276 905.329 140.086 905.358 139.881 cv
905.388 139.676 905.568 139.529 905.783 139.563 cv
907.76 139.847 li
907.965 139.876 908.106 140.066 908.077 140.271 cv
908.051 140.458 907.89 140.593 907.706 140.593 cv
cp
f
894.736 142.902 mo
895.136 143.137 895.705 143.344 896.249 143.066 cv
896.76 142.806 897.11 142.384 897.337 142.016 cv
894.736 142.902 li
cp
895.688 143.953 mo
894.604 143.953 893.727 143.085 893.681 143.039 cv
893.589 142.947 893.552 142.814 893.581 142.689 cv
893.61 142.563 893.703 142.461 893.825 142.419 cv
897.924 141.023 li
898.058 140.979 898.201 141.01 898.304 141.106 cv
898.404 141.203 898.443 141.347 898.405 141.481 cv
898.388 141.544 897.947 143.042 896.589 143.734 cv
896.282 143.891 895.978 143.953 895.688 143.953 cv
cp
f
898.882 133.023 mo
898.747 133.023 898.616 132.95 898.55 132.822 cv
898.076 131.919 896.797 132.194 896.785 132.198 cv
896.579 132.246 896.382 132.115 896.337 131.914 cv
896.292 131.712 896.419 131.511 896.621 131.466 cv
896.696 131.448 898.478 131.067 899.214 132.475 cv
899.311 132.658 899.239 132.885 899.056 132.98 cv
899 133.01 898.94 133.023 898.882 133.023 cv
cp
f
890.778 131.874 mo
890.676 131.874 890.573 131.832 890.499 131.749 cv
890.361 131.594 890.374 131.358 890.527 131.22 cv
890.564 131.188 891.421 130.429 892.355 130.532 cv
892.816 130.585 893.203 130.833 893.505 131.267 cv
893.623 131.437 893.581 131.671 893.411 131.789 cv
893.242 131.906 893.008 131.866 892.89 131.695 cv
892.714 131.442 892.512 131.306 892.271 131.277 cv
891.783 131.221 891.208 131.619 891.028 131.779 cv
890.957 131.842 890.867 131.874 890.778 131.874 cv
cp
f
891.27 136.367 mo
891.253 136.367 891.235 136.366 891.218 136.363 cv
891.013 136.334 890.869 136.145 890.898 135.94 cv
891.147 134.147 li
890.5 133.358 li
890.369 133.198 890.392 132.962 890.552 132.831 cv
890.712 132.7 890.948 132.722 891.08 132.883 cv
891.832 133.799 li
891.898 133.879 891.928 133.985 891.913 134.088 cv
891.641 136.043 li
891.615 136.231 891.454 136.367 891.27 136.367 cv
cp
f
897.086 136.791 mo
896.836 136.763 896.689 136.577 896.714 136.371 cv
896.926 134.595 li
895.96 133.658 li
895.811 133.514 895.808 133.276 895.951 133.127 cv
896.097 132.979 896.334 132.975 896.481 133.12 cv
897.581 134.187 li
897.665 134.268 897.707 134.384 897.692 134.5 cv
897.458 136.46 li
897.436 136.65 897.273 136.791 897.086 136.791 cv
cp
f
904.21 136.461 mo
904.21 136.461 899.606 134.144 897.923 130.854 cv
896.239 127.563 896.165 125.907 896.165 125.907 cv
896.165 125.907 895.51 128.078 893.842 128.6 cv
892.173 129.122 891.134 129.188 891.134 129.188 cv
890.09 132.275 li
890.729 124.928 li
890.729 124.928 895.244 122.473 895.851 122.468 cv
896.457 122.463 904.119 123.779 904.565 124.236 cv
905.012 124.694 907.468 130.62 907.468 130.62 cv
907.654 133.303 li
904.21 136.461 li
cp
f
914.562 152.825 mo
914.562 152.825 937.671 169.895 935.604 190.978 cv
933.536 212.061 890.666 210.597 890.666 210.597 cv
889.579 198.252 li
889.579 198.252 910.531 187.726 912.245 186.667 cv
915.558 184.619 914.562 152.825 914.562 152.825 cv
cp
.976471 .533333 .458824 rgb
f
906.364 354.997 mo
906.364 356.908 907.007 359.096 908.321 359.631 cv
909.621 360.181 920.28 361.343 929.594 360.533 cv
938.493 359.753 940.634 355.746 939.87 353.804 cv
939.518 352.887 939.136 352.03 938.845 351.388 cv
938.57 350.73 938.233 350.134 937.836 349.584 cv
936.857 348.237 934.961 345.485 934.472 344.078 cv
933.829 342.167 932.835 338.068 932.178 336.157 cv
931.521 334.245 928.418 332.316 928.418 332.316 cv
928.418 332.316 912.909 331.508 911.595 332.609 cv
910.279 333.695 908.321 343.803 908.321 345.164 cv
908.321 346.54 li
908.321 347.932 907.251 350.853 906.701 353.039 cv
906.609 353.314 906.548 353.59 906.502 353.835 cv
906.426 354.294 906.364 354.676 906.364 354.997 cv
cp
.501961 .45098 .92549 rgb
f
818.511 332.945 mo
818.938 333.832 861.313 359.769 862.813 359.554 cv
863.348 359.478 864.662 357.521 866.299 354.568 cv
869.28 349.201 872.334 338.637 874.398 332.244 cv
874.398 332.244 859.417 323.388 857.582 323.327 cv
855.731 323.266 833.955 325.452 833.955 325.452 cv
833.955 325.452 827.318 323.847 823.297 325.666 cv
822.119 326.202 821.171 326.981 820.452 327.822 cv
818.709 329.856 818.204 332.334 818.511 332.945 cv
cp
f
906.364 354.997 mo
906.364 356.908 907.007 359.096 908.321 359.631 cv
909.621 360.181 920.28 361.343 929.594 360.533 cv
938.493 359.753 940.634 355.746 939.87 353.804 cv
939.518 352.887 939.136 352.03 938.845 351.388 cv
936.995 352.443 932.438 354.11 921.932 354.477 cv
915.02 354.706 910.065 353.957 906.701 353.039 cv
906.609 353.314 906.548 353.59 906.502 353.835 cv
906.426 354.294 906.364 354.676 906.364 354.997 cv
cp
.117647 .129412 .262745 rgb
f
818.511 332.945 mo
818.938 333.832 861.313 359.769 862.813 359.554 cv
863.348 359.478 864.662 357.521 866.299 354.568 cv
820.452 327.822 li
818.709 329.856 818.204 332.334 818.511 332.945 cv
cp
f
903.89 263.404 mo
903.698 263.404 903.534 263.259 903.517 263.064 cv
900.299 228.564 li
887.279 222.797 li
887.091 222.713 887.005 222.491 887.089 222.302 cv
887.172 222.112 887.393 222.029 887.584 222.111 cv
900.804 227.968 li
900.928 228.022 901.012 228.141 901.024 228.275 cv
904.263 262.994 li
904.282 263.201 904.131 263.384 903.925 263.402 cv
903.913 263.403 903.9 263.404 903.89 263.404 cv
cp
.501961 .45098 .92549 rgb
f
923.851 216.23 mo
921.979 216.23 918.516 215.396 916.066 209.874 cv
915.982 209.685 916.067 209.463 916.257 209.379 cv
916.447 209.297 916.667 209.38 916.752 209.569 cv
919.963 216.81 924.746 215.419 924.95 215.358 cv
925.148 215.297 925.357 215.406 925.42 215.604 cv
925.481 215.801 925.373 216.011 925.176 216.073 cv
925.159 216.078 924.649 216.23 923.851 216.23 cv
cp
f
914.327 186.834 mo
916.634 188.705 920.776 191.446 922.478 189.904 cv
922.786 189.625 922.737 189.473 922.721 189.423 cv
922.396 188.399 917.968 187.367 914.327 186.834 cv
cp
921.18 191.098 mo
917.898 191.098 913.108 186.793 912.865 186.573 cv
912.744 186.463 912.708 186.288 912.776 186.139 cv
912.844 185.99 912.991 185.906 913.162 185.922 cv
914.765 186.115 922.793 187.176 923.436 189.195 cv
923.532 189.498 923.531 189.962 922.981 190.46 cv
922.483 190.911 921.863 191.098 921.18 191.098 cv
cp
.968627 .45098 .309804 rgb
f
897.789 155.008 mo
896.593 155.008 895.21 154.787 893.628 154.222 cv
893.433 154.153 893.331 153.938 893.4 153.743 cv
893.471 153.548 893.686 153.446 893.88 153.516 cv
900.574 155.902 903.267 151.87 903.378 151.697 cv
903.491 151.523 903.724 151.472 903.896 151.583 cv
904.07 151.695 904.122 151.926 904.011 152.1 cv
903.987 152.137 902.1 155.008 897.789 155.008 cv
cp
1 1 1 rgb
f
874.041 145.222 mo
872.427 145.592 870.063 146.34 869.295 147.434 cv
869.082 147.738 869.01 148.045 869.073 148.371 cv
869.133 148.678 869.25 148.71 869.294 148.723 cv
870.089 148.933 872.315 147.01 874.041 145.222 cv
cp
869.374 149.481 mo
869.275 149.481 869.183 149.47 869.095 149.446 cv
868.817 149.369 868.46 149.146 868.337 148.515 cv
868.233 147.985 868.35 147.477 868.682 147.003 cv
870.046 145.059 874.843 144.292 875.046 144.26 cv
875.209 144.234 875.358 144.313 875.433 144.452 cv
875.509 144.591 875.488 144.763 875.383 144.881 cv
874.667 145.681 871.166 149.481 869.374 149.481 cv
cp
.968627 .45098 .309804 rgb
f
914.59 343.396 mo
914.399 343.396 914.236 343.253 914.217 343.061 cv
914.195 342.854 914.346 342.67 914.551 342.648 cv
928.361 341.22 li
918.22 337.024 li
918.028 336.945 917.938 336.726 918.017 336.534 cv
918.096 336.343 918.316 336.253 918.507 336.331 cv
930.019 341.094 li
930.177 341.159 930.271 341.324 930.246 341.494 cv
930.222 341.664 930.084 341.796 929.914 341.813 cv
914.629 343.395 li
914.615 343.396 914.603 343.396 914.59 343.396 cv
cp
1 1 1 rgb
f
853.965 332.405 mo
853.9 332.405 853.836 332.389 853.778 332.355 cv
841.17 325.118 li
840.99 325.015 840.928 324.786 841.031 324.606 cv
841.135 324.426 841.364 324.363 841.543 324.468 cv
853.2 331.159 li
850.379 324.313 li
850.3 324.122 850.392 323.903 850.583 323.824 cv
850.773 323.744 850.993 323.835 851.072 324.028 cv
854.312 331.888 li
854.373 332.035 854.333 332.206 854.212 332.313 cv
854.143 332.374 854.054 332.405 853.965 332.405 cv
cp
f
865.841 117.719 mo
864.686 120.957 861.678 124.891 861.678 124.891 cv
857.004 126.629 li
855.4 126.661 li
855.4 126.661 853.538 119.416 856.619 115.19 cv
858.919 112.015 860.397 110.724 860.99 110.277 cv
861.199 110.131 861.292 110.079 861.292 110.079 cv
861.303 109.298 li
861.844 107.591 862.927 105.034 864.228 105 cv
866.309 104.943 866.997 114.482 865.841 117.719 cv
cp
.976471 .533333 .458824 rgb
f
855.666 122.505 mo
855.467 122.505 855.298 122.354 855.278 122.153 cv
854.571 114.851 860.496 110.203 860.748 110.008 cv
860.919 109.877 861.164 109.909 861.295 110.08 cv
861.427 110.25 861.395 110.495 861.225 110.627 cv
861.166 110.672 855.391 115.213 856.055 122.078 cv
856.075 122.292 855.919 122.483 855.704 122.503 cv
855.691 122.505 855.679 122.505 855.666 122.505 cv
cp
0 0 0 rgb
f
889.579 198.252 mo
889.579 198.252 874.244 205.039 871.89 207.928 cv
869.536 210.815 874.634 223.22 877.691 223.56 cv
880.75 223.899 878.943 218.802 878.943 218.802 cv
879.837 217.729 li
879.837 217.729 882.641 218.037 885.992 216.489 cv
891.712 213.848 894.854 203.51 894.854 203.51 cv
889.579 198.252 li
cp
.976471 .533333 .458824 rgb
f
871.313 210.916 mo
871.313 210.916 871.405 223.39 873.784 224.409 cv
876.163 225.429 876.114 220.331 876.114 220.331 cv
871.313 210.916 li
cp
f
871.89 207.928 mo
871.89 207.928 867.306 220.33 868.676 222.454 cv
870.046 224.579 873.714 219.651 873.714 219.651 cv
871.89 207.928 li
cp
f
878.943 218.831 mo
878.911 218.83 877.523 218.712 877.523 218.712 cv
877.317 218.694 877.164 218.513 877.182 218.306 cv
877.199 218.101 877.338 217.942 877.588 217.964 cv
878.457 218.038 li
878.011 216.19 li
877.962 215.989 878.086 215.787 878.287 215.738 cv
878.485 215.687 878.691 215.813 878.739 216.015 cv
879.308 218.368 li
879.336 218.485 879.307 218.608 879.228 218.7 cv
879.156 218.783 879.052 218.831 878.943 218.831 cv
cp
0 0 0 rgb
f
872.262 221.696 mo
872.074 221.696 871.913 221.558 871.89 221.367 cv
870.941 213.701 li
870.916 213.496 871.062 213.309 871.268 213.283 cv
871.479 213.255 871.66 213.403 871.686 213.609 cv
872.634 221.275 li
872.659 221.48 872.514 221.668 872.308 221.693 cv
872.292 221.695 872.276 221.696 872.262 221.696 cv
cp
f
875.927 222.732 mo
875.763 222.732 875.612 222.625 875.566 222.46 cv
873.354 214.656 li
873.297 214.457 873.412 214.249 873.611 214.193 cv
873.813 214.137 874.02 214.253 874.074 214.451 cv
876.287 222.255 li
876.344 222.454 876.229 222.662 876.029 222.718 cv
875.995 222.728 875.96 222.732 875.927 222.732 cv
cp
f
884.648 200.53 mo
884.648 200.53 873.288 204.529 872.262 205.294 cv
871.235 206.059 873.714 209.605 873.714 209.605 cv
884.648 200.53 li
cp
.976471 .533333 .458824 rgb
f
736.059 158.962 mo
736.059 158.962 697.667 174.509 700.333 194.032 cv
703 213.556 742.198 211.147 742.198 211.147 cv
743.745 188.93 li
736.059 158.962 li
cp
.117647 .129412 .262745 rgb
f
737 188.889 mo
736.959 188.889 736.917 188.882 736.876 188.868 cv
736.788 188.837 728.017 185.791 720.998 185.75 cv
720.791 185.749 720.624 185.58 720.625 185.373 cv
720.626 185.167 720.794 185 721 185 cv
728.148 185.042 737.035 188.129 737.124 188.16 cv
737.319 188.229 737.423 188.443 737.354 188.638 cv
737.3 188.792 737.155 188.889 737 188.889 cv
cp
.968627 .45098 .309804 rgb
f
723.598 180.59 mo
723.255 180.59 723.17 180.662 723.169 180.663 cv
723.062 181.171 725.279 183.266 728.165 185.4 cv
727.716 183.813 726.509 180.784 723.808 180.598 cv
723.729 180.592 723.658 180.59 723.598 180.59 cv
cp
728.76 186.67 mo
728.684 186.67 728.607 186.646 728.542 186.601 cv
726.555 185.188 721.985 181.754 722.471 180.397 cv
722.695 179.77 723.574 179.829 723.858 179.85 cv
728.107 180.143 729.09 185.987 729.13 186.236 cv
729.154 186.385 729.086 186.534 728.958 186.613 cv
728.896 186.651 728.828 186.67 728.76 186.67 cv
cp
f
742.198 211.522 mo
742.091 211.522 741.984 211.477 741.91 211.388 cv
741.777 211.229 741.799 210.992 741.958 210.859 cv
748.487 205.415 746.531 189.707 746.511 189.548 cv
746.484 189.343 746.629 189.155 746.835 189.128 cv
747.041 189.107 747.229 189.247 747.255 189.452 cv
747.341 190.114 749.28 205.729 742.438 211.436 cv
742.368 211.494 742.283 211.522 742.198 211.522 cv
cp
f
758.181 143.095 mo
756.756 143.095 755.818 142.102 755.771 142.05 cv
755.631 141.898 755.641 141.663 755.792 141.522 cv
755.944 141.38 756.18 141.39 756.321 141.541 cv
756.366 141.589 757.445 142.708 758.949 142.219 cv
759.151 142.154 759.357 142.264 759.422 142.459 cv
759.486 142.657 759.378 142.868 759.182 142.932 cv
758.827 143.047 758.492 143.095 758.181 143.095 cv
cp
0 0 0 rgb
f
223.097 200.386 mo
223.097 200.386 216.211 208.015 219.444 212.079 cv
221.173 214.253 224.479 208.015 224.479 208.015 cv
225.631 214.272 li
225.631 214.272 228.078 222.806 229.645 223.83 cv
231.212 224.854 232.179 220.959 232.179 220.959 cv
232.179 220.959 233.806 227.107 235.984 224.747 cv
238.162 222.387 237.454 217.927 237.454 217.927 cv
237.454 217.927 238.758 224.116 241.126 221.06 cv
242.408 219.407 242.456 203.983 237.5 196.696 cv
232.544 189.408 225.514 196.448 225.514 196.448 cv
223.097 200.386 li
cp
.988235 .639216 .592157 rgb
f
232.179 221.334 mo
232.001 221.334 231.843 221.207 231.811 221.026 cv
230.05 211.396 li
230.012 211.191 230.147 210.996 230.351 210.959 cv
230.554 210.923 230.75 211.057 230.787 211.261 cv
232.548 220.892 li
232.585 221.096 232.45 221.291 232.247 221.328 cv
232.224 221.332 232.201 221.334 232.179 221.334 cv
cp
0 0 0 rgb
f
237.542 219.231 mo
237.359 219.231 237.199 219.098 237.171 218.912 cv
235.976 210.891 li
235.945 210.686 236.086 210.494 236.292 210.464 cv
236.491 210.434 236.687 210.575 236.718 210.779 cv
237.913 218.801 li
237.943 219.006 237.802 219.197 237.597 219.228 cv
237.579 219.23 237.56 219.231 237.542 219.231 cv
cp
f
144.423 115.044 mo
143.296 118.201 140.362 122.039 140.362 122.039 cv
135.804 123.734 li
128.86 126.323 li
128.86 126.323 124.12 115.044 123.673 107.38 cv
123.216 99.7051 124.8 96.9946 125.927 96.7715 cv
127.053 96.5479 128.404 101.289 128.404 101.289 cv
128.404 101.289 128.18 94.061 130.667 93.6143 cv
133.145 93.1675 134.048 99.4819 134.048 99.4819 cv
134.048 99.4819 134.951 94.2944 136.982 95.1978 cv
138.941 96.0605 139.642 107.024 139.692 107.786 cv
139.692 107.827 139.692 107.806 139.712 107.776 cv
139.743 107.634 139.845 107.289 139.997 106.832 cv
140.524 105.167 141.682 102.142 142.849 102.639 cv
144.423 103.319 145.55 111.887 144.423 115.044 cv
cp
.976471 .533333 .458824 rgb
f
125.522 122.578 mo
125.522 122.578 118.301 145.305 131.961 162.178 cv
145.62 179.05 164.796 177.725 164.796 177.725 cv
175.473 151.992 li
175.473 151.992 161.338 148.12 154.999 143.615 cv
148.659 139.111 145.354 122.021 145.354 122.021 cv
125.522 122.578 li
cp
.94902 .411765 .286275 rgb
f
90.0483 115.044 mo
91.1753 118.201 94.1089 122.039 94.1089 122.039 cv
98.667 123.734 li
105.611 126.323 li
105.611 126.323 110.352 115.044 110.798 107.38 cv
111.255 99.7051 109.671 96.9946 108.545 96.7715 cv
107.418 96.5479 106.068 101.289 106.068 101.289 cv
106.068 101.289 106.291 94.061 103.804 93.6143 cv
101.327 93.1675 100.423 99.4819 100.423 99.4819 cv
100.423 99.4819 99.52 94.2944 97.4893 95.1978 cv
95.5303 96.0605 94.8296 107.024 94.7793 107.786 cv
94.7793 107.827 94.7793 107.806 94.7588 107.776 cv
94.7285 107.634 94.627 107.289 94.4746 106.832 cv
93.9468 105.167 92.7896 102.142 91.6221 102.639 cv
90.0483 103.319 88.9214 111.887 90.0483 115.044 cv
cp
.988235 .639216 .592157 rgb
f
192.882 109.957 mo
48.5454 109.957 li
47.6675 109.957 46.9561 109.246 46.9561 108.368 cv
46.9561 33.145 li
46.9561 32.2671 47.6675 31.5557 48.5454 31.5557 cv
192.882 31.5557 li
193.76 31.5557 194.472 32.2671 194.472 33.145 cv
194.472 108.368 li
194.472 109.246 193.76 109.957 192.882 109.957 cv
cp
1 1 1 rgb
f
55.791 152.276 mo
55.791 152.276 79.6357 153.933 86.4033 141.392 cv
93.1709 128.851 93.2085 117.266 93.2085 117.266 cv
106.179 119.014 li
106.179 119.014 113.05 140.116 103.451 159.244 cv
92.5747 180.915 71.6191 177.868 71.6191 177.868 cv
55.791 152.276 li
cp
.988235 .639216 .592157 rgb
f
75.2979 318.407 mo
75.2979 318.407 81.8901 327.656 82.147 329.461 cv
82.4038 331.266 77.3623 334.531 77.3623 334.531 cv
89.5098 349.65 li
62.585 349.65 li
61.2632 320.475 li
75.2979 318.407 li
cp
0 0 0 rgb
f
57.646 119.93 mo
57.646 119.93 47.3721 115.177 42.772 123.61 cv
38.3057 131.798 44.9189 139.404 44.9189 139.404 cv
56.2661 127.597 li
57.646 119.93 li
cp
f
66.2935 346.264 mo
45.9956 345.798 li
46.5308 322.455 li
66.8286 322.921 li
66.2935 346.264 li
cp
.988235 .639216 .592157 rgb
f
44.4126 213.393 mo
44.4126 213.393 40.6851 226.658 40.4702 252.714 cv
40.2852 275.21 36.1338 325.128 37.8257 327.497 cv
39.5176 329.865 74.0332 328.512 75.3867 327.835 cv
76.7402 327.158 77.0786 311.593 77.0786 311.593 cv
77.0786 311.593 100.089 273.017 103.134 266.587 cv
106.18 260.158 83.7358 204.663 83.7358 204.663 cv
44.4126 213.393 li
cp
.968627 .45098 .309804 rgb
f
52.3765 150.053 mo
52.3765 150.053 36.1338 155.99 34.1035 165.052 cv
32.0732 174.114 46.2852 210.362 50.0078 211.612 cv
53.73 212.861 83.5078 206.3 86.2148 204.112 cv
88.9219 201.925 85.8765 179.426 85.1997 176.301 cv
84.5229 173.177 81.8159 160.677 78.0938 155.365 cv
74.3716 150.053 71.3262 149.702 67.604 149.702 cv
63.8813 149.702 52.3765 150.053 52.3765 150.053 cv
cp
.501961 .45098 .92549 rgb
f
44.6123 122.23 mo
44.6123 122.23 33.2651 119.317 28.8184 135.264 cv
24.3716 151.211 35.5107 155.904 40.9321 152.591 cv
46.4521 149.218 45.5322 139.864 45.5322 139.864 cv
44.6123 122.23 li
cp
0 0 0 rgb
f
49.2539 143.491 mo
50.1191 152.333 li
50.1191 152.333 51.9619 154.718 57.1753 154.633 cv
61.0591 154.569 62.3276 153.565 62.3276 153.565 cv
61.3525 149.14 li
60.3955 144.825 li
50.855 143.684 li
49.2539 143.491 li
cp
.988235 .639216 .592157 rgb
f
50.855 143.684 mo
50.9009 143.923 51.0205 144.199 51.1953 144.512 cv
53.606 148.735 59.1074 149.158 61.3525 149.14 cv
60.3955 144.825 li
50.855 143.684 li
cp
0 0 0 rgb
f
60.3955 124.479 mo
60.3955 124.479 66.1201 135.111 64.8936 141.449 cv
63.667 147.787 57.9424 147.275 54.4663 146.355 cv
50.9907 145.436 49.2529 143.493 49.2529 143.493 cv
49.2529 143.493 46.1865 144.822 43.835 142.062 cv
41.4839 139.302 42.5059 135.826 44.2441 134.906 cv
45.9819 133.986 48.231 135.111 48.231 135.111 cv
46.2886 132.044 li
46.2886 132.044 52.0132 115.177 60.3955 124.479 cv
cp
.988235 .639216 .592157 rgb
f
61.2441 137.775 mo
61.0337 137.775 60.8633 137.605 60.8633 137.395 cv
60.8633 133.832 59.2622 132.564 59.2466 132.552 cv
59.0801 132.425 59.0464 132.187 59.1724 132.02 cv
59.2983 131.854 59.5337 131.819 59.7026 131.942 cv
59.7808 132.001 61.6245 133.416 61.6245 137.395 cv
61.6245 137.605 61.4541 137.775 61.2441 137.775 cv
cp
0 0 0 rgb
f
48.2813 140.296 mo
48.1992 140.296 48.1152 140.269 48.0454 140.213 cv
44.3657 137.3 li
44.2007 137.17 44.1733 136.931 44.3037 136.766 cv
44.4336 136.601 44.6738 136.573 44.8384 136.704 cv
48.5181 139.617 li
48.6831 139.747 48.7104 139.986 48.5801 140.151 cv
48.5054 140.246 48.394 140.296 48.2813 140.296 cv
cp
f
44.6025 140.296 mo
44.4707 140.296 44.3428 140.228 44.272 140.105 cv
44.167 139.923 44.2295 139.69 44.4121 139.585 cv
46.5425 138.358 li
46.7251 138.255 46.9565 138.317 47.0625 138.499 cv
47.167 138.681 47.1045 138.914 46.9224 139.019 cv
44.792 140.245 li
44.7319 140.279 44.667 140.296 44.6025 140.296 cv
cp
f
47.3301 358.931 mo
45.8076 358.859 44.6084 357.545 44.604 355.938 cv
44.585 349.588 44.6689 334.891 45.8428 334.887 cv
47.3398 334.883 61.4692 339.358 61.4692 339.358 cv
61.4692 339.358 61.8735 330.559 68.0811 332.122 cv
72.8438 333.321 78.374 338.901 80.6895 341.434 cv
81.4243 342.237 82.356 342.796 83.3877 343.047 cv
87.8247 344.129 100.032 347.688 100.224 354.146 cv
100.458 362.04 97.2471 361.146 95.75 361.15 cv
94.4648 361.154 57.7124 359.422 47.3301 358.931 cv
cp
.117647 .129412 .262745 rgb
f
48.231 135.111 mo
48.231 135.111 53.0459 135.724 55.9595 130.204 cv
58.8726 124.684 58.4126 122.537 58.4126 122.537 cv
62.0928 127.75 li
62.0928 127.75 62.5527 123.917 60.8662 121.617 cv
59.1792 119.317 57.646 119.93 57.646 119.93 cv
47.3721 123.304 li
45.2256 131.891 li
48.231 135.111 li
cp
0 0 0 rgb
f
56.1636 134.367 mo
56.0039 134.367 55.856 134.266 55.8022 134.106 cv
55.189 132.267 li
55.1543 132.161 55.167 132.045 55.2241 131.95 cv
55.9287 130.774 li
56.0366 130.594 56.269 130.535 56.4512 130.644 cv
56.6318 130.752 56.6899 130.986 56.582 131.166 cv
55.9668 132.192 li
56.5249 133.866 li
56.5913 134.065 56.4834 134.281 56.2842 134.348 cv
56.2441 134.36 56.2036 134.367 56.1636 134.367 cv
cp
f
62.5015 133.14 mo
62.3418 133.14 62.1938 133.04 62.1401 132.88 cv
61.5269 131.04 li
61.4937 130.939 61.5039 130.831 61.5537 130.738 cv
62.3394 129.286 li
62.439 129.102 62.6685 129.032 62.8555 129.133 cv
63.0405 129.232 63.1089 129.463 63.0088 129.649 cv
62.3018 130.956 li
62.8628 132.639 li
62.9292 132.838 62.8213 133.054 62.6221 133.121 cv
62.582 133.133 62.541 133.14 62.5015 133.14 cv
cp
f
62.5098 128.618 mo
62.4912 128.615 62.4722 128.61 62.4536 128.604 cv
60.8242 128.063 li
60.625 127.998 60.5166 127.782 60.583 127.583 cv
60.6489 127.383 60.8652 127.272 61.064 127.341 cv
62.6934 127.882 li
62.8926 127.948 63.001 128.164 62.9346 128.363 cv
62.875 128.543 62.6919 128.649 62.5098 128.618 cv
cp
f
55.5688 129.323 mo
55.4526 129.297 55.3506 129.218 55.3008 129.101 cv
55.2183 128.908 55.3076 128.684 55.501 128.601 cv
57.4727 127.758 li
57.665 127.674 57.8892 127.765 57.9722 127.959 cv
58.0547 128.152 57.9653 128.376 57.772 128.458 cv
55.8003 129.301 li
55.7246 129.333 55.644 129.34 55.5688 129.323 cv
cp
f
75.3867 318.779 mo
37.4873 318.779 li
37.2773 318.779 37.1069 318.608 37.1069 318.398 cv
37.1069 318.188 37.2773 318.018 37.4873 318.018 cv
75.3867 318.018 li
75.5972 318.018 75.7676 318.188 75.7676 318.398 cv
75.7676 318.608 75.5972 318.779 75.3867 318.779 cv
cp
1 1 1 rgb
f
57.3389 155.175 mo
53.0244 155.175 49.9185 152.661 49.876 152.626 cv
49.7144 152.492 49.6914 152.252 49.8252 152.09 cv
49.96 151.928 50.1997 151.906 50.3613 152.039 cv
50.4155 152.083 55.834 156.452 62.1548 153.226 cv
62.3433 153.13 62.5708 153.205 62.6665 153.392 cv
62.7622 153.58 62.688 153.809 62.5005 153.904 cv
60.6782 154.834 58.9268 155.175 57.3389 155.175 cv
cp
1 .74902 .411765 rgb
f
77.4517 346.14 mo
77.312 346.14 77.1772 346.063 77.1108 345.929 cv
77.0166 345.741 77.0933 345.512 77.2813 345.418 cv
82.7119 342.708 li
82.8994 342.614 83.1289 342.69 83.2227 342.879 cv
83.3169 343.066 83.2397 343.295 83.0522 343.39 cv
77.6216 346.1 li
77.5669 346.127 77.5088 346.14 77.4517 346.14 cv
cp
f
90.0483 115.044 mo
91.1753 118.201 94.1089 122.039 94.1089 122.039 cv
98.667 123.734 li
100.23 123.764 li
100.23 123.764 102.047 116.699 99.043 112.578 cv
96.7993 109.481 95.3579 108.222 94.7793 107.786 cv
94.5762 107.644 94.4849 107.593 94.4849 107.593 cv
94.4746 106.832 li
93.9468 105.167 92.7896 102.142 91.6221 102.639 cv
90.0483 103.319 88.9214 111.887 90.0483 115.044 cv
cp
.988235 .639216 .592157 rgb
f
144.898 115.044 mo
143.771 118.201 141.167 122.021 141.167 122.021 cv
134.883 122.021 li
134.883 122.021 132.899 116.699 135.904 112.578 cv
138.147 109.481 139.589 108.222 140.167 107.786 cv
140.371 107.644 140.462 107.593 140.462 107.593 cv
140.472 106.832 li
141 105.167 142.157 102.142 143.325 102.639 cv
144.898 103.319 146.025 111.887 144.898 115.044 cv
cp
.976471 .533333 .458824 rgb
f
100.278 120.521 mo
100.472 120.521 100.637 120.375 100.656 120.178 cv
101.345 113.056 95.5674 108.523 95.3208 108.334 cv
95.1548 108.206 94.9155 108.237 94.7876 108.403 cv
94.6592 108.57 94.6904 108.809 94.8564 108.937 cv
94.9136 108.981 100.546 113.41 99.8984 120.104 cv
99.8784 120.313 100.031 120.5 100.241 120.52 cv
100.253 120.521 100.265 120.521 100.278 120.521 cv
cp
0 0 0 rgb
f
58.0684 139.108 mo
58.1899 139.122 58.3022 139.193 58.3633 139.31 cv
58.3721 139.325 58.6172 139.758 59.1738 139.884 cv
59.668 140 60.4541 139.618 60.6919 139.478 cv
60.873 139.37 61.1069 139.431 61.2134 139.611 cv
61.3203 139.792 61.2598 140.026 61.0791 140.132 cv
60.9585 140.204 59.8691 140.817 59.0068 140.627 cv
58.0986 140.422 57.7065 139.696 57.6899 139.665 cv
57.5918 139.479 57.6631 139.249 57.8491 139.15 cv
57.9189 139.114 57.9956 139.101 58.0684 139.108 cv
cp
f
51.8281 231.541 mo
51.8281 231.541 61.0425 237.121 60.3203 239.803 cv
59.5977 242.484 52.1001 237.589 52.1001 237.589 cv
52.4336 245.644 li
52.4336 245.644 51.9385 254.508 50.6372 255.854 cv
49.3359 257.2 47.5303 253.616 47.5303 253.616 cv
47.5303 253.616 47.3062 259.972 44.6592 258.152 cv
42.0122 256.333 41.7144 251.828 41.7144 251.828 cv
41.7144 251.828 41.8145 258.151 38.8271 255.696 cv
37.2119 254.369 33.7471 239.339 36.9653 231.135 cv
40.1836 222.93 48.5986 228.237 48.5986 228.237 cv
51.8281 231.541 li
cp
.988235 .639216 .592157 rgb
f
188.129 328.427 mo
187.014 339.491 li
164.664 339.491 li
164.664 326.58 li
188.129 328.427 li
cp
.976471 .533333 .458824 rgb
f
244.245 257.896 mo
255.273 256.467 li
260.352 278.232 li
247.779 281.166 li
244.245 257.896 li
cp
f
247.162 254.136 mo
247.162 254.136 217.444 252.444 213.778 244.444 cv
205.185 225.697 203.474 200.91 203.474 200.91 cv
159.745 209.807 li
159.745 209.807 154.268 248.229 154.826 277.862 cv
155.385 307.495 158.248 331.919 159.253 333.017 cv
160.257 334.114 191.911 333.426 193.781 333.017 cv
195.642 332.609 194.617 291.627 194.333 281.667 cv
194.333 281.667 195.937 283.891 207.111 287.556 cv
221.989 292.436 250.379 287.787 251.918 286.782 cv
253.457 285.778 247.162 254.136 247.162 254.136 cv
cp
.501961 .45098 .92549 rgb
f
154.266 348.271 mo
154.227 348.271 154.188 348.265 154.148 348.252 cv
153.718 348.109 143.588 344.732 142.45 341.362 cv
142.24 340.739 142.322 340.148 142.693 339.605 cv
143.105 339.004 143.679 338.679 144.397 338.639 cv
146.574 338.521 149.635 341.119 151.681 343.12 cv
150.345 340.563 148.708 336.817 149.355 334.826 cv
149.554 334.216 149.944 333.79 150.515 333.561 cv
151.099 333.324 151.685 333.364 152.253 333.676 cv
155.083 335.229 156.678 343.566 156.745 343.921 cv
156.783 344.125 156.649 344.32 156.445 344.358 cv
156.239 344.402 156.045 344.263 156.007 344.06 cv
155.572 341.743 153.985 335.481 151.892 334.334 cv
151.525 334.133 151.167 334.107 150.794 334.256 cv
150.435 334.4 150.197 334.663 150.069 335.059 cv
149.31 337.391 152.529 343.311 153.833 345.395 cv
153.938 345.561 153.896 345.779 153.738 345.896 cv
153.582 346.011 153.36 345.989 153.232 345.839 cv
151.637 343.996 146.976 339.23 144.439 339.387 cv
143.958 339.414 143.589 339.624 143.313 340.029 cv
143.078 340.372 143.028 340.729 143.16 341.122 cv
144.006 343.627 151.549 346.604 154.384 347.539 cv
154.58 347.604 154.687 347.816 154.622 348.013 cv
154.57 348.171 154.424 348.271 154.266 348.271 cv
cp
.968627 .45098 .309804 rgb
f
132.432 361.145 mo
133.14 361.425 154.853 362.014 169.88 362.125 cv
170.878 361.382 171.093 355.955 173.788 355.955 cv
176.439 355.955 177.17 357.829 178.043 360.172 cv
178.486 361.359 179.575 362.182 180.841 362.122 cv
183.992 361.973 187.544 361.509 187.77 361.145 cv
188.143 360.554 188.407 358.55 188.578 356.033 cv
189.013 350.099 189.013 341.273 189.013 341.273 cv
189.013 341.273 189.401 338.26 189.324 336.861 cv
189.261 335.479 163.83 336.007 163.83 336.007 cv
147.299 349.042 li
147.299 349.042 142.763 348.234 137.807 349.042 cv
135.182 349.461 133.488 352.677 132.649 355.707 cv
131.904 358.395 131.841 360.896 132.432 361.145 cv
cp
1 .74902 .411765 rgb
f
267.331 300.089 mo
267.121 300.089 266.905 300.053 266.686 299.981 cv
265.993 299.755 265.52 299.296 265.278 298.617 cv
264.561 296.595 266.188 292.896 267.534 290.368 cv
265.455 292.369 262.31 294.989 260.227 294.93 cv
259.585 294.91 259.067 294.655 258.687 294.173 cv
258.297 293.678 258.17 293.105 258.31 292.472 cv
259.004 289.319 266.56 285.447 266.881 285.284 cv
267.066 285.188 267.291 285.265 267.385 285.448 cv
267.479 285.633 267.405 285.858 267.221 285.952 cv
265.12 287.021 259.555 290.303 259.042 292.634 cv
258.952 293.043 259.028 293.395 259.275 293.708 cv
259.516 294.014 259.834 294.167 260.25 294.18 cv
260.268 294.181 260.288 294.181 260.306 294.181 cv
262.774 294.182 267.491 289.487 269.113 287.664 cv
269.244 287.519 269.464 287.498 269.62 287.614 cv
269.776 287.733 269.814 287.952 269.708 288.116 cv
268.388 290.164 265.145 295.998 265.985 298.366 cv
266.146 298.821 266.452 299.116 266.918 299.269 cv
267.313 299.397 267.67 299.345 268.01 299.107 cv
270.176 297.593 270.915 289.518 271.016 286.534 cv
271.023 286.327 271.206 286.182 271.404 286.172 cv
271.61 286.179 271.773 286.353 271.766 286.56 cv
271.75 287.013 271.354 297.683 268.439 299.722 cv
268.09 299.967 267.719 300.089 267.331 300.089 cv
cp
.968627 .45098 .309804 rgb
f
290.238 303.781 mo
290.309 303.022 284.776 282.019 280.663 267.565 cv
279.669 266.815 274.401 268.134 273.645 265.547 cv
272.9 263.002 274.493 261.774 276.496 260.278 cv
277.511 259.521 277.995 258.244 277.582 257.046 cv
276.554 254.064 275.111 250.785 274.698 250.67 cv
274.026 250.479 272.029 250.787 269.565 251.33 cv
263.747 252.579 255.278 255.058 255.278 255.058 cv
255.278 255.058 252.276 255.531 250.956 255.998 cv
249.647 256.446 257.296 280.706 257.296 280.706 cv
274.448 292.911 li
274.448 292.911 274.946 297.491 277.114 302.021 cv
278.253 304.423 281.815 305.146 284.958 305.1 cv
287.748 305.061 290.166 304.418 290.238 303.781 cv
cp
1 .74902 .411765 rgb
f
158.537 209.55 mo
160.052 209.82 203.425 208.473 204.154 207.588 cv
204.882 206.704 203.652 180.528 203.652 180.528 cv
203.652 180.528 204.915 180.506 208.572 183.633 cv
212.308 186.825 216.211 203.008 216.211 203.008 cv
242.701 200.535 li
242.701 200.535 240.735 172.96 220.134 157.965 cv
200.009 143.316 164.032 151.576 163.076 152.578 cv
162.116 153.594 157.034 209.298 158.537 209.55 cv
cp
.94902 .411765 .286275 rgb
f
182.915 140.898 mo
183.146 149.482 li
183.146 149.482 181.664 151.992 176.653 152.535 cv
172.92 152.94 171.583 152.129 171.583 152.129 cv
171.988 147.768 li
172.388 143.514 li
181.402 141.275 li
182.915 140.898 li
cp
.976471 .533333 .458824 rgb
f
181.402 141.275 mo
181.387 141.511 181.305 141.79 181.175 142.111 cv
179.37 146.45 174.143 147.516 171.988 147.768 cv
172.388 143.514 li
181.402 141.275 li
cp
0 0 0 rgb
f
169.948 123.999 mo
169.948 123.999 165.732 134.883 167.669 140.815 cv
169.605 146.747 175.035 145.57 178.259 144.271 cv
181.482 142.972 182.916 140.9 182.916 140.9 cv
182.916 140.9 186.017 141.807 187.941 138.877 cv
189.865 135.948 188.468 132.737 186.69 132.063 cv
184.913 131.389 182.891 132.737 182.891 132.737 cv
184.386 129.563 li
184.386 129.563 176.872 114.071 169.948 123.999 cv
cp
.976471 .533333 .458824 rgb
f
171 137.59 mo
170.847 137.59 170.704 137.496 170.648 137.344 cv
169.824 135.079 171.327 132.663 171.392 132.561 cv
171.501 132.385 171.732 132.334 171.909 132.444 cv
172.083 132.555 172.135 132.786 172.025 132.961 cv
172.012 132.983 170.656 135.172 171.353 137.087 cv
171.424 137.282 171.323 137.497 171.129 137.568 cv
171.086 137.583 171.043 137.59 171 137.59 cv
cp
0 0 0 rgb
f
183.575 137.76 mo
183.488 137.76 183.402 137.73 183.331 137.67 cv
183.174 137.535 183.155 137.298 183.29 137.141 cv
186.041 133.924 li
186.177 133.767 186.413 133.75 186.569 133.882 cv
186.727 134.017 186.745 134.254 186.61 134.411 cv
183.86 137.628 li
183.785 137.715 183.68 137.76 183.575 137.76 cv
cp
f
186.606 136.785 mo
186.568 136.783 184.546 136.578 184.546 136.578 cv
184.339 136.557 184.189 136.373 184.211 136.167 cv
184.232 135.961 184.417 135.809 184.622 135.832 cv
186.644 136.037 li
186.85 136.058 187 136.242 186.979 136.448 cv
186.959 136.641 186.796 136.785 186.606 136.785 cv
cp
f
182.891 132.737 mo
182.891 132.737 181.824 133.515 180.961 132.301 cv
180.099 131.086 181.669 127.295 181.669 127.295 cv
181.669 127.295 178.399 128.209 176.301 127.215 cv
174.203 126.222 173.051 123.261 173.051 123.261 cv
173.051 123.261 171.701 126.471 167.118 125.313 cv
162.535 124.155 161.373 118.052 166.131 116.562 cv
170.889 115.07 173.627 117.073 173.627 117.073 cv
173.627 117.073 174.019 112.583 180.086 114.493 cv
185.614 116.233 186.867 122.989 186.867 122.989 cv
186.867 122.989 190.135 122.981 190.936 126.497 cv
191.737 130.012 187.714 132.782 187.714 132.782 cv
187.714 132.782 185.291 131.516 182.891 132.737 cv
cp
1 .74902 .411765 rgb
f
173.515 139.687 mo
173.933 139.914 174.532 140.105 175.079 139.797 cv
175.596 139.506 175.938 139.053 176.153 138.664 cv
173.515 139.687 li
cp
174.456 140.712 mo
173.395 140.712 172.515 139.912 172.468 139.867 cv
172.373 139.779 172.33 139.649 172.354 139.522 cv
172.378 139.395 172.466 139.29 172.587 139.243 cv
176.695 137.649 li
176.825 137.599 176.973 137.625 177.078 137.717 cv
177.183 137.809 177.228 137.951 177.196 138.086 cv
177.18 138.152 176.797 139.691 175.447 140.451 cv
175.112 140.639 174.775 140.712 174.456 140.712 cv
cp
0 0 0 rgb
f
175.646 133.368 mo
175.41 133.351 175.255 133.17 175.271 132.964 cv
175.427 130.96 li
175.443 130.754 175.613 130.596 175.83 130.616 cv
176.036 130.632 176.191 130.813 176.175 131.019 cv
176.019 133.022 li
176.003 133.219 175.839 133.368 175.646 133.368 cv
cp
f
169.713 133.184 mo
169.471 133.162 169.32 132.979 169.339 132.773 cv
169.534 130.773 li
169.554 130.566 169.734 130.407 169.943 130.436 cv
170.149 130.456 170.3 130.639 170.28 130.845 cv
170.086 132.845 li
170.067 133.039 169.904 133.184 169.713 133.184 cv
cp
f
177.313 129.461 mo
177.183 129.461 177.056 129.395 176.987 129.274 cv
176.472 128.379 175.211 128.698 175.158 128.711 cv
174.954 128.763 174.752 128.644 174.7 128.444 cv
174.646 128.245 174.765 128.04 174.964 127.986 cv
175.04 127.965 176.831 127.504 177.637 128.899 cv
177.74 129.078 177.679 129.308 177.5 129.411 cv
177.44 129.445 177.376 129.461 177.313 129.461 cv
cp
f
169.023 128.635 mo
168.925 128.635 168.828 128.597 168.754 128.521 cv
168.61 128.374 168.613 128.137 168.76 127.992 cv
168.796 127.958 169.627 127.151 170.585 127.217 cv
171.054 127.252 171.456 127.486 171.78 127.914 cv
171.905 128.079 171.873 128.313 171.708 128.439 cv
171.543 128.564 171.308 128.532 171.183 128.367 cv
170.992 128.116 170.779 127.984 170.531 127.965 cv
170.017 127.927 169.459 128.359 169.284 128.53 cv
169.211 128.6 169.117 128.635 169.023 128.635 cv
cp
f
214.461 179.595 mo
212.964 179.595 210.635 181.86 209.391 183.261 cv
211.458 183.212 215.069 182.862 215.737 181.578 cv
215.944 181.178 215.829 180.687 215.382 180.075 cv
215.15 179.757 214.869 179.604 214.498 179.595 cv
214.485 179.595 214.473 179.595 214.461 179.595 cv
cp
208.889 184.017 mo
208.742 184.017 208.632 184.016 208.569 184.015 cv
208.426 184.012 208.296 183.928 208.235 183.798 cv
208.175 183.668 208.194 183.515 208.284 183.404 cv
208.437 183.215 212.07 178.815 214.516 178.845 cv
215.123 178.86 215.618 179.125 215.988 179.632 cv
216.61 180.485 216.749 181.256 216.402 181.924 cv
215.387 183.876 210.331 184.017 208.889 184.017 cv
cp
.117647 .129412 .262745 rgb
f
201.952 220.168 mo
201.866 220.166 194.218 219.895 192.897 212.142 cv
192.862 211.938 193 211.744 193.204 211.709 cv
193.41 211.682 193.601 211.812 193.636 212.017 cv
194.854 219.166 201.89 219.416 201.96 219.418 cv
202.167 219.423 202.331 219.595 202.327 219.802 cv
202.322 220.006 202.155 220.168 201.952 220.168 cv
cp
1 1 1 rgb
f
89.98 123.385 mo
108.561 124.438 li
108.561 124.438 112.667 142 106.333 159.667 cv
100 177.333 78.5405 177.725 78.5405 177.725 cv
67.604 149.702 li
67.604 149.702 90.293 148.104 89.98 123.385 cv
cp
.501961 .45098 .92549 rgb
f
41.7246 155.639 mo
41.7246 155.639 25.6631 164.672 25.6665 194.833 cv
25.6699 223.115 34.5718 234.333 34.5718 234.333 cv
56.7627 234.333 li
58.0029 180.735 li
41.7246 155.639 li
cp
f
77.0713 309.708 mo
76.8408 309.694 76.6836 309.517 76.6963 309.31 cv
78.3677 282.633 75.0459 225.329 75.0122 224.753 cv
75.0054 224.631 75.0581 224.513 75.1548 224.437 cv
83.0313 218.231 li
83.1934 218.104 83.4297 218.132 83.5576 218.294 cv
83.686 218.457 83.6577 218.692 83.4951 218.821 cv
75.7725 224.905 li
75.9858 228.627 79.0698 283.42 77.4453 309.356 cv
77.4326 309.555 77.2676 309.708 77.0713 309.708 cv
cp
1 1 1 rgb
f
47.5298 253.991 mo
47.3301 253.991 47.1641 253.834 47.1558 253.632 cv
46.7388 243.849 li
46.73 243.642 46.8906 243.467 47.0972 243.458 cv
47.2881 243.446 47.479 243.609 47.4878 243.817 cv
47.9048 253.601 li
47.9136 253.808 47.7529 253.982 47.5464 253.991 cv
47.541 253.991 47.5352 253.991 47.5298 253.991 cv
cp
0 0 0 rgb
f
41.8345 253.128 mo
41.6401 253.128 41.4761 252.979 41.4609 252.781 cv
40.8496 244.695 li
40.834 244.488 40.9888 244.309 41.1953 244.293 cv
41.4023 244.274 41.582 244.432 41.5977 244.639 cv
42.209 252.725 li
42.2246 252.932 42.0698 253.111 41.8633 253.127 cv
41.8535 253.128 41.8442 253.128 41.8345 253.128 cv
cp
f
58.0029 209.974 mo
57.8081 209.974 57.6436 209.823 57.6294 209.625 cv
55.73 183.164 li
55.7153 182.958 55.8706 182.778 56.0771 182.763 cv
56.2842 182.752 56.4634 182.904 56.478 183.11 cv
58.3774 209.572 li
58.3921 209.778 58.2368 209.958 58.0303 209.973 cv
58.021 209.974 58.0122 209.974 58.0029 209.974 cv
cp
1 .74902 .411765 rgb
f
85.1997 176.676 mo
85.0156 176.676 84.855 176.541 84.8286 176.353 cv
83.5586 167.262 74.314 156.854 74.2207 156.75 cv
74.0825 156.596 74.0957 156.359 74.25 156.221 cv
74.4023 156.083 74.6401 156.094 74.7793 156.25 cv
75.166 156.682 84.27 166.934 85.5718 176.25 cv
85.6001 176.455 85.457 176.644 85.252 176.673 cv
85.2344 176.675 85.2168 176.676 85.1997 176.676 cv
cp
f
174.964 152.948 mo
173.889 152.948 172.728 152.814 171.489 152.492 cv
171.289 152.44 171.168 152.235 171.221 152.035 cv
171.272 151.834 171.476 151.712 171.678 151.767 cv
178.53 153.546 182.836 149.264 182.878 149.22 cv
183.023 149.072 183.261 149.07 183.409 149.215 cv
183.556 149.36 183.559 149.598 183.414 149.745 cv
183.375 149.784 180.195 152.948 174.964 152.948 cv
cp
.117647 .129412 .262745 rgb
f
134.193 120.521 mo
134 120.521 133.834 120.375 133.815 120.178 cv
133.126 113.056 138.904 108.523 139.15 108.334 cv
139.316 108.206 139.556 108.237 139.684 108.403 cv
139.812 108.57 139.781 108.809 139.615 108.937 cv
139.558 108.981 133.925 113.41 134.573 120.104 cv
134.593 120.313 134.44 120.5 134.23 120.52 cv
134.218 120.521 134.206 120.521 134.193 120.521 cv
cp
0 0 0 rgb
f
152.519 143 mo
150.439 144.007 147.151 145.883 146.747 147.415 cv
146.661 147.738 146.716 148.014 146.92 148.281 cv
147.159 148.595 147.394 148.613 147.552 148.602 cv
148.973 148.492 151.26 145.121 152.519 143 cv
cp
147.493 149.354 mo
147.035 149.354 146.632 149.142 146.323 148.735 cv
145.983 148.288 145.878 147.765 146.021 147.223 cv
146.686 144.708 152.601 142.117 153.273 141.83 cv
153.42 141.768 153.59 141.804 153.698 141.922 cv
153.805 142.04 153.826 142.213 153.75 142.354 cv
153.373 143.05 149.997 149.165 147.61 149.35 cv
147.57 149.353 147.531 149.354 147.493 149.354 cv
cp
.117647 .129412 .262745 rgb
f
194.222 280.931 mo
194.138 280.931 194.054 280.903 193.984 280.846 cv
180.386 269.71 175.684 229.25 175.216 224.912 cv
162.089 224.151 li
161.883 224.14 161.725 223.963 161.737 223.756 cv
161.749 223.549 161.925 223.364 162.133 223.403 cv
175.577 224.182 li
175.761 224.192 175.91 224.334 175.929 224.518 cv
175.974 224.96 180.63 268.94 194.46 280.266 cv
194.62 280.396 194.644 280.633 194.512 280.793 cv
194.438 280.884 194.331 280.931 194.222 280.931 cv
cp
1 1 1 rgb
f
214.425 246.895 mo
213.103 248.301 211.104 250.759 211.336 252.077 cv
211.392 252.394 211.581 252.613 211.93 252.769 cv
212.274 252.922 212.554 252.914 212.812 252.749 cv
213.92 252.033 214.32 248.846 214.425 246.895 cv
cp
212.387 253.627 mo
212.141 253.627 211.885 253.569 211.625 253.454 cv
211.051 253.198 210.696 252.768 210.597 252.207 cv
210.202 249.961 214.123 246.109 214.571 245.677 cv
214.679 245.572 214.841 245.542 214.979 245.603 cv
215.118 245.662 215.208 245.799 215.206 245.949 cv
215.203 246.581 215.113 252.156 213.219 253.379 cv
212.962 253.544 212.681 253.627 212.387 253.627 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2111.w037.n003.38B.p1.38.eps)
%%CreationDate: 11/25/2021 5:41 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3X+]pGi)`ra"-)#9*_q&<&HoW'HdZ:.T%!dL-Yq!!g!CA2ef(s6S&\1U^Pm7IF]k^"t;J+&+osS1.WFb1,.q@]=[9WVs/k
%0GEc\@3g6@9,N0WhpTrZdS\X:=X$otZn#RmFkEW-_IbT./(Y]abs_7q:eg9[([r\@]F2pEg>@`\3@J,uSb.q)c'QR]^=K4cXb;ln
%#\]c,j]>0T"V'C&"lH9pb3`Y_#kc*p:'I4Jl%saZ?]N$)$\eo"RQ.%:VjZaV2A6;n>PW4P?Bgn\7aNX8Wh3=sBR7_X:63;=^^m(m
%S>;QTJVT(eGTO68/KRW\>7*R&<YO-(>2l38O=&LuTHf[")<r;n1VF8`s'%GPs),*X:\\'<XG"js*$47H&&ADh,@O5i/5udoTEBkK
%cl`pU-XiiX%U("fdIupk9WSW>J3VF7\hHs9$G$;[mJ/2nn9d0G+&n(Lfu*9TnF+W?ZS3e^%7T)pUNKi<#upO;2Z`9>^dmd4fQ^CJ
%[/a>>_0e`P?EG'1R=)#\^)S7]UF<t9]#71e\-Q<SS$d8UZ+l^r3kamh/%`WYYgLr0qPOSkY^02o9`n\1>sDcP2H%LQXb8-.>LUXc
%i2c:*W2SFg#-b[VfL:rC!q.-d8f+>hk.9lT*![h&0%Dr:e#/1'Z-/Sd8WS?uq^F2hj6IdE>aTo>'it#&9lZWXla?q<g,i,ZS6WKQ
%B@WZ.a:hlH3XH<eQ2saak(6V6@,&#(T[#cYb`<O]N<0&^(B/Isr9aCV4.FbsbJM#[Khj9.T3<!pc0)&e=*#?4#*X6"2\pHS/ESqf
%]Pc6nZ&J-])'AjQlFr=uHln:*-iAtCZ<8`Ec!o4>(8#-D==0Z\Vtn!c;"]2W$fpnaM$M9mjq2U*r"Q3skEZ;%nIHDQH/WZmL@`j"
%j_$P%r/G9,;YZaDY0k(NEF/DZ^Yu!X2`AXrihg]npm^E+*tXD&_Hn+X49@'g;o@Kp-D*eqV@j?01!R4=<8hbub-U7;nF1^Fgcl6S
%P=cYMs0*?c&V":h9Lta85?!6Q%p08'W%#uiiQ=,Mr/KTQK$4Jp>7DW>p`#.M*:Ys$PM(YPb9Oed2)!>72(*+dnIQT4=H&B?EPo-G
%$..UUB\YDQXi\ROoRBsI-`D;)-V2d5k56(ZLqg23o/b0Zn\UR]2jV8d6?UQ7>*9_Ng]qo3AnT@FRdXqZbVIBV>"CJe)>cN[`]a(?
%aJ6Re_W^gcn?JAKT:>!Jpc8AP#1%nDSB\ER"E>*#qN"di/,`]XWb^kdb*b_"<t:VH[1%.;OfEW98P=N!g)ARKC>bI93iREA-$m(I
%aLZ#%R&c[Q63#nNV(,44T+Lq!qj7>hD>rDjbPskN.2gY6bQ#+*J+*Bus#c@WHX<Uo:]6VTo:t_\r\'Jon(kbV+&pSJ(tAN-s(u]G
%p[2Dfcfk;)oK:P5IkuNK]Dfg"EK7o]g(J@k^A/:[f.U*mnEO^@RtmUjJ#Rb,U;Qt>oj=fsDt]4+&LY8AWV>A4iqu7&k812u>J4[)
%^^!^QpLg5R-LOZZmlb-D1XWZ(_Bqk2oD'A*2f8IP+RL2.^bh_&"Nrk8;!&!(8"#U>d*K;'pKs1G2T3?]F$74c&7p?rT'9o<9G6K_
%TFM]_MYG5F@PrkN?iBdVeY?+-PD(&-;"`_HD13ScL/XdQcO]!Bhe4@>s#\e&Ab2A>qk)k)W-:B\eugqt+BSSSh"UG)mdHfD;Urg-
%gV:r',C]2hEUC(f]pogm%QENqBQtNCCPE^&LS4bgjfNpUE7A6\$Oqs5[#C?V,1EB9pNtJCIo62@VqkH!diC";FeaG5%7gVE*?rmT
%5Fj^=(d2&:N7f(-DUqnN@M@%@#0bK;aqaELpQ=pV;H6)=1@ni/PG4\/7QG'p7%W_?:&Wmji1%QhkN;qhmo$sGd[8GilaEFZcS2N'
%TJCt^HM?>bCn\sSR7pXpiXTtPgmi?T*qn>mbtg-DR#NA""51[6eQ^aO[t0Eq5S#S8jA\i_HA?+N]aEB9V-X)WA(C-0,5gWd(b0A=
%)J6i`g^Wn0@_aT#U*cH3@s-Z6UcOAIrC)6A3<98h1VHMoT'K%=7&EUYO@0pl7mI9)9D_UZ>7*io'GT]YN&A6*cn.X"bS%n7,@!W1
%,J]ED9gka#>["p>AD2VZ!n!+G,RYaMpX;TZ)s:ih:tu35=P)7h^J"Te\c@WMV*n3pfA&lY20_aF2<?%E8IuGtQPSRHGe/`J3g0_0
%i8dSM4]@s6NiC?W:GY$3D(OGW,Cj-XA+A$9$tcD6dX5(>q6%jWl'u-]^kN0%'kqmMH!5LC=9)OlH%`j5@s5RbcN?o6pRZRL/R)AF
%K-:[kMMU7)n-k`>G@54g(I)li_Mt"?]N/BqHf8iU<T#7l"&aQ3G?5u,OMkRWnB^P1iq9=g!Ch3QY)<pSbn!Yfd(T[cB9E(YB`*Li
%E:Y]T!/)X/3"`r4e9aCHpKF$RNs&Gh=>s+"Jaut%$_k9$$@<!i!?TQ)2H$)K6S$CkdS(Gk6s@A385UL8dXmn<c"']2OiI/4IPO)8
%7":$b8,`iC:RFXAV.?;;0\'lT'QgUQ,[aXl%X4DQ!p@iNI2!P?(a)?X3!1;dck.t!SO'f:+&hi-qF)4nOe2%ei#`d;5HVF>hfTo8
%s&*Km0TTlic)J\2ih6k]F<u>h$j>B14<tC785s$2&rrK:49rCc(thSB5MmKCc&+mec0Oh4dHc.h3@Q?ubIt0*n7T0kSR)mA(@_Q)
%+KG<"&sr;Kc5?jP%@\'A@N+//Mn#M))>&!PGEJ`@%-.]m"+k<3abZ7>Wl*1W5R#64P=KEKX(KeG;AjrXVu*#FUXQiNgip4dr'uj)
%\"Weq3q3d]BnJ)MrV(OQ8m-?-%SSo+qoI-oLk(^XVEf9]J([3urjY^i/!+U6P^CpaBJSIf1h1L2/hWdk>uq&,7<__P[%7>m0%4Q%
%+P20jOI?FAXDkSJe/_DaG8(SakEE,l-GXL*onOCAk.fX,7d5pt6F-la#7E8<Iag'D*sJ%!(B6,*8F("*7>M(1n4@&UXGqUcFM2EU
%pTCV*lVXj$j%-Z?Y\?0$MF)GQ\9CMM%/">]U+e2&nV,N`FkFUaAsjoU`J@q\*%'W:b)*@98u"$>#>ReH,)n-iB>L2#'VS&lJZp%q
%18\3HbR#l?UMWFEXGp2NRdnj-)NY):XJ7o+CirioU-A-=<>%q9HamsC9G7_/"RuVq;(LWE1!65lJQ+lUlpiKD&1/Q\RH0o@_nANV
%T_/KKKut;J(?3B1^rTTG(,Qt]g!P"Lnf+?q"^67XY**=Q>ce[f?C,L5/Xa`Q`gJ<)&9/e<kRJG!><X1mkT$:6nMBD+FJk9BPdhe/
%^rJc*`N,XP5qN0$B@7P%p,8U$*sqrJlT#`M#RPS(\1$"A^rFiXM\68be]D)Fr`=D'c"<@GKg#pM^847cX_H.W8%-(]/O6c7e)ZDX
%Zl&D3["T$>9Q!*E/&"@gd))4eh%':g%4F[_6.a8"i7GC'b4Eoj/sDP8Fh0O,c=XFA"ne!Z[ajh&S-.`#:WgLDCC2BZXANq'6c=a_
%LXmZkfg7f.j7YifTsS7#dh$MUM9i$A`e!buO.SjQbO%o5ILpY>rq^;ViFa)V[#GOS.&<i;rLk)b@SZ1j*JNI3P9nY'?>941!8+]S
%+F,k7':AkK=j+EQPftY8?K3%"r,`>cMG/[si"h/X<Ibb\/gj1OdX-I@Al/=/%<gRrXo[M>#^$f-(E&L+ksdL%Rm]E-@>V3pb\K!0
%4<YUJNkcQJ`e8LG<)7&6LR@(Ca"[(F'Tq7a4tTAg=g]e@`S'*536dtdKaIcVl2q\='H(K\IZHK]U^i*/o;+^d)nN,gYnG%)`8_GR
%/Q*)FSF#o$]Pd)kirlY($NeY/3f98A0EO&X/uQ-66j4S*T[$IMMK#,07>HOa.O=I\8@pGU.;l#*="t&Q=,F(P$5+FH:8oF8&$IK<
%o$ON+N@NT@e:)!_cOV03MNOHl@V@YMY9GE-"+**mUf]P4To?&J:(ssXmb2^pMF`11I6(W_SsVE6oF^_Oabi,W"k-i>pf"QMV3!I0
%DGFb<H@+m$dVpLITfn"mJ/F3>;Q974d4D]`l*)"uY)=3VNin:4P7E>r6IEXt:X?mt_/r@.c)@e_!._=IdaVq&O@Yop4F8$WDYQi&
%p)YWu/TcNc-E/e>_.#gDN_NET,3m,=A<('Eb"X80#+L>*.rD&WbOY7>7NGd$f)5!B'$p;pTe1)98G74fXEW>(ZW9%PUGqK(iH]!j
%"Qp7!H+ZeD*lgt/1\0a3[p!UP#^M:uC-iuRj"*fuXEo<)*[4J>24,(UM*O]INY3DhXAtKU*2(_>###3@14GQ\6hoC^ooN8;A@k2P
%OnEjk27e<),bt:/:I0ipc"ZG*&ER`g%lpKM(3H9\;O.nDm#aPTU29H\dN(cI<p9bJV@H>F?M\gS=YtnTNKqmhkDidl_D.1U;t`pU
%NP;j^?&PkI/(HI9*?DP-Bs2;#Lq?rpmA7mIR\J24>oUkRQL%*@5WRZLa^4:\EG#_]UQ3g$`9D]aUbYbDi>q$MOIWq#`!g+$`U.TL
%P@KJjSP&EpMX!kF\SGm+<DF-k2hf-)hDK(V@LF'Kj,/!ujJaRb@h+D6VrJC[`)a+.o6iPZbX(=BLUgm8W_c**/P[jlnPfh(^(MoU
%_[m@?>lX2,84W%=_s(_]Ulm^&TnoY*D);Raa)dN<$Z*E!1'h(?U1ApX<o%>?!S7V%UuaY)0-0*[_E@)QD<ti$<uE``gA:XXFYT9T
%7iG%Dc=/!9Fhu[gb!5%r_$<<!"80;5-I(kX0)J>L?Jc6O\V&!nphf$E#R)FgV*=6_*P4^c1&['sp'1J$aTU3\3QAs1Up"IjFX:j+
%+ILDqi]+e5%PHXE(Q)6Z.\f-tRk+_*U/(0i^=pspI]$6S9Ng\(HHcgfY774k;'3X)EA3OV"6<D%j(fAr)CDX$Sl&^qQLiT1A$T>p
%\s2E%4>(R)''"L<gNCZM8R9,(,i+NT+`q0:/s,Kn/^TAJXs_WDE>N_\=g+/>[(=?+Q2j_Anh:ZhCkha"_rMA#O,I6W^F+X$MItT.
%)CsMdX\Cas]:8KiFi$[lU"?#<g3pT6/>Rt6@\*h8`fKaZ(f1o*aek96dS380p,K1>>Gq5&^sn;3m2UmNTJ1HbUILF,BMqV=b=[\`
%PAQSCN(S:(=2&VWJji`I;d/:FIJS/o/S^O.-KgKjp>di&l_$FA),mr`+mlOAc0Kn9"`5G_hBm+57L^V;fSo%d"@`J.RC5JIhoKNC
%;am:QlthjKPAmY8,Q!)@>r+3QDomeu-_2esUt)ggrSIM;qAoCJhQQCE^C1!!P,%GF;;JeVq@gPlDaa?9^Z0?8A,b=cmkNmOr6O_/
%s3K%T7dj1p0`:B9FV4ZB?em;K^[h,+m60Xt1HJ1`eKURh<?JQT$6J$BZ_2\DoWV1Cf.PS%mMC1m*4FSo^\AKo!D`B):n^k-e#7cp
%h`a9r:(PNbGkeXCCY*d1kI&)(D^A\jSV;pP@A-\:P^\A+`51,.pp->jTi9^&P=AB!2W/q[9I_I@=3!.b0*dIj_,$aWIFWi-eB`j3
%[77"I!(45rhnsK:*bh"b`G+kH*)qP[Jf]"Pgb!r0-NW/)gE[OC>An#Z))dq+5RXtdAbt+&;'>EX<`aOu\5>t:(J@#ICO-q&k4nD<
%<Ogg9SMfI"QOV+!dR>CZ?^;%U9V^FV9UsUIj\B/MSp)k*I7B:%k3,QKka1J/C,'NMNn^C2f^5S;WT25-M;udPNo4fsiu?qDTSiDs
%9gg5.D[u#$MsJ<O^hr_pWAUb)GW8F2*#Al:_trSFeEKJS-a4CV<]R5sS"8^;CU[U!4:I-*mN7_#>.N.aFGCfd*!VC'WDF(cIl(Bg
%(hLcl4L%g2jb$a2;+kHSbuUru`9c^`OX5/\:VRj?ELP_rp?=f%I4@oX(k1K)$>AHf2Cm]iipTdqYs5C7LEfU2E((5bqYF<XAK(L9
%q"<*`WSGA&.lKG\':\LYmG@8[XVfLL>cE8J9E^=s@ifJ5<rT(_X71'KaP/,6[9Fg$l95nU2]=u3RDNO7>\o'n.NoED4('^&&+N`e
%#O82`8?\T5FLci<S=6L8NFQY5HI5shHVeU\ZDHP<AZA%MMng16d/@1;N+j,%j/6l7Q7ado0rCZQhUZf.9]hraoD%MBVGJN+/99@g
%p_fWdXO)YR1$7%cHF!A7mo$E5).Q:=ga$ssNu6@@d:'e0j.%rsfP3@j`oE^(2V[=QC.&lN/V;u(g0hK"iV5uaXg(gi1k$qg''&.P
%D-%2SXl+OC7u'J?hjW&k$orc?B0e>t2o9KMTOo/]lmmQiPH38p>9sR;`_Wg1jm].O3/$TH*E1Wr2Zn-N%)s6gn78&R70YrE%_"d!
%j''&l#bQ,K*5`Mm`c20_\&WO@%PTYp>!6[)&2D+j9"4#$C@O9*\P>0Y&k:Zf]MP>u8Z@mjipqjo6-eNc!Gpi6o>K50KQ?cKPj=sa
%4Hu=jEq<+FfMq",g_>H_kD]HCQ1BC+e=;e3/r$X"_I+uc2K^(ac"";0/2rXOk-<](Q5^U_A]!nEq=l]nf)D8#`Ar:B,._nO"#4(D
%RS6;['9=?D*UfM`gXk]*BoI7F":*1P0c,9ld0io_\XCk)[l#i4cmW,mHi:;*oE(Tgm:N[=<&<.ti+2`0[Ia!%fGZLB)&8iS*1^3E
%`L&I,*9()Si[pVQGa`n]AGq$HALaMr[g=+_Y8d?qMKk)>"3l#L4=Gm'KqKD5-.lFLG!tInVGY>u"h0O.kfn*s?X=g&p\6U1ifT,A
%h-'pn@jW=;m;gRpeuHtq:lQ\sK2lf+IRa5ADZ<Y=<PobMYZk[2!tK]9>mqEAGT=@k-^;YIj(F<br4L!_R.7'DHXktuj^T:]9%DL1
%]QDO!5<"O2-*"RLNR+/eM/[cMcY2>:K:,s#\7'Pj2HMmc9`pVQ/NPjP6Rj45V7X=a5E3qj$Vdl*Hkf.:Y/G2#qs:CC#E;XIZ4aV*
%9P1:=o*oNu9pG4e$NG6o_]HY!-X6AJ3-2<9a#Hh(&:B[qK5&HsmY-XY&2?3*hTfrcj,]40^<>^6mIJBMC?8,6%"H8f$.$*Ur7ed,
%(pfY"biXE9e:otVqj:had;88]MNKleRP[I',hU%Np/Hu<pPkhJC<+^>]&;s&/H3HYX':udYuD4mX=4*`Wo@'mhHH\'M,sr%:j3Qi
%L<S*!ZT'<Jk%\_\%*Mn$c'?na$@Ig)jRd,h=ZAaS4q!j*A"A":Nh"l=mt*]\@gJu%\783Eie;^`ch>E3QooM(qdUM,8b]fT3.CAp
%JqEe%"b0'tY$9DI9&gRp1)"SRAjWQ;+@J$R!LR(Tq%C`ARJ]3/7kp=UZBmkb)O?H%1>Ue.B/OP!b&,BV*FkN"k49OnEm*#\=)-=0
%5p=2@]Bf^okqkCT6KdSf3O<\B@jQZf@Ot#F7ALU?$(,i3BdE>c`5"mLkMu?Zd`4=b[4Z^I3\H>'1\XADjFlj.(pWf,kdMCmR<\ZG
%k@Ep9hH^c;q#'7Wm\EEY[8r9LUC.E_G,7?2I4L27B]080g%.\8&nb8_'t^SnSB'D]H!Vtej)&cdhkF,bcAG(iFl>b?O]1@ZCFY=*
%ieSG7;_47(9nRHHVGm,qAei3c[;'\Df\5`;+Xm@2r.r1&i#/nR7SFnU9AURi@SE[:kGB^]F^*<CQ`=I*j'5/!-l;SlEK18lMVcp[
%@Q6PKD4iuJVb)hK$,,G=26mLfV+N9Di;T>e_$jSm<g]_S-ugRin\NJ]2rBJ_.tPol-d&)EbgK7N30TbTiL[lV-ulE[R_#ULYq4#8
%-_9ER5.j,;MfOa<B9r7c`0nifS"H*FCGGbI.G9UlbGCWq7@EU5q,aZB/F5eSbgKg^30TbTP;?-a;.;NdPAWV*Cd=EW7@@]b2G8Bo
%i_3tDp"QS97>YT'VBglm4'--nEDK:[6(8Kj:A<jqZ*rQ7.5?604A68/robbJEs/gmIpnB*ml:9jH,jX+?ZGYXdrMe=XPN)'^L_#[
%f7$;p3HMkL!sNbZ2V2_c]f$UOD7]h1\[sbDf-XY&Kug'2XZ"dG2q)M_B5R(<c*c81X3HN&Mlm>VroS&5e#;&2T\t<*`LNq3^pt<<
%>`@IK(r\bV>`@fSe1X:HV16AQ@6++&3XZ00ru:DqP"%dXfHA4E4c6X;/lHjbp"t^7hU2Z[[;0^)R'oX`9%@Bq?E.?351,t(K_7$4
%j^MNW&1Ms1;k)\-10To[rB;#R@;ZAr@7p<3,iE;C5/Z80G`_\V]8but^AP-D^9_hD9='Z1^5S],<*f>UcHGtnhY8j?Y0gCR='/8C
%hYh]JRJ9nG?O5;&0u<kp?Gea&l%_jZ!JO^R?>G/UIF+#EqXdq>"d?ZVFR9'X_[=h6XRb3.V"njWJuk95WRh3XFSf7#CtR9\o8V#t
%$f,!N'4VMlUu^eVY@G)1Q'lm)*&L9ib=^EEUV`m)4id9D-N4pF3:_RT3cgAKfTRoef55HmR=d@Y7WKC`,&V((V^2D5TCf`[gZuV\
%E6%'frHH!T4(&#YYQ*I2#<H5lSa?#V;OY)s/<$]u$?X#EH]-:uN3)j#jGQ4aCVI2Jch,N7Hm^X4RBQE];9!,2f6iLQoCI-qQT\$%
%)MgPOM:Vkb14s>Ifif,<Z"b9L%+MdEB01j>CH'N^auGE.?$]<:#rb58^97,R/=1.%O.StRFE,uc!p^$&]/I[)qC>7DFKm<RbC2UN
%A(mbN1C*L[ffVV[c]J)HQCGi%)-_fsMaeOa\%pFG>JQ5pMqZbV;QUqI[MiRoX4@QVf.Ok`;eM;V3h*l/GB-VpZ!=;Srp84,-.@dW
%5S3iE<SFS@h?2@s(1$L>ps+^NSZiO[@cj4*AT'S'P:KM7]8M8`X*[cc*.@9*$(jhuDq;f-q"'Ku3[J1Zo+;Y,Nr[LHQBMn8<3MV"
%)^P:bX%]mFWR5V`;m03=)bmP@AY+.7-XPqlQ^^`eSp6[m`/@6oE8j;t@4;.2:V=mb0D!-*4RquL9"^BY`:6d6^ctU;bnEW,)p#8k
%Gifm>M9@$tBN>e=Djf#=-N;)3k1eBZds]n;\^WYK9%TqdVGRf@3MSb%pIrLc.mN:m9[)3`,\HbEM>/$5kEek9arLCrQV?27ELbq'
%1g/CL(2dQ<ms*(dj-0\2F5o5'ZN"8fNmkMpIKS=c/S>[Y[kHS;CBe]a3kc#[[D1n.hYEG;Q_mV9c.K#n(fuI:O0_W>$(:YMm'ZHV
%B%XuZ2o9#ti_5=[`HVc&0ue!2WR)p:iB"<l1P^HtD[sO38+g`AquMYuIk_0&'kK*O<4uEg0PQdIK53Ep6^2kL2I-pK/6n3N>/o"c
%Bj?D_p-Eg.hUZf"9c7G%EVtf#F>s1<(D`K`*7"Gn</e4";O*_f^5M$Ps-Vt(-6r;+k';pMEO=kRN(Fd2D[,bLETSt$A'FN]PH$12
%KrX`,`mbZ5T#[4a4@UiW[>AYXZP`:VjqpW=`5l"SNCt.%1)&!BkDc.]$Hi7R;OlS4>]8t^3mCIe]f+DajT+HA4k>l$dDEB4Cqk8E
%f^3Lp9Z=N(k:C;$q*t.]*EEPf,-nrR[l(X0mC6/2's:1Dp7uN/ge"IbMtqZk:T<'?d>N`gZ1E79<f(>BWRu(4A:A)f/:Z^2Y=tD0
%H\RJYN;(Z*C2k5Sg?m-o"tpITh]$[nHuAu@TK$i;J+20b5F)"(BfF>kA\dt\-3[nuWfnJfbc_8.6_A))*b:ij*R?.uS^X_C3kas_
%h_aGc9OjqXIDqVuI*:+eD#&t-G>kg//'_++Hc&nm[,MKG.C@*?RF@I[O0N8-l;I.Ab*]*3s,Al/4I5jdFP]-KqmRq0O65TPgb2':
%0l4roR[ZFSH61>UUUbY,2im,#>C3D[>bs-.nQ_#Uc,7);3&_B2k2G)XS=>:TKAkUT>-3%s#i`q@jMu:]VII)YEurS#9/IHCo;3e%
%MoU%J*RE!_FUU"N/l0'1NtLbQnZ<E[GOTa(YJ_^PK\E@D!+nnT9`,&3o8>d[9mQ]/$SlU4bB1DknP5(@ME.;c=&e?o#e'PGadZr)
%TQ%<(?r3sH'M>JLS$DOpc.7qrS92@mGKXH[`sGM;'[=#TDpfr%fbkC'\-c]:M4ObdRam)`V!5A@09VhDV&'*]R$4]"@U,=p-C_,;
%l!<Up@Y=Xu[l(c7qo5)l`d(AdNse69?`0gsli]S_16'%%@pM>r`mkYLYWg5+7d&9.@=j2k2-F2PlR<k'-;Bpd+QCV^[8<_86bNUe
%99j\%[?s_2gR=0:j%cPW%,YN+]H_!+fmV#.a:@UW>E6Ds-O2tmEEDD&WV#=jo_-b5n`],,_VA(WCem@?h$s;O_()oP^DOCJO*:Dm
%HEA+BBS,%ie*IdnIA48Jo\]7sNg1%!SYCs^MJi3`q[*!?AhN70hgIY=RR"X'IYQ?;%-R9J\h_ZY@%l>D6OZ&*'h:Nl`,3]p+5+;N
%41Bc!9!-9/)!fu^;l,lA0+Zl0.8R&'>dp&q7r[h:T#5[e`q@QlRN';XEP+;M9tG>'A)J`j36#U5\Qt_gG]I[@-Ud\.CUS4$1W]0S
%%8O[e1Rn%3USF2KNYm*^a##io1O,,09YMh?O1eZn<b=/&B9jP'q8Gb26_^JT]/a=fcnm6C8c[,T\34=O<;90]mDLM:1L[53_`i2c
%j(Ct+j/<;jnCAhrEilT*MD$>]:!DhS^=g4HA&a,aWP9\<@$ZkqY/bKk-iS"?oi\e0@Q%.u;gc[iVKJ"L-aRsenI7g?M0DX+DJS(3
%fUDUG]7400`&L7H2%%0Yo;_G^oVZW)_5G8J:;'#SA9iMC2Y*]a/EO)7OC=^"7H%9d('b:IOi\8n(ooAJiR`(U><Sg$=e"L,e\]^5
%Wf^FnZBUh4'!okq:ZlP;gMCKI^,!melK/WbEUZNg8L(/lcf;Z0@01]qB>M^R)=u6nk'G>E+92%fDLBrIT)/4@a?j+fdcL%ld0.o8
%iS7C":.oV9g9t,_Tb6)L,tL\n*Rd"(Xqj)P6R%mcd-6"]H3gY"FYE%fSd@&Be``43rboPHcTHZ"=Dl%F"+%Eb$n,D_SV;noUYWRV
%likqt,&AM7)FYM'\;(B>RLRF$dKSr:<V3(f.rW5lG2[J_j,MSW8du%Qd6!j_0XY]9LGQGXKWDI9`>%sZ@F.g2hsVZ%cd1%!ehQ#D
%h#r"N;6Be&V/IcH.j'9`!`3[)J9CR:9h8lW99jf`lkD2f#P^s\U;;=t",%Z1YEWi"XoL+<jg`%hg[r;^(jtf^e!@/:pbn+3oHp*;
%5OdEKq",;/Ifh/5H\i9*N(!1hG^+o$!50(T0XN&E=Z4F74sD4,Xmu0H%*E"Z(%Oa&cYbN/Pn-C36F548j=jsKVt'I.@^#OB?iP=P
%J=fMZ4Ioes7]9U+["gVnPNF((a;5uqo^MWGjfDM&VZ+?/9'Cn6f7Ou`Y#]4;+F_B8/`;M_dgZaOhSHBY"qCVFlSmnposOu1GHAp$
%e]_ssjZ96QF?7i`0:f6s=.?,FK19otXMoq2pg@n@g_ihmpZp>(lE!t((Rg?@eH]XdV8m"[T5YDF?.%[+-XsA]LtUf^Zs5+dKjudR
%U64Z6^QU,GG=7D^Mj@,udCOu[T3.6gLUsriHrLH,G-b2Lr'@_E&[T-<lJ)4XJ!O417\'HJ=`gtfT[/<M'GO8h:Am-4k'6fIW.0.V
%ZR*c=o=l[1]MF-H1s;`4m&4nC_S;)*0IW!LEP+6jdNBb&`kD>]R:BkfG'>J24sBOf*I$k/@_GF#`mB.'m-W,84UrEkh+p`Ipb<pj
%!p7\UC89p4<bm9XZl>UG%N;1%nYo8%b[@9(nK1:VEd!f+lT?$p"PC,=(e5lg"\%p^I`#Rks*6;V7?npN`H.0iI3#,-9Jb'f[=D'&
%Xs`dOi4uQ82A1e)YSjk^ObgCijQR[LYno;O'1Y?p'fJZK.=7=>$CeGD]<hI@YJNT;<H#?U<$CT:)r#7,]k@We@H+LlDqFm`aHXTH
%LnaQ'Judb+7qgbRO/7='Zs5[#b"#mR?#C,i5LhrseY@7UB;C!NKaZf2TRgaC',QX+1!qQNe--jA/K#uW1g4P"TM\D04m31c.YM6+
%93+/WZ6%MH&C"+L>n/&<19YOgl\p:@fkIi,1p?b&$HaZsCi%WW1oB$5*0#Vt:t22PAS=+>l_RRqc>;'IXY0XMG7s.`X4AGA#PZ(N
%hXtOoM6dJY`g)OXE%J^J%?E*qkbL!YPQB@b6Brr"!sbq>)@\->'R.K*)nr?'$<K*HR#=G9_sM&3=VB-%pFpS"rmOJU(JCmgXAgg[
%ZkYG=bHj6^d*e-fWo&HkEL.;jDJcT%3=a6YJeh=@L;Lr*Y"=\0gS[g"h-(sMU[mUt*A)8_OVi8DopW*`+r/q7F-YV(\'&>GnCM(N
%KbL%m,^UO<4bRJ@&>nt\Hj]FgMMbg=T2o%\N@7G7Tr2jo,Ym@3UD&8pX-<U0$(=3g)NfV:[rSGd-CV&+m4+'Zf#g^W*eT^H=kd+7
%m#sZp(o<'$&MMl>;Dk]uILjUVHYrjW$rpdTnj0"=/BUq0ij`9t"(*o!Dt#n$M1b8*UY[Cf;5<:cmC#=/^&B&!$LA551n\@:,DTGN
%Qg,\(R'l\ojP^/RgDhuEBU-0kpmN7)o/\3&<pQh;^nV?dDaB"6DP`h1fU=J1CKNRPBI-uug;tYD/b-1['ME8/atVeYQoK!6lA;'H
%&LPr.[=riYe/Cb(0K@(j`dY&?qqRDJMeS%OW6S.>6+*Y-DSO<#N.G0Ea8n72X@:9?TN5u<An(Z,pu\,e[2?U5fW8j[fEJu]/)@b"
%)o<UPh^ieG<cQR8[@G1Q4\uc3g`r;kN"-HCZ,,.=bq,ErQDGTA5oMUJ)Dsn6#"/e)UH@eZdQ_.XFO5<c<IGt__IBKMM'268C6,,Z
%di@J>R8M"u>3cMdU/WE^;`euRR%,R&:3tDZA<'c*fHd5:UHso,S(Wk_K75NrNsVsK`_Yu5O!0]+@%lOa@J3E5@(_-Y21cXbb.m4Y
%UDjASI'&s9W5kQ9ekSWJ4m=U14pLj/!tKg13Sba$Y8?/b2OddEqAIZNC2Bqngl)hZESRY8FPHkkf4]mrg>!;1.`q]VrdJ08gSpdr
%&eS2S*29Y&l`AU9"DD;JM.<:AlPGhee/;H>gA-#O,CAfX?<b,V1p38LjbI9C\+t2'"T:X[]/c#SbuU5E)`AmKi(>Ua#NdWcc@.$Z
%%Ie_=qg<^9XZ'.?HCe]Em%KVoEhs*S\p#@T\C+b38)^h*-3(-Io@%3l?1sMHSs/_7GM\-d2oR2B4AuQJOh=",CZhPb36<V(c-f$<
%(h*pZVF5E7>[3T2`>uc[a9b;lrLk(&ULGH0G(q^PWfN8&B3=Xf8;Cm0GQ_.o),'5;PdkUSd=O_3"3RR!NPHp-iWW)::YWOR6$h[4
%]ju,8om/>>hE(m2#]%+UJH2>_Oh0jYCUJp=K03+NUak26@VClr9)HuCen'UaL5?!H7CMHlrki=eBs1A/ToHr^WUqF6"Gt$%iVMPF
%K&RbHf-E!CF,i)9lZ`rpMb;Oh@UQO2^#Zk=E"R2NBITl\CQVa0nd(N/@7YI(C>b9BC1.6Ws/Dob.a"KPm<+ZQ)"4B+NA93R,71Cf
%nRsfpmSKKg'N;CD3rWWS'JNX_<X&BJ_BdGU4CHQs%gn=a61]iDAd%1fNp[tNN"L:gi+<Ks3AdXl<(E&ff+t.QX.=jooW)REM5nV)
%pjEih;Q3!jWEXG!T`t95LnoeaeLHjEhudRf%dKUa>/OuLDl/ti!I.fNH&D_'UmJ^5G5QbfHQ^Y->#?V91BDXR`!qYMjdM(3L)?sc
%W%@/a<iOWWjs_IWFlPa%A$?NP<7_Vfd&>JbE5Hn.Pq&*?B^MrY33H(&ZCNhd2]?Z^Y+Gsan?\e8*(B7$YB>f5f3>b/%-'rMICU1.
%ll!q7q-hoRJiFs'UQ&TpB..J`mBbrb1<":IEF.tNPh'gD-qCRm6iE`+`%MtuN0^baGS+?KF.=e5F'BY`#eY)_M.8(\%c'P+%Ruo>
%3ZH^BA)1.>5,HmK(85$/A*`5C-QOhCC%#N(]j^^'=olq6`\B]QC]LnF/rej`-rI#]C1HB3Wi1ALC]#1(:id=.WC4!3-ft`(*$u1*
%`m_Lc1`VQ'AE:g"==9ZfT;+WR#5q^>'4$$c`-P6#Q68C%^5%'nO-f.n0\r'_q3=oFWHqQ^[X]=NeQ*b-G,eUMh"Mk\IV2P<M)Uc/
%NUTBe?%Y:X#V.!?b2kNqFmu,T>O[C-4j<"`p#>*><p_?I>H2"hi"KDi&G53^=.bKp67/-m(tJ1KUK#o6,oi[2737j<X#6u[i-'a!
%4WG3kF^&EQ"dhl.mO+>4"XSaiR"2CjT`W"4BLk8RcqO@c)-.Eqi&f@;W$[V!X&MlY'qLRWd):]e3XGTH/-_saYF<rpr,-PgSq_aE
%g5.jMMMYLo!<E<eTj_o8(I>$h-rmfa,/R"I'@:`sJL]"hdAgVBKeQAu`,Uke#@-^&/k#hjb,#.mh)FkW&e'#_R\L!U[k[;Ro`la\
%_l.A6h#We0M0AP!:D'G+@:DqCBXuJ<e]0(M-uDmsPp%)PPSu`'"k=f1J_82W45*'MAb/3ood2eJ>mgUl;>M]Rki:\XUH"-U*2E;8
%J'i.5=hTV2iJVPbTkmQgp#K"1g*H!]p1i,]iNc=]KK1/-mmeF(GT&j`hBRWqbgi$%(8)F)X9$pe.m>df]"r.B-sY\Q7bscQ-rie#
%DoN2IQ6HA&PjQIRC8G!elf+ADG3a<A]7W\koNA<Vfa[U^3ugStdlbtaFP,KY``:UjfWchE)0?!WE>U8:&^ab.g'rLa*OS"UVS-LX
%QtRK!A8B^>V&+<45buhRWK[/s`K,m=kk*h%Hhd)Bkj:*Bf*'t#G=gVlmtgD;LUt8ulAi[OE<#_PG)RsGf.)gN>U>c<8D\Ni"]/S)
%1qKRDpmi>`Pf0sRleFbXa3QI%DMajf6]Vfs8^^qU)mtBmT8hmt%_P*5ZX[<'HX_6MGJ'6lD?STJ)Fb_?(rji5>$[I4l??%]7+W-+
%*6T5pP*!bfXAN^l9@7j\B=$2\?^qp_E)\4&[[P4_RrOr?VTqbD1Lpot)a%=ChFTPZ3S#e3o\:OZ"!>"%CD9YBj?1Qcn^U6]_YDjA
%Nn\1pVR:1)#U^Aq&*iNVNsH@fo,1<&O3L./3h/gh$;W;/Q*Y4%.RssO_/kpYCa\/R2Vd,h@GGo2/:0C]Dkb!C1VCMZB;"$[pu@`#
%_M5QJ0Fa.Jd"o2SQ>(Pec^>u?ARGV&Li.I]P]X.#50iT_GVTL)GEK$\=@sp(gMQu[H0-sZma370[rLo]hoZ0sNJEq^o=`+KCMQ/&
%CqMKcbP&9;-^t?:>(.p8p[P/*n?.2-?[fRjs7u8!1:d6-QV?8J]9#^h4C<VN4h81Qn?`!6FH[D7)D?;.pi*-^?Vf,<Vi*<X=F(:g
%(;-Q5-fIuFdIJS!OAB24qR-_QmbXeDgKt:Lcgg<:IEbmNemnW(^kGS@(H1f!J\J"pQW>+jX=Rc>&(9=nf5p_oq@LE55W;L-VUG4t
%b<7DaE:e8:C>XV=p\1rhG.,m_ftadJ<1-B"XZ,4V\k,]hfs'uU^V7Rgle>bfI9XMu!W;M"7U2NBkUY!!LTrkFdOgR,Spu(]ds:E3
%0=T8&N.q1^>W\L^Fs#VJ1)oP7l'$&1V>PN!ScF/AI+gcrZhYbgIeVMnmR>n,9NWNe>0oB/?nK'Z]G.msCJX$ZI+U9i]Jbh"r`lV`
%BfpC*kG8RLAGt>2Z(5.GCg:!^X_F4hFo4U[7M<Er=!YG&oq$_sVfs&0S](cNp"ChqYr][m_c6*=p^HYmOtODOM'P,AKdSrPh#Y.+
%1ms]NO$2ghI`d&,H2%:dI8kU,SCub$ZtVoYWJb\ef5cqT*c<X_hVNUJq<34J>\t8F5Pb#UP_j?Y\(LlE2f(L+K&Z@O[reHidEXtt
%mi4=4Mo+drl/Atn[I(Y5o?"J^"a=g12o"f`GM7bC5<#a:^IYLjC,K7MV<[Zso^Vl-eSOKELpoj`Q&gu(TSFW$g[EJ[R4"L$?`u@o
%S?LU`jb*B/D`iAN43_CCgLnP)G5B1i`H.^8f<ri6s7/NpVmpdaR`gqfPc[V^/tKQ@7e>D-2[VY/g6M[E"_HZSF6It[Q9K160@qu6
%ir!NECojg'akf0RHg@Ybh"ge:/!nrDHdkhn7F@aGbWh;LX6+_KEMH?%/ejq+9dXq"Cgc*h2OSsj]S.S9:]t"9pLte]])VJ.o%p6n
%O-lK;$Up<PY'e*)MtrX,BDcl.XI%P11fl=mI'eo-Sm5#C/:ZAI0&FqA-gul!ZfI8W;S;qs5b\tJh)(]M=!!\m,ZhI9CWUoV[Sk5T
%QOB5BrR[ZK-eCS#IncfcelS%S(SumYUN6,bBf=d$Be?d],d$bj-RkB(4AS$4(I'9Qo<aYPT'TTO5ArbZDSA_l:2Ug1d[0%4jYq)J
%dA,k0aiCS,?6l.Bc*_(oo3O&;rNLO8gg4mR8`gPu4\7hAWdd_1*7Pdg0@nnBjDM2DRbWD*[[K<`G'9$%cdJZNn]m_sHtBs=Q$hEe
%\r_;D]>'naJ,8XI]D;6qQ(.^LZMZHQj[@s$T"R<K:);a<mj-5;O*6_R[@iet=uMru/"?"A-#3abVo`k22rBe#qr69qE[PNR/ClV(
%$d4sWjb8uC\$$RuZB(!!p#a\h"_04<>-Q5a$?WTs^MZ5BnFl=R/8T0(5;#(0)a%5IdWkM'+a\KV]TE0k_HtmjZr:;`rV5_eiLm\n
%0-$6a<Yo)M?Crd]1SCG&l12^.l#H99iN*)dT5X+QL!hJbTX%]"Zqs!ZG-IIeh,hn]_K"V]ij/OXEcJL/p1A=CfQjo=>49*m\SSB"
%HBk/6pu'?Hq;RU5YO<9Kqp,cgT,emH`SEIS%i5a@^9e\P^-5e/I(-V3GO^l(?W[^HK>qAFEElZE.UILVDAK9Cfuq@sEr+e@_SP:(
%4*U.+0CGoiIX6:[fR!)\N_I0eh!mV#I_54876PoDRksNiH"No)n*I0iO`uiR2]pn%PM1D1kMsSJ_`P]sieKVYHS7#?>^^=pn'kQ;
%;bP67p-\%UC&./qma>;9m`-Vp5H$1pXn:>qKDjn%9,ZdfGj4JSbKH`q(CsT6Nnr3KV0<<L[nE@:=5T=$?VA\mf@)C.9D.mCAN<m%
%m,bi\`L"cIj[ssSFr.TQ2\4.Db>1ap($K9*WUou*o%r-%lLN'frJ/Sb?TpVW%ZHRaHkFL3bLPC;e8fnap!)=Sk*u%Ulf#k<]CtPd
%WOl@f[m&Zn]VsM-G7KXkG7Qo%H@5H]Br-:QF8L"Hm^_q,m;?KZkO`ZXlH*PcL3F_&9Wk2:rO4;;mqf-hr9C[j[e!^A=8"mLY+/IP
%QWHA"$jnN(kOmYrElN'!>+$07X*6@.@<Eg,G.?i*mQOg&r4/5!IJPPI>Wkbd'j'9Vcb<Q\;G4`+/Nl/2DH=N;4aCrppMK;(CAGd,
%4m,c3gV(YRm&PKZX?5CSQclephRctdq;,77piu8-o]a9,<pfOsg?RtBV`!G`:=lqG/Y&s)^)6$KqtG0n[5WGN)f*8VF(t%-SsNVr
%/KD=Jc2EpV`QWamhq>dE@(l9mrcU))\pmOi0&D*Pl-R"KpgS*tYFJn3=^S,!>ck1_4^)'62qQOEl2>O=emFZfC[81c7r/(Ha#AA2
%=/ht<p%H@O,INj5Ya9BrccW47QZ_XAp#>YeS(-c[#Bs(^Mc\5&jlb1b`klf__8c?!dFj7U>a-2\p9W'a#Fd;\j8H%AT/V9@ji4dI
%cY(8?9)=*I]ir'(*m5[E4Du5m)Qtf7DiD#hQ8GVgZ+76JZ4#KUk5OY#q=&Y%dbG.f4nD[u($:pPXdR^PLTe\F[o-CcLNh@gUY9lo
%]Z>PN-f3]Q4Vbs*fG3:e([kP.\`9^OfW/A\XShY33cm1(X\\qe-e?o*$dW.(F'q6lp-pREAj:\$0&+_0XY&1Dn(h^2iO_0G]4p)8
%b-e9s/a:#i(Za%]G"KF%3*;H"oa=-9]78.LmbQ&KG!,B>1FJgJ3-J&WN_c4Pnk.U2k.b,DmsVP`f3^,ldDA'Fr8OjUqN8:.MiHFR
%[ol+/ZZkoYHgpB)h0Y:/f\ZKq>Phak`KRM)ikZ;eMt"]ZT36VKpKqfF54H=?G<k`4#PU1GQ/940grqDs6%(nF](mtkXDaD"*p0,b
%XZJ2Y[4OK;1r#=!h/.&#j?DsK(#M-g]@@7I2\1k47JYk5p1rp/iFQH\6/[/rIIQY%rKi<*O5FLj5.Xg#ICLA((*9']^@U>mrOK9V
%h1,9qn`XELm*ha.(\`(oS\EuK(3ie3eX%A]Y@k$[5MC%'H@/QH4a\71n)k`Nl@JtGj5B1API,,]I<*!+P^HB1>h.<Fc_%Ag<q)fI
%hCcOS8AD][F.WAW2n7)eI;nj:j1fD31,%o^,P*qeF>6^4'\8qHChj!APtd1m8(lp'lZr4%m-3ikS[[uqc99fuk+3Zj;RoSA0%7B-
%QbDGHNTE[,m>Q7-Fo0_0A9tk0YOX;qpW_<%IV[ulcgQWjYOZ<2Xle*nk3Bj^Eo$WjFD#_<]6X6eWNc-hgY-E&RGkp%50Fs)Y+E>?
%gj\msEj'kqF8t=?URh&BlIVS.*t$\lYQ!"jo@:;%J,Uj$>^LpIEr"tqjm2E`Mj8o*bngoJIt%=tU3RiFB;r;Ni\fT[5!0R)"kW24
%h=SD:bL[iMm]Dr"f6`QNRI&ePX-2-4Rb:=$YIPI9qe9^?_u:Uc\A)Brn1f-Kg<4CTj?=OBi57nYrkZ)2X1O/H10?ZoH2OpqGhW#L
%HC=\QhL=_NCC;d+r08Slk2lE-Z[0!aEG-=T[_B=CYJ#q98!X$Sc]:$%j]BJu2ic1D59HuX:Qc)-f1ruB`t(oT2cgJa/m@FNYO3-3
%0>>SVGd7)0rUH)<Y8Scm=0L`KLZ[p9b=?o_c^2,U^0/]#gX+37oYpX,2t+GVKf>"_8)%sQB:loP4]kqAH@'Y>=*V4Jjc93jpZ^5]
%]2'N%pHBIZcJNPHmQQ)LEdtFh^9YG`qnYC5hYZfZ](l2sq"a:(a45s!jN$Ubl2AY`BD"ceP+PXqd*8JjrQVZEY?i:=I]As'h9U9&
%/:KcR^-DX&Epp\&9tbk\ICcao\u17kQYTr/m@Es;Ct62po(bYR&DYr!q\VGEo(l)MrlO,=d,$d1H+%j;G^/qnq"jK]EUW7mi9e![
%6T9_ZVYQo^Ha+4uSbj41M_>H-UKDg?@5YEa)_sO'pc]@WZWfr_f!B:Ko7Ju?gZMZ$:TOps=?@<(a31@s=3Xq>dX#'P\iecH]Y5q(
%2&[e<j6B\0jf?W:V<\%43i68T_ns^Nj,[u@YP!gELKFIq\Tmd.QZfR$?gC#R_=gO*r2smkQ%c]48!PG4N[pC@,6,<%GK%=$h7dZR
%X;3^QLUI"sW`=EFb^*4"4F?^n/rYG%qVgu/Q[3L#q&I!Ak'_M#^V/;,()fap'fMYZ5.tj(hK,;I=-q52s7`J(`&o<Nc-aAgCVo@A
%,P\m?=#%`HMPnX/IAWtWl45L<7rH]>]=Mhc07Um9pqJ!haAJh,n)H4SomQViob44l&jf4c+q_D5p=K>H:hb<^k&-GnFVrl;CH(a5
%en0M,T0d83Nc>EF?ZchciBU3/_EPOknEo*mLicq[8!l&J+8Sa#VJk/i5?PdED&cs+[p0hRb&\$VH2,32/_<np(<4(Ad!*,*h2bCK
%^?O*!I\K(%Yk(.F425sirIC0+[(-L-Ba*%FT'P)B^0CFT*a]-EE-(VR:bA!N7eH,R+U<Z\U"RoUk%;'QW.p;,TNGqf2`E<g4`ZfV
%?hlXC*H<-not"a&9LlhGM;XripRkb@p<?uQ(mqnigben091KKF\5?rrp5"auL]BQq0c@__'/=*8BdRWAT!5pQ44Ou3LOIhcn.<p]
%rje/T'u)`]q":AFeL6=1("-1[=YsK7dm7+KVG#$nD"kAF(\X34>O;>AFgas!CnB32:;H4n<r9fOil7Y>]]O4;U2/6XL=1'2b40l"
%6-\P\Y$nlBfc8<MGXJG^%3H=S"b-rM'V"31.Ecj";44k\EZJkfh?!uH85B68P+X'POg#fQjb&9jOK_ZDmlCl/rW$K_.GFi^RYA?$
%:O/Tt!=1hLT^OIHV$t8[Whtt8I:"866TNms\H#*tQh#"N8g$[7?mVHV',7`o$"Q(R''pC2<oBu3"mf>N.Ef2./2k^>g(o:QPi3Jc
%Ej8gM@3_*!\kYlOSq9Rcjd_PYKOBT@eGpjn[V=Yb/2.tP'W7rXo\gHab`lU(3QhRo".B67;?@m@8>\N(U8i+REt%IOTYbZH+ACMn
%Z[s=?Zk60DJ3G5$b&UCs-61buON$0rTcHd(3A4rj_PF3Y+dS<9j[s4ha@r!g+uZ9g1-OCNWb0C-%?$n]m9:I$_Fd,XJjYbf5mNuc
%-=@nY!$E)RM<86CJ6fAi%rELd6NV-O;:9YrE]@YI5'W71!]*3f^4V#6#Pc>/W!P;7R1/&]mpu<%nbp%DENbR.=\ZPW6a5MrZ")\g
%.VLj#>DH.cD)09:Q42MX1%7;u&B]gj$e'Y;5YDc8N9%d[;n`C?X:*VbFION[VG+NanADhfq7%%C:$=rDK3Pc:Hsg3dj9PqC3>,HB
%1&ukh0L0ncX5srU*oBh-(ks!Cm6?e+(VnohWqDn3:g!M[Qigq$f#6m6D%Ha",q$e(4Hg@*6'59*5enVK%k`cd87Y%0*q2Mn^Fhbh
%(fDIXD*XaI60Ad\9c'H<0Fk#gM:dGVU^<-:CohB>!ZJO2k!$iX&Y78OMW,.7-]COskl@7U>HnIU^tKEZ$4"N$?ku8(o`^Wa/L4.#
%P_Y6<,WVq?E%6t?f#[ASN"!;FYpEih[$bc]H:CYq#3nP5=aZ6Y/`FSNg^$jiW7j?WQt\hgJ5SaTJ9Ef$'*pYOm_g>GGVFH1n)src
%+=A4Kn2AWYg850K8DsskX'q\i)]&"(7l[h,Y]C"8_*GOX8:^qZ)+5/R!jJC$`*l:c!MsIC5^B9'$WYQN30n&1;`]Xg1OrX3\Z":8
%D2h5Ab(5.pd7W]A`\()5HQJ+Q3?Lqnm/eTb;5HhY"kM9,6gg<R&BPP-hEphg/I76cYt103C;ln_4V%r:WcB)>A)Zc:0Jk-$:4iGR
%!B\r.LF*dL$kna]=9b_gU:CK@JDp'IS(\h"iPb?.NJ.bm*m0Y4!NH8r,n$%M\d_KR`m\p$LK+ncF#8)kJ(O?e"p0ZFM10u9pif:_
%%;BtomOZ7rH;7H=bBC`-;EGR;K5N#M!iH+7gTD*R6Qro(fSEaNWb`?,#f*jM"O=J2b]Xk6_@UO$!BIUK+<#d>6$n75i5#ZJl/Z+e
%JpA?#]C"@5noY'r@Xqrb8Q,@'n<J8=/.<@LVL`GPep>%1L3<`EmeQ(b%$'NJ6o-JMV.VhQF!o*S,q"f3I)h1jqS#4OAOdj/W/pA5
%AK0j<\a8P7i.N>0:gF'6Jp7A%^`<+X14Y78F2p^9R&i\\#Ppmn"S1S@>5Y'FNBi9T!eg[#O%?LemRIY6B8$B=2O3e5h3WqJ*.a]c
%'s.id.D\G)oQ1.2&)?@OGQTXJWs=4gMf8;i79Qsn'TkRqE\Xeu7*>hXdfpo>&Es%$ruScJfW1(qOJW'6B##dYI*ZlUJ-(1I:D+!=
%;*EU4n/&T+5\t"qO+;KL!Stgk^`&l4a9dT_cNJ?/(dT4IO7AfPD?;489_8?O*eDVpC=kF"U4@2(YfE+6W,%Tt%Hc%<eHuJr-hf<X
%&h)5CB.%"q5nIEs:dNI4(5@;m0\9gl)cWqp?6tUH$o0aHStSkh"fQA[7ldOc9EOC%VQ#qgJh[@h$Yfh[&N]bRHr\]#0>Jr<!V6Q[
%Jk-6C51<=@AP9kU'sOUZXqQHjbY>r>NZj/b")>W:^`W^g/(Tg?)__a+:d$:@\:TjBLJ)CB\>aiG.XgmSFQ`Gk7JcL-I@>S,oQklD
%m0A;P(nM+#M3#5QR:.cmW5K]m#`+1sL#Z&J$?GK[/nZ4jn4>?30Fg^m96@k6:-muaEM+k5d+YB`SS?f\AH)lk%J2G1Sk1d]mGAI`
%8;E?MPi.)&WW3-233q?uk)R6=luKf?_Dmb,$B?iF%;6+Y223BBlrY'C>8\o@c;5#K@:>Xqp42EdjV>"mV!O)#!@;ij\e-iHdEi(o
%%*ZNTY]5\f)c0Xs&#f7FM=SEsIKMmr^KN''MRSIp\s..8W3e65-S]h?+J+8s(K/hiPmi6<l]Y'G_/k"LBn;$5^uSsfd)&d)b%XFf
%l5U(#9]'<@j+<Y2DarG`VrB@d,m]Is&k+LBk:'klZBC5VF!f@%-#:'L+:62^>%h(J(-up:%%f;>5WTjJ<gFt/65&]@Xu4QdFML8\
%//RI</40]6'blg/J3Z*s]c`V(fb$DZas?fgY+qB(1b^isRT"Ns0#^Z>['ai9P;d-+!B/=(9$0'f.W+Jb83e,G1VU#)0aC#]*!_#I
%`5FSD`UjUpCB=`\.L@:(>>P_OPdcCIh4`mW%NF1ke$)pboq?MeDP%LF]^\V2+J(*B;8_Fa3De'k2obsKqa..OJJ1ap![&77):)^#
%;0BD,HjQSQ3)q<&."6-`b'1s,$\<S6YEQ?!L`9#a;3$>b+fZ,A/NZ4Ub4pV[1!jJf9a_aeggTLc5Lb)163d(".-$@>Chpb);6n>3
%k<@>S?O&:d\&:&"N(\W=`ZT;M>,qW(pHdr//K@Gjq%5#i)pKfAL1(kp$8sQ@86e8b)ZsV,I%,](6qr1S60h"-E;'KJa$:4C#(cAa
%Ea<eCKIZ2;(*[Y'>[J4f0i*NHC"fR:1'UaDnC^XUZ[K_;rj3+)DGYPf(:1)r#p9H2@Sq]%)q9aGEbGmojK_p0+KutWK7O.#5hH)?
%`O[O<ZYIjl<$*`)$45e@U(_]XgM1[KL.AgZdoS,I5/\!h51=\%n30+1m%7FI\KTiq^^&SJ9`V=8<>:OYC'mKC;],oY(LU(TI@"(E
%5Z1$c%OL'RL,qNW&N#(!Wk,WOgB;O#4$)<r6f?:55p884EF>n&![AWYN\Wf4`Q[7dX9&B2WWbA43c'8m8D,g`(Y:erK;<4%?&q&I
%&-NZ,*\o-M"VnQ@MBLm+1*%,e"[Sf5c]AX+H^I>[<>T>0;&B'[8YD.c_01eQ)27;.JV0ru;BZ%E,H7@0^`kc,+jFOO$kUh['jb2@
%arCN[g=PZ-"=9/kBu^6a$j6l4<HUQXBLQG+SjKPhW0A)X4fUAQK3L-G[0/dmYL[Np%pkpK%"Z6#\D4%kIJG4h)))dHK1oOe;L1el
%`8\XBm=Q$$Ch<g7F'af\2DbP+bZ-rI32YuY_)5U'8]*?L56QEr464,PGfYCVFBu`RJ]rjaFpKj>c/TSJ6;#VTfJF2D=uA@$6D*M)
%NL(Ku.mM7sKIWC<O&urY*j31iNU6HJl:W$<\o8@n@<3h5N''Ue!X'+D7P_3'-C[u#!7rLnaPFlQPJOCcQmJI$7MmV6VBsG-."Y\O
%b$P;!AP>lZ>&pI$)Jc2cEFC8En0u\7+O>$a?+`p4hG/UVj9k=,2?rX\$Q!LW.Kff6QU*t(<Ql3tC+"c#TiFKVbh#j3gcL'!#Def5
%JC_?2W_hA8&d]@u0d'##&GVVt(M#lfLa*VG67:]:.bT@Ydc#Z*`X\LWB<iPOAI\cEZSQ&\Z_e%H/ep3;AmjC*6/*;3h<?CDoYD:)
%\eodnYo'i[jr2VZHO<WImj\l:_lg-LOd-P@'3DsUahDE\&\F)S-A,IKB!TT4_*^,/X]qXj7">CpR.fIB3Kb]:<f!!-:",7UPd(?[
%@8!#EK#!-t]\]YHb(/5DO=g^:i;`[>2qE#8:%SPD+\gOLd\@d(Jj?SS/a%`9it`d^@J@g=]G3\^0=\#o)pDDt#6MS&?.EqCV1kbL
%`^aVC6)MIt`k^?p-t^@O1t6PJPCgcYebFs^;")eDOZlHaSo+10e-/qrhYZO.LY1aU!^g42o3JbGj9a,_@eB(LH9mD#)ZUbQZrPi9
%G?kCZ>Lg,8`%#_3KA9bU!Z&"[ksuHXBW$]Bfjom'qA;]'$]5Hg2HJ6/j5[_`TM6B%\._P5$,j(pFglrGVKN4N8kTZp2%3^tVcdEW
%.PR0rD&tIp[M^9R7u!Mm30T;[a/f@40J,A;#m2)E:k4@c%$AE9FA@f/BF)!KBkIPH<L6"K95.DM][?:3JfIQfoaO7j?",R2s%M7;
%:$r18Uoh7o9%=O'1`>RDGMEGC,r>qK_X&?35BCNOJ.ei*!90k4>#7LZlmk1!]-,0Qfs+#(Z29OAEE2]:QQq>t;(B/kALUfpNWS/h
%$?'UnS<flZ6r[ojK;835nd::e]HOpI&c*4OOC9XCi?MAQ.OA^u&V6*J1*!\0'+>SQ3BTq_%H_)@Us+fT[13:+`7BZe#Qi(t;%^mc
%NHe&9qHZn6Q)Y?./Mr#PMQ-*14hd]^@[rr#Qo*3>0=i-h<f,PQ#udaK>Z4fUBX:][Ng-,q>!182/P9AjF@0huXIX>WPsC^Sk0`FQ
%M&>kfXA!WeLcUefWILDf.h'\3P``0ZV-e3M<(@H,]M-/9/HDZ>5HaX?ceuBL%[Pg?ME<+E]LE<SjM)g.iR>b/V<i%)A_&s`S#Rs&
%Ns'"#0JZ-6:gQMEfE5A5&^2^Nb`)[+b9h%,)!D6r1a*K&e7$:^#VhFu!+aiUW[TO;dcuFD2h\'Fd>Kpbh&dYYA&=6lP`We2J?Dc[
%Q6`(:5\`q,9"dMk).;s\Aq`Ntf*LFF<a;5o+>2fDZ9/Ga$F)=fi9GG1diuW5:`_;s7$->UOng^VJ9>-=*R)dZl"GqEWp2X0q#QRi
%>#m;RH4`1UA/7E]d>@F":Rc4[n5pEiCnP48KSr4C**PrE;,BVMN4.$r$ehtH2*FqHUB7/;D^Ir0-'UP92b`VEFq%B4"\"B_B7N%Q
%XURS10N:?a`"cY_8YNF++P!?t1VRM&\I"?Z.d5QOb(nWZqMuc>;Y.1KD5atpp3f^]^p5i0g)Q.b<6[j#j&&MCU%H[ABfBBaEc&2p
%*`oro9MBT!I$`Em!N3A_BSQ;GGK8_j2H5dqRFS!RK&Z2.N&L@S>gnlV[K#0u+2##5`8*5Z*MXU.K'L<l7CX\*lVJuk!r'`<^?W_V
%1aj+r_5en1dDbd+WV1$m`5'P!"1+Eb9fW1=Sqt37%(%;cOC[nTI#7AJmd*G`+YE%g!`G.Vi#Y:lH6.?FFJJn!72-aapsrF!]4`pj
%W+VhNFS)Sh3`//YP:[V$E+:=TJ3,B2>\ZRin`i?9+#,]>$[]7I&!(.teA1!I-C]6PDt7m<NgO\=b(co%->9*rTS1EE.K-!7'__rl
%.hQ;gIMMA7PNG-kfZKAek]/2<353S%`&B-UN8'>;9b`9-U6lqH\[Zst*0B#$PDG]iIF;t/:fgXT9kp5T#@`o^LPF+5_^Fs+_+6pk
%r_QT@MBPO0`W-X+9'lXYRYL*-=I<GcmLe6Va/c@&=k=rY_5>I:^<W3PG'BF3agl?3lU/26c>chgh]PpN+PZ;YOfkCeU:@S:MVLRj
%#3LY>>2(mU0a!MMpmkAK#A)C/=TM3Q97?fZZrCL/clPLV=_9U:/dtrYc8Jr$?O]JGQehh'n],H25>QSJKap]iSl,#43DiXM_G(8-
%+9OJ(K-Z(oq27LQ`ZAh,"Z)9t4PXX"9Er$SndC$tikg=&\@l/!6k=sDQl6)j!HF^8GQT)U_SkiR_PV1%0(-8[LY]l7-Ck/\7ga+G
%LKSV(`MEY1D)02,\CABt78.!=RL71<+b1Pb@sUf0O?JqSq\)MpQ\]f,N1,Mk%BPN798@3TIC(cD_b^TI1Ef;NeM:jV]L<C>oA@Ig
%AgS&.a.U8ESrq!3)%T$',VXIa3&N$C&HUZrH^#&:^&,0hRBd-t!d5Grd7-EQ.8*oI_O^NEqQli'.GKb/omP]i%k)Q0Q?"h.aGGRs
%YjicO]EZpQ/$e-Z?NLO0dEHT1Nkr'O;?T<0r,ek[43YAXe]W8gb/aIQ[hdDX?JaaYWB_GJds('CMZW<%cunQJK`WI:+\*@mi6[rV
%+PIs^.#S.HLN9aR9QG2Y\k@cgHcF&Zi]u;.@n1;1(e'9Pj&(=J65QLhg20@)VB6D68hf*ZC\"W2+632)6WNPE6P3j%<R/M"!!K"U
%4:%\&"gMn'@M2%F:@mj.<73**$hoVtR"n"PPJ9cG3JH?RTCa:Y_#5EUS%`&q7&]M4raO[A@\?Xh"`\r++g`YK&=o/^PD1DO0s;dG
%,R>^rNCGMH7L@<(d=->B@;p+UMl)7p^02gLW+B*M/Z>3OJ%g%%0\(s,58U4gf>l_DR*g$F:^=rg88jGc5qCo-O`6kTL=5d?/#c,M
%n4#?N"0F+EmF1XR;#oF1qk\!3%lgfO$DXAS:m4sZ%6X:aMB;)`(*UZuK\?Dmj$JGnDQSFh*M#MalNSWTYm<q8[,Gs?5BqiD(*B)^
%:r#ugr/dg!@\Q&+,ab7%k'W6U9(8TUYETiuX_Lc!d6VO\;p:E33KMeU:/#j#!i&]Md`r#O0gP\HK9"?IL<BjeN_nb'&C(\'F?1g-
%oDil:Q]VO#(F.6D5Wkd`&Y3a5V>Drg6/cnj1J#d]"Cs_.ks/@9aHX2F>%+AgkWBtRO^oS)WZVN%9LV`):a&"LQNs49h,4p4&dU%E
%$A2BJ9MAb[_alN2VUuePdPFj.<#CiE6V`rc"3:n8:-fG7LEMAu:Z9<8RpB3N]"V!=i1VYh+JtNk1,'kAXn`[2!Qa>t.X+1]\VXH%
%GYGGTkMO5>:(p,kCB5o)C#UmcJMH7W%CJ;s;F,#=<l*]CJHR!tApeWrLnL?RC-^cf!J+LH0NEoNT[4s[bp#3cPecb#%2,A-e*I>S
%6+g.?UeJKs&F!!mgpD?>UJa/$OK+sA,JdAo#oc-q,Sc&(<[]4J&Z77L1+=s3iGNXtNr29J.ZQq?8g]:(*"/0Z@=YIFXp,22.*CJA
%79T[Md;9+t;F*T'R#/(22$Y/kepR[0=q&H'f.gBloLBU'-bB^k]EXBm]V0j@S2cGdWXl)DS_!^goX:E"3[%,XhssZU\*s[9@mg=/
%)M#FL1k;S7!$YF?i.<*#MfV)ohE4)fRU6[a^Ef`_7AfjdG6GJ%J+\Ph><>OJlUmE5%X@B#<h^X\2GOCdgB4:#)[tiN"+WqUBi(_;
%i*k=/FK1_oe@A?QpN7qg1ZK?kY#t^W@ZB/VH/k[s[\NHu/a.@7/-ZrYG-bme(2_oK'n*jW@oHCES="pp9"1H>-r48uQ7de[%B5;!
%8'54$*dq)#f_4)qX/a1#:)SPSN!<-@?FO?t9!^;pb=L"U*D7e&)FG="PZ0^SpEbOLRAq_b[2Zh4E"UCSK/Aa7hdOlK34ahV)=Sb<
%8#A!>4k&/p!(=>m;cf?dZm7:s,1N:78Hd!QM`*1$R"Rd>f6\\;,7puhisc7-`;q<)*1h2fPlh7m%QleZ92LZb1'$T9FT>QdEWADR
%J.MrOd^<%[BlX37:tMNY'nk:?N7&O;h8Q4"Jl"jo+Q"qf_[K;XnT`!frK9;HJ4WM$HC3@VM4\UCKY'2\JsMPHjhL"?h/oj&NT\K@
%61H9F+*Z0WKu*T$A:^caeAcnq>Y=it$>%A"<,S)SNYAio/NCE:.m:U*b4_X6CF`,02]+i!FT**<cq`8/N>k[cZ+rt).gP8I)ZX=+
%]csa,7hRaq.-WM!9b3Ml+VUCXR>ZLZR-iUTVZbtJFpfLrgb,<`hBR[WD;MZ167A\+F>&eId]%#pFFrcB\fFcG&UeD'41&3/f+UiB
%DlHpYeV!>W9%+Hb0@.Nn:YQ[('Q)'l"^\d?b/N-VPgcK17)#^pnP1X8NV$8?>jGGO*:!OD:b59I+b([2@quCf]8pocQ0W%<['Jr;
%WpQYPhBeYoR-]4pQn2NO_c+g77p'jQ/X7>-,%Dn^YeB,K#=^H\=M7Q]of@3+*<^%W`%sItMlS8eFeFCHKC=3(1R*8QfVG8+Q^A:B
%7e"f"g-+@M[X?jHl_uIuGfU7)iULM#MpCf@::!iQ\p2fA`E#C5a*6n(\8.6!OQ=l!FO('V=N(ZUn1%2V<gSG@GbEH]UKG1*=5k8a
%k#"7$bkZbDP_Nfbd,Z$1W6n1!.n597`p8!DiE@0O5#_^FWUh]`98JT)GC3a<N,d8:TY]R/Q_U3e@1XX58MR.nG^#g?S*&6*Ck8L#
%BbM[75r&e`'\U>nE>u^YaQjr;jFcqRs'Ih>s$+]es1%iAj2i4/e3%UP`NsP!L,so%U3o!qMWDX&^dLJ\:7^)G7'm"oid#o8LS:;o
%U=4`;Fqer:W$*_n*XqIfUNKYn3oTYT0:R."dIC0P%kI]VfXSS-&Vo<[J[j_O6&n=5X9c[9Cp5P[g#D=1>hgZWrSkg%6&.$s3ppi@
%aO)-pF)5:VIP1l$rH/D*D6jK\GcV9=T$[T7HoB3Wkp@*7e\s%6+;RU)p0>7I#=Om'"jq3IcfRB#"VqcpU:k;L]fgb(!J5ut`DkaV
%j(AKM4':Vi*XpQJ0FbpnEeZ/7KT\]YHcpm.^#-o@\EA_`!:I51(kSJiga[kP6jIJUngQ/VH?^B^X$F>H)*s!T4h,OULIaQj2?FoP
%[%-Tcq^3P/6.alBpCQ6e/9OVd)4+-lR@n&,g]E!Kkn/&D4G%0!?U+crJ^iDXNH_eY?o/E<Y!n'U>JlHL2I3*=WRcHrWo?#o;feC!
%AeJ7+c`)8uNbBr)<2bsXZOfGT"a*Ot$\Dr4'OL:u(kPFB1.DO,GY+*\n!b4F"P6Z?f>7A-M4"7c7#hlq.@\V;ie0Ab_kUt$63aZM
%_B\M9Fm4'lQU"qU'Ze-+DSi0.[RLRt`,"!;Ocg5_H/pu4XEaNE!u_Q:mQNn/'P(]9I=iec"'m1'g4]#H\?"!>51Me*#d`.iF</(+
%$)cn6rOnbI%F13cE:;>ZRZH7m&k,LLQuoMY3$Yq+Og5VJ'RFi,L*B/oI,a/u)eh*apH.C^9A<FV*hek5YKlZ/\lkQV't(*!+M=tM
%QFP?8<]1*ELmtT5O9sOZUl^L)4#qg<M^7fu[nV/M5]hC0dmTkEKneT0gB`s#h_f3>>qH3=.gkd%K#OgA:j)!S`B>HG/nZXFA6Xij
%4;:PG+UQ)B-4))"9cME/9"L^fE9F6,gCj7N84Tqj&:AO8U>GHSW?&1b`VnEpZ9;8t<7'b=!d0SUS5*@4T$F7'V?I^AK\rJkc-;YC
%7*/QX,klYBCMEIp$gM/ZRB\utI(n[/*mYTOSp,._Sa6Cii]2YnKM^A*6%%\mK%,'A@V1)$!n,[Jfl4;%61'BXq%LjB<Nh/2CsPpJ
%^$<GAQ#&uT\q([=8MF8plti`C>8hlX83G[!hO7*HQ$Wf?H$o9(h7nJFCZq6P'SO!IeFiuqQF)HbI>`6DM&C)B9^#F7fI8f?/Did4
%0K/1p@`'Mkp@qN%ceqOP`:B5Fao^I&5U4:\<]l@Oi`aQUOqs'c]pC\j_\8T#kYMbuE:\oe"dHA9gel$9Se`GZ=gXC5'g+]<+P11P
%iD(ggTo89u/%^bl59WS`(>NIKl'<Z4;;H)@2G6Z/0P9g60.pR^jY1#+841.p`s96`aqk$YeF?cnBCQF13!m5P([%VGTUM3FOZ)[]
%d?>j^`K*ke&!eQcB`1h^/N\5;hr%9F:7J7WQS2=TNino2K!LjYEt"=hj*6>AICiG0@BKH;BKoFbQ&p5hJjj/,WGT]kf)Lp%kjn8,
%-%e(8bpFCY>*Lg$l#f6@FE'H!`HZ4@:ha9,n@Jp[F>E!g(lT-f`+]P+DjE5Dar@Qu9/Wp@\[6.tM*NN_`Rj$MGd>9K4L8\d6d[6l
%(Ko%G3OZY1%(c+VO.*2sH]rYaEHP>g:.D^a#m0q*X$JYu.[pL.cBUT'CCrj?:A'$4G\\OT4B7[7IE8Fa\$$!Qi6AO=%"qXq<-SVF
%Wbb2*6f9lj]HkEdI4h%mHW+G%\!nO?Ea?)pZ&>]4Ue\i0dENNG'C$tXhGNO3O&BDbiK.?m:s>e_5$uEc2aR3cK@iu<j]5/\]]+[d
%J8BA=R.*@=G84(\lM;a07&i:TJqpm,(R'r*eP#(k1Y62Ii"-(L$fU#X.k\n51oN982agL*=t>0/DjK^@C=5J&Z0j*7mAei2PEn,s
%r&.oZk4<#%lIOQ?$?HC.1IP&^,8t!FlO%e/6jHis=If`K\A:4jK.gf2X;RTa-(Rk0:g?]7X.M+dmbfZSphhD[3Okh'6,X07El$1f
%;hB9Da4@G'^`0n)(DbkF6oRp4$Q@C&^q?8cmqe)QDFG+mVIYeInI6(nDW7GgIO'5/;E&8cr..-*0Jj?S`-"1jMO]D4M_C")4,NJC
%+N[^Tq$`F62&%'@E%k,IF0!0PP7>C,G@'3q=1eg.k2r_a$pI=<0Uij;p^RSb`Qrba.?GnsO$T"QUoQ7)rLiFZFC,`RQ)Cb0fI:*O
%JnLo38OkE.^'IB6'N%$;;::mrY0@k->S9u,GY9X%:BRFo@_0S>Q[@XH5"I4f9EXjN8taMHH\[4B(s`323t(8X%>gG9>Png2FXJrq
%`RP)_QpV74Hk3Y,ZSX#t`%]T"Q9HAFVmBn8Di3UnIC_nrj'<NDVWJm-nbMqp`O-2-O>I_?5_5-6$!?6>Zk*p+a"6PE49lBM2F:_l
%l1g_2jH>?aklLp6cOsNAMJYpI)FN_RG^B$'(\DNN,9<P[h4]ETo'UK+!FQ\li`>uop4BiTp`EH=Nm=Io?p.Nl-@/[5L5[fshgQl.
%gD&is#`?0NMrGJ+$?[S\Jg-"H9d.To2jY]/TEQ0Y22eMe?A)3?cD"lXE;ZZ;j/M/L>i.p\?hg[$,TioRdAq<<.ps@0@2%=M?N!/8
%[HRAq["pdfk[g2^d)49+qALc?/ne9U_L+I6_f'Zb=,D#HAoE@A+M7hRd_T2>`,mF0EtTPIQ5Tudq;_[R<<Pc"-6!PLFPaV7=+*W1
%&<CCQqQ@En&IfYUN@Gi[G[2HG4e^.rj3BE8"A$u<K$4]=bRFn$0CI2F>]I4p6%%4852uc2hpAR7ncd`XC.uCXb*?YcYud96PQhl4
%=2)VY>7_$5LY:m&:r#9`GSZfHAKVVW[]8lPV+b-moG#AG_\5pkm'gJO$>MX,fB'%93_1.(h1X-7^/p3("6jD$gu'g8Mhr&2n`0kB
%"u$ksiX7+&F:hhK89Gr2+nVdDR(\,&1'X;eVRJ[LoK%3uPMYSXgDA7$+[gSQC,*BN!d)#+kLlZ5C-$Td2RS=nG"3E1)fJ:"<D\.X
%(d]rGXIpoBWq$$J*qk5EKQJ1SDg&ri&eS[M^/FEc_b(!(dNpQ,hTDc(3eE_<?b>?;CQ],HW[=cFe+S&<\E3qFMa4/JB,4h%kg4$:
%p]"mph0/HNXt8BVf^HW!634MNc4T=l2gYX,fL2FeIIpN,9aarfP>]5_e^3(>r5P+dlX'lo?Be-GEXB==`le381QF9R@>rj;c;BmT
%D`Q'"I<1$es59lu/ChKJh9U@:Db,b!$\lh-PE/qAm)^#3lTFPkcC0E.[1"qY"K>8!8K86\bC8`.j?f0(M"J$Vo1Yj%Hf<#,#EZ?N
%K[qjE)sAG[+]ZKk_>p,WBV]qqZa_NDQ+c\`(-f3bh+uX6PJ6Z46V-hceAIm,[Zf2RoG@#gBYnu(::7eW(a8(siI2OmDE6Vf5F:q9
%DU"l`9^*0(kcD\H:F/g-]M.aYW6IQR8&Gs!d4#m8nntH(J+_mhp]4"fC<Y*j),&o`VWkk!(I)ZJi!j7Wl\Gls'N=AUa5m!L-X)qd
%MAh0)M^0c;LP7-8$KQgm,U9-)0X!tVetCX/ZcWG(Kk9J<[9Q;Z!D'<i>r`3Pi95.9QFlR@TJBu.H'k>'M\K:l6tuX?*n#QY@fnb1
%b@J@=fGsgTYpb>UUL--1?L+C"Ne!A3YH.B#SI8lMS@SHFoHD74FcKdO3uk.mi]U\!n^UYN)YG>[>TWQ%N62e/A4qQ)n?()*gpn6D
%<*R7(P7rO])(=js',(%^9\e$Vpr/7g\Y.oF"R"r)rGsHB#KjI8h>]8\*t^'+dJjRE``Q+*KK?3s(j](I:q)nIMgP3le2Oukq_LVp
%64Q(_%P(uPelLh*RS8u8,Ll\.K/;.1K;FS&k&Ut]Z3kX@lX"'aC=SB>qgW^tIiZ/.+l*l=S]qc2h7;sBUeuRmG-8_O&u&f;OeeLK
%M6#Q6HXVWtijt(iIG`DSF2bNu5L7b/Ip;it\Pi?L/k?rF;+9$o0J\;k6IE3]n,BJ4rC>%gIO]aq<@1<fe0Rff\k>!/JTl/n'eUrS
%>.3G@*P/52X+L-Y)buGoPPCttip9"@o?q,UH<$j4Rn)4o/:CmXY3q2Aq<m4bIMCc%kEdgp@pTlqrG)%IhqNN*<N09_'1e!#M\XLq
%j8f:#M%Y`(U^(f0)/=&H!I;J=%a&3.82l;r.c?;DEe6KMJuN+"<5^*UOLZ_HeM*F`bb$:=5S@C!^]tsf%#@^3HEqnK;iu-DUFttj
%.SC-Nl<?X:l%g]Cb6dK\`EnQIo7,.\r,V=7Hb'%,])kLLrB>L6\6fi>b(if!2tu1'^(=^:F2LA?KjX/&Y'^+%%)V`^+ChBNQ(Y-H
%`3.;M-f`2!91gKPeS?jYN"O4@MbRPeO3R)BRa#b6[)^hD4mQg,Fk%Uj+UIVnESg85?WaEVEjkA_Ch9q6e9Q]MkP9'=0#VM6oepm!
%FS$6Ms6=+XMJ#AaTD5e&7[o<:$C3'j%4P2m,(4!BT?"o'+]#/gZF#Cr,iMd#WYoqJRHlQ,,\Bkaf"H=&nR"J`nULOMI]j?5pP!,Y
%N]:8cA<03g#h_H`eiJ`Wi8pi%+nhi\kDr#^3H(NG^hJfDhKM`(7.6GI4_hDQr,m,EiH9f0$9b&u>PfJSA(^RMa7A"K5]@<TVkAf8
%"u1InEMt93"<\Y)W[gNI7eXpikIg1]Lp%els*6MchF7i*Qbjgqa"2=-eCmV.0@QF\7i"J^I]J1<[/UB-I/1_pNV`$41-kj0e:ATu
%F*X_6_;bUZ3g/Fi:`ufT!f`AC+eA7Ug2:G7'UA<\`=Q@U7[6C[1BnV0MEhr)6;H\0]Q+0hP,_]^)Vg)M1oc'>]g7CFcoZ8lI6)r]
%a9LlYX79#C2U0XMXW-,;Tp8Q<i]UFO69uW7B+"(*IU#s^ksYWN?B[)lQF0hmWR6f)=@L:hAZo[%L@?dhj:t(c2TXR54rscc/YOD%
%.ue]NQ/*PF&]ZO+kgIAE;,<t8?HON*j^_=>idt-7TajZ9iV4jWQQWU>FqGDMh3Eak&L5j(TQ_IdK9,$Ap8jC(6oM.&dF/2cJsJJ?
%p!f;c`:Y<#OarIsTc,M3OJJA_ZQZ(7IN5%]Osa#2A#TEn.c@U;mlg(bd:ic!(X37teF5kPXit3V#?jM!"^,6"ej8_DY?WmqHIbdl
%SIbah'hCX!&l(Y*!\<ei>mVFZ?h<t"A3:LkM3:Z#';3A?@\`;;::77k>>#=%\)cp5r.@6XW[1Uhens4?N/5m<[JKjIq'_!Lo*gpT
%>D39KJf>leLg71oqCOn?MWMk2*`JlqiR4.]p-Nq`CfthUb/i8#PVB6];[WKmKjl_6p;n<qj!GdAgdCl\%Z^&93e]@e;H:C)qE"NZ
%XIe=hW-.J4_eUr@3Gom\gg'WFSITonh4DH/BWs06A1AVK.])%BVJad-jrn?j/TgU3U]ENK1iWN69.G."Nc/'/LnHE^"/*UdZ`Jfu
%W\6,_HjZ4IGE;^;X>nY`n%OilYC?0V/CQB(N@HhJX?$*6E90EuW\1Aq9pu)0)eB3MU)Jq!:$Xi$>`mO+#`@V^%-7!irE(#4DR@L/
%A:)Obj3Q(rRb>dsT\8F3LlX+[&Ck\^pji[A:RPkH`St24cI]dS7+uO%T!BK*XIN*f!&XE]"ot[F"amsmGEid_SF!L+MU==?8dp<6
%+10OM-N0@!VVBAa4X>O`Q]\6T\X.oLTgP0D8:MG,?UVe'-s+KSd]><a-<MF66:(pA1N^:=AKDEkJ>K('@L]!NcZs0?53&`/3^-B=
%kTcIorNqPYQ#Jf`0-08gn^iD-8V;-]m#kW;W4D6$\=O"Qk"mF(($mHGOhb7us2T6ALmC@3CE<1#d)nmrMlmlF53Ne7#E3b'A"+g>
%<4AH#V5g:`OCJZu\!>..r)#^Y'F@ohnja!*CWB<M0i?fL$A2hf=-^H1SZDXZqn\fH7oT8`B=M(?[]pm\l:4cKpc//-@PB=Q9^%R4
%,>Car,Y]pk!<^O.&Y&2\CFZs7NV(E8U2@E4>tV$4_Kj"40$VhjO\\[0+&^?1`ZQ8SG"r`eZppXofT])f,'d7q363/&3T]7Z3a<sC
%ku<(Kl(,,Q+"-G*W=TDm;FM?2qdDd&]!A;qOTMZ[k^emeCaBSfUp'O#h6>IAQ-'S&2nba`Vb*UP,^`L44mecWV7R\(jaO[PLEM;r
%=CkhVmJa>>DJKCNBPErBY%I?5&+sW,Ap>5r*E0"1H.Mq>'^9QKr%4''"WB]oUjqWUcF(/a88)C[HRQDrO'!olo@a9qB5O=&kDnYJ
%GOA0\0>It03VYFe0<`GmKPIELGeHPq80*dTA4QqL61OKcIVcE@%qE(n_l(.4k`N-"^U7]sB%`+^ja_NLhfS'!#Cf&N8$1dSEB$2M
%dW"e)e8b^5p'Qro`S(L&>%i/?1?ZAqg4hinWtc]bU[ks)V[LRX]A]4+o6-E6%mj+S)BJ,^jm:\].DrYt=&fan8/"iaa4R/laARZg
%I;P6#PZe5*=nPH@1L1!X[\^<6OqWflEm3_sk:,pl=4M='"g2jGO+mSHBoh+I$C)mGYj$_M;K<XP9';4]URi@R%FWDgmEQJ1-Lku%
%XKm3&M(N0N$$Bq7EhHpq!Rb6JFS5@f@I[3b1EZ&ppEE3c8s%Z0(!gLu0`b9->@PZ_`<#6ogfdj`?TJdEo*XFP.6FlH6m4K!]#[VV
%-3,#WE)?W&Z>c1XNk.$9=3A@I:pEhr.&)Z*TMB5QL^+aii2G8.q"KT1eY?DQf!@i*p*eTsf"maeNUXG\Icg(10.-1%&N\6,dMOVr
%4KN,8>LRN;2kUl,jkFR%dLI9rq)7Y,A06RJm^U<%L_o=#6hDej6=(07c%@+Dhr]MshnJo?^+m3"]tIIs4OP=d*c`@NgVj"HHG0-D
%qe1B:h*\?"GbQ3cs%FEiM3[m>4PuRZ"N!3L!RWiPofpO,HkCf,e(9(sqtZ`EnU1AumsdIsNf3B'\,Z>$?bcF.2\0-hLC(_fo0n-d
%^@/i7KCethE.4Di^,k?M4s>s`Uu0LHW>jE,834JORf5HQ^Rt+sjaFo&Qc&[u^0(j,s+qn2&Z/hqCLO2A%s1JK22QXHrBuC@%BX^M
%h$eZ];?TQOZ$"8s$u_)6Fli[S4U?mdU;So>*%I-0#W9Oi]s&X1`EM#GXT[qL#gm;;:isTl$<j5c&Zn*[TdpN=^rmk@P1%qr1m>nL
%2fH6TeHR5"k":cHIKgZ8Z#u0tP=[CTc6K)c^B=S\\)D8?dcI"sOtI+3FR1QL[]__9d:QIX#!2L4jlYD6S@^_*Hq/-'7mMA"k_M.=
%l*_o4fB.*Z=SIO"FNW2[ns,<Dd5ONR[;S1oc'&7o;p?\:SC#3=O>!<>#\8Ga\7f,n?T7e']/ag+pI`!.cnq"Rp;H!?k(\5<s68Cp
%Djhoi?clPr+@s$*.EfpSK(Dpf;0(OH'=I,d#<?10DDqBMO9ql9m<EGR^n,o-G:p3FJO11$9A0<CM'n]F(PQrs!*+KM0#l@2.==tu
%MNlfc:3-5t#Oa[ji3_]eHCEu:XLiFbKuPSGiR1#<6<=AXFQiuD'.WYd]57/d*QSX<P<3V2_0Pg;e_>B#a`=r-]L?(dX2`q*>ki3s
%<bhm)Ka4=JG&33l?\\$X/&P&pKdg>V^G/-<h,qXYb/[]((MLU]7tWc[A\nqBlY\$#b0n.^`kHI*>'/%ee9!t;Jtbq.7?SnlN6iTd
%3*+_ROTdW.;!QVN8sci/>L_JLdFK=&;@P6"%0f8q<K+J/%>riODh1rM]6W3N"7c@%^2_QJ^\bMlm]PmjhR,pa2G.3"jX,V.[Ms82
%>([+*8%!gSK`of%*?&,N*;SCsW=]<;H+WGhPO(V\H>:tJ(Wo68GNLY)PB9'VXHBN'O<h8u(i0GgGqm5feOr0Vg4F>KGcY&$f(<p,
%O0tL11/@7(Q2'#UasW:gUH;ICTWu.!g(+Y5]KE=>_fWZ^eT?l+puCoR4te</Mo-P189m7J:G&6gJH>tRUFme3>QL*.[`XKd_F?'=
%WcEVI?]Vm<Y^`^\=#kGE_QYc@STCjU]4J2[O97KPRCKDZDSp7IR6t'+W6RN$i7X'Hecqo:=Sos8jS74cTI2Ec_d_R7i\Ghp7We?c
%XDIT#8DKR;,e8R'f[9C[br;/07\rXf<dka#[jFHNlAcblSCYtY3RO^g.CCi1i'V#eomW[nn!fBTF8*oK2/[6P,8MP@]92\*#h$)D
%n>R%0;(g3Qj9D[iOUG,g.3q8Lqki/i9'85\!BZhE+mK2VHF*L#Au>nhe8X.kpXKR?oHqHia;fuHlA2hKC\Huh<b4=TeY,RO1FSaE
%7Inn/NH:/p;P.P16Yb-;HUTX17l33gKrc7'+E#@#`\#5!<9_(KPdR6OlB*s3A;-sBF1WJ4Jhfo,`^ptA;*`pFqu,sY"GbW8_,%W^
%a+-OY<Z>#tc5KP710^r:Fq)Pe@B?7=c=BcAnshs%,g4$rDm`R)f*g9E0C@KZ;[4kBon[k"fRME7%/XkP*`3UXYrTa:a=kS&1KIHP
%raVRTL3Ze!A:oo8n8KAc9;Ebt2F;@)[M8!TI7<6C)9Rgopj82h7*5W+Rd#9:IYoAEmQ=;q2"l_RTtn9++o+I9o#ae><`1ACF/bbb
%,gZhd]JA4&^3@U5%u[^)>1%"h<,;.!3Q^D)A%!^M%ljO<';FMs)d:DEU),h%)&a`+VI!q(9qs7WDlLXLQD*<!,6AU]4N3d"@jUMI
%`JF<k\g3Rh.(STFV&hPY7klE`P6sqa[*8VO%JRGt:J?%^TfTqgm3^,uM^)O$b&QhYD;:]\7U/ISQnFjaONc!l,%E+k4%XFe>XuOh
%j6'=f=h@t?s"l/3O:M3Yq^$8L)Id<$^E&(`d1jasiE+*am-$us2DC%3^u6e?.mF;nIfQF4*7.S;!m%tgKZ#m.(.q!j!MuZjlYK8V
%@]!s)5VZD-Ol9#`S92(<=$(fVmIPe-5OP+=DM2:6=,#<GjS`?j%ANRL.$0Y[Mc/B/TgK"7+@dE]a!Q0=XY'@iBc9TYC!T717pStM
%rH.oH$9H`&$*MafHUf*BK)/>m=:a;)MB/A&K)UBR`OYG;DPAm!9CuX9<XQ5)L)NZ\YC5Q!@tN;G&XC(;]3c`%5ZuTHB4LI;jbQMT
%@^N!Ld+>j+>iPh4Q)1OKD2X<afN3T;@r(q7<A/R"d3&#+a"kH%:Ho8smGX`!6$>aR>;r_H@s]t=eWB:\$]>+WH_`,Fku+R+bj!i(
%0pE?M[f5;h9oR"r8HXj/U_H],q[#;J+nP6BX*j[+2Cn#WncP$eJD9Ind6g;7o&jCG1l_GL/N_q(pst<+ZT=ON`[I)7@KP,dIYbbQ
%leZ[We:@!?oGOfekhpu/jV)S(l*dZCI[!Mpc2KOq!(BZAK-=Pp)3VA8EjQr5!8kA)MRBU[n&2)AA3!_\5`51j24$.#eZ:@NoV`GK
%=t\-rJ&8o!pf5%T=,u^Pn,oM._L++d0(6UV0/]`?)jleB\!D!uD2+Of+4=tf/kJ#I8UgLojJeYV7>4I!&guB8ftETkP=@@,KWHDr
%WtFVrq[rD\XArUinLj:s+-rVMeu(k>q**V5@'>PDV)5j74e1b031i!-=2e12/5+JQ2d-=t8%T./WQ1@8ANTc3gV\#aU_1.WjbRJ>
%qPLH7+-Q#rCG29(S%nb/+p-?VE^h5iM^@Fu:P1Wm2gJ(IesfUol&$]2:T5FR.dpDK)OW.PC7!aXLKV$pWjT,WS<Pq3K?cDIf=lg,
%qS_.d5R3QrR^i0[gd,QXUdLQ:3V$G4>*Jbu3tYr#P4TaLMmJ0Or(mP>@p>t:SDk6U+@=[IDgD$r("^TErpInk]X%V!=,5f*j&9[h
%B1b(`97m6$[hbDA.s0T*#]f,7.S/k=M=YRc;B-ioJ>^V&,#fp1^+;334Xj\"n1&+skeOIR(D/uX'd%#WS:Q2o[]IA7#dajUH#4s/
%H1W_Le)kA)B"`1;ET&$$/BDOp]F#&2CO`GG%7804d&ThVV[tp/=nbCf"4\ZF$]qN^InkD!.4'SaZ`GXBeruaf'pGJjk,eI::r&ht
%X)AGI`S5Qccp&VkJ`qB3$peK,a!I@>6QJ'*C#,FI&qDhB<MuKPUFNG_QUr;;4e6t,,a*g__]ic]$mg!N"hD"HLqqE\&Z##Q_CO:p
%G0GO"(fh2RpFL;uOWk,nf,O$MpW]j[`6__5@XJ%0H/)$'/0_)VJn87ibtsbZPu2p6W3"*(:b?-"iLLRQ>UhYL$0AQZmV8g"D>G]A
%$_i/71bBW+o!_*cS<n1!&sAbg/Od\<[YTnIYe/CUWZ+Nr71flQ!'&@/WUSZC:FoG;m>*W6,^&Jh<FuF!g%VXq7"o^j\jO/QYH_=\
%HM#AD)Z'c+ILuNVMWKd*LFU!2'q^tmfkuLu6HR*1[f#qnUYN6"'2A-+p@mMA*kOca)#2ZqaOP/B-j4O@UqB#\e@NSoM$hZKSW8g`
%1g+A,RQUPK[c1gn3t#5cjAM\0!/V+$1<je,^%SSj:(Sli;/&0`iH@XC"":NG1BgEg=<<8TL\S;fRPc0@3Nnu'@+Z6;h:NNEfU/H?
%]g#66\Z\@Ig8RAI"[NT_p05.ZphHc5:&50V$PZ%lg^?!Y7rOC4PiiJ_e6@h=V%*W;\OhSt;Wt)(pH:I8Zmq`29'@[7/9<s42IJNV
%4MUdI>YG])V!e'7=89h4[DT)DksI<@Sdc;T"LT:u5,\3`G#,!cj/ks@STc(.3.]6TcQ,fKIHtFOFuR2IZT]*=:usjWO0Y%G(6thM
%;LZtp%pJW>*#akaeDFI(]lgNS&<NQFNP"&DQiq['QuXTO\W9_#$'QJcB#q`CQrEAfALC5NK);:%D9/,&a_pifZ2/:U@B6m'P_%j`
%_gqT\kq`MF]u@`e$/sF6m'75,SBSKBOZom1euoEZ'WUUPb[@H0QZ`,.>3^S$rkeAd7TuN'Fo(4<"sd%52>!`J#=.9NO]f]mCebJ"
%9<U6p7h\-XQ$oi(;=Sosf/o/&aI6:#$m8uuVI)D:PH$fWKG]SmDnXolRXGNEFZ7`@.C>HmO,C97<%kedk7RWI).W.tO8!+M,Jc0l
%C7c=[hu4(Wi^a58@_AhAfr'\t-t-7hGj_VjW@sb*Y\umlRjh=g8s9;tCf5Q)#I9]2Hh'1H_aimhn83;X9Y8IKHVr??H;P.#N<J\#
%[_YKERq=j900V9b0W"'IP4N!:b(u>DiDY2./cK8%NU(jR[ic2tnubFc)]PP3';02M#*:bTFf:+]`*JHBS/348UDHkn,<#g`j"t]n
%F*5MU<],'SnO&G6GZMiq02^MJG=@=@n*FGd][ZWAfQVTS&>+OX!3CKB,VU:#BrHrMH%!:/g57P>C)90I6hi4ApKsY5b6KIq?2SZI
%!;nas5:k@pD_5qj)q,;H?k&YGJ:\pbOTlPEksNp;SjMP]f&d-42Z*q,SVOhO8k&-T2-$.#&Am"pLf<q$8^^c3Tu4W<EkCA'S+p)(
%+m9\C6?i=eO6H;l_=IGtY_R\g'Tg\;HUc._>?Whec<V4!]ET3W\]BBs&1j/,.p<LBMJ_/Ifh#V%;;9md$UMV9K0s_IT/f]dKSJnZ
%W/g16;fj^bo<gK"/pRe?UcnO.,>9g8i/.'kOUZf"DZi*=%"/XuVNFFY@L0>]]j]bbjZL55;L&4+-bMo;Rt7pg,sAUui:'/*HcIuh
%V4J[!8c$)lK[`HG6u)@P.^_^+rj-7_?>-r7X,%n=GE)Po`G7bDf3RQqp(SNK,8M^a<Y8^*MbI;DQeqZR(>N1;6S!Mee"Nhf(,*A=
%@&15SkoBtR^PC.cYg_=$/RA>80F*6ufE:[5?$@O"c52OrlGkU[T==.(@FW0^bhIn=[E2ZbUY,j$;I5HXdCLpuBt"ai@klQ3<$PJ3
%>/f=)QHC\A]nS`A</G1tTXFZ7bT=5o1*4tgLV9"tM;il/8mt%+e#CbbI:+7g;O<Ac"JDJ"^PIS\:FPD7cO*2;5<r/p)(<$F"_bo,
%VtRD\/$bJ@b,rUl6.Xk;WmHHJXa&k0lO6To24@Ikd^Zc_\T[T/Z8-J@$OW:>:NXq++0q4=Bn%V#"4'(FOB*cR$!ueXp=X`$c4H)U
%Ypt'sXbc=/-I@n7eq3Ad[I68fKht^n*;]llbCECdOCNs,Nuf\$fq$^?\U0&ANaeu!C$So#oR-&"]H-@Ze\%BTI5k"t2ZQ:?(9$<.
%cR20Eoo>\X>bqT&\@3M*#61]V$;N!>"9>2F$TT3H!SJRLTbM8]XHj`"MYO%g"D@9ePcO1dRJUKTQFFUNT/<[Ug<@/bH@PIpIsuXD
%*jpJG._;6Y[g'ZR<<0&;,-%$u'sIbRqL=)r]AJ.Am$rX6q>f/J6MEadBQ&Aln]H1nZUS9XIl2kk"Z5*No\A8\KRqT3p[@!,p1rFc
%H.eZoMXPi?(*A6OmSTUI'**26M=qXiF0UNXep@cS"cCu`JRt7SN@Gepc[]b:&#"sFk-aZk6]]0/H1Q+?IoZI&h/`[EH2eleI2+,B
%nVZ/Y:<!a:_4-58K<D\oL\eDsIVsYjj0nbC40cW\X86)%bXIbgpo"H20D(OWVP/=05Xc*AqG-YtmmADu>^IPeatgU)\]jncBKnGK
%QhTAlcrW[_6%"FhH,mH:EZa"RF!&qJhu6l.g_4Pr;0:fY58G:`U6]mpWY'&_;%e#FChcsJI`S;"2^-,u2sQ9]*.+,"s$BjWCtV'J
%6&40!rX0>BfKeQ0F.'GH\epmf81q[>Z5LZ4jgTbd`8aV>`LBbH+V.T-ZJr52&[cuO92iHR_S.VB=:[#8d]bXJR23k@QOUXB>u3p>
%8EKp$heE']Nf1:g^C'OG@;pbN3j.!ZJj;t0HDT=c;d`iPMrg/fp=<=T:$?U%e*aC(jEdJ6;X=aAkudi6\f\2W4?YA5]=VIM/2]W"
%\)$lW@qh3rDc!q!]JiG(&#Z%FRf*+[2cUUsWT&M^j*Q*142L?`h*qRI,UB$6W!0LI:de75#WdJZdL*/C`0uj_UCb"A%7tD&CiguO
%!Jp\)F@jE?P[.i+'JTmeAi<.F<TgIt)J).AC_GMuTVc:+R&-13H;)!cM6s%,0bZAOGMReQ%*k^mAUk4bb5G:6.3W9B]888%Q1p@_
%DVQ\C;P:1=35-mn63!mQ=HWl%4q9O%C\QX_aF6#qfTm.)DS+nWQbC&l=5XaIKZmB8Heroi@?:]f@9ssP#*0No?$2T=/^e`1Up$b#
%H^&oq'dsiR\n7m]M`q\Z$Nn55D\2$m&EQ*si+W3%I5K!J),u8?OF48?B_9[6$>LJDElN>aaaX:^*LncR'Y"1/XE?A6o]9#Ds6A'E
%5+l5WCYgV-:V/"U0ItM\;5!&4$s_YFbr^i&?aSL&1R4)kS"PGYJT=UUFMZ3TY;A\68,SksIkP)1'7*D_\*W+7#!MjW(sS4L6gA<d
%W4+c'dNN9E9%[&(<_O2^qN"1C:S\^_Bj7r8h(EN]bo$oZ">P\OgDhY2dqE$5jmQD`2oHuf5p\2[(_9g9I]Io;2UA^!7]FTNIF`u]
%e3q?2SPrGs'OCd4;Z4"\YQa*OpS&D1I&O\j.0kA+^(<%':!U+uDA3hN-HUfR(\XW6%]CC'/V*E'$AM#22G3dLP60t\5<$PH%HQ_2
%XJB[h0DBNdI%H.-?gW%o;'nnE6_C[T8iP#a7*Bt(h2>M:84SWd<'9d>c0t$(<IIL6r$/:n@g,E+8!\%o`Kq&V1p[[59VL88<M83a
%LjC5F"saF'R2A'eCE3_eE]_TdKa"_Bl5:=sY_dK$e:DWu:cV3Q"hRR8gD3-=.D'l!&lG1nfdKf_6GYp`jZqLg`VHnH?8sg#1P]Xo
%*!$f$.X#G^$[L@`k)g[1[FF4`r<1.E<j.MXKtL:K]?mFEctfCAc'<&l1pq2DfH)bK3Z<Db(jWGQYN.LTX$COXMi=#o(5+K5F"eoZ
%Xife&=q]2f*EL@L2%`\>rlSDr-:R[g#?@m^.iW^ucg`cPrh]CO7]#+F5\g[JO<"ao;N<&>.9RSDs0rtUNk*>c9Prgei=#n>p&]6A
%eq7T5.)s7?%]R3sE9Bm7+T'q9R\sJjQ0U'c1o;d7+gM4TVi$K0ba6fO/*1d3mcC>c\U3],HC3@Tp6V0!n^8edQ$7^S$=9pW2g&ph
%afYGCUqIIjkIa8%[_ic(0HX`,&goE;8Z>d'Rn9/CFXj'K(CPnHUH6_<F=G:h,Oees/U3,YT6U:nCf%app:*p5F&b!g*".>O%XOj^
%^VPA\91NWon3be^CH=I2aZp/]#XF<0J>Ru-L[/Q<A30#_Vt/-&[hV`J["D[R[0E;A8]rNYXl41hg#9BtY2HR1?(nhRl9KcbbE2;W
%>MpH$ML3tSL=mas!As9=e<^VE1\TY_\,GjeNu:hbk;@._HcVl"NbBnreF!J<1#:A-6s%F]8^WM(5?!WJj!Lq+/QRY7Q31<Qb-/&p
%iBgX$<T9^??K8Vr@<^A!!?qQlC[c!;<$[T0$m)F["e?kg##Fu+.2VduZ-eJ`Pm=LJN09pr.<fNm!Xt-kZdijLb`/4[A0cdsZa%4R
%LOJPqV3*%s\-J%]7>e42&gKnTPH2eIp<:Q;Jd;bfeHm*[jDM^A'\SU1'W@'#_LEi0i7eo%>.t%NW[JOLNY)9u&[+aejd:cbF.;h$
%g3'TVO\!Ssn2%M[4hP=s5iTqPZrDKZjCl"h'e+=*?RW9H5S9s2s,KX[+;&u&FgC>nhHFC*9^R/mCJr5!>0rTZ<PF!Z_ps_u%?B0=
%3U@7(n)3P5_1]Sr>TX-+;*to-P.DIsd:i<dTL_BKn^t<WXo=u?52L9iY:L?,$Pgi_n=I?k+BP.J)KRrRiqj4]-/2],bDJ`^,[:W1
%3kP\3F+s^d7RLF'&8Y1-NME[:N7e#[,7V!h.=Zjl1^u:+r=>-Jh@K3d6g#7S7k]IpJTd4SFg"]$J0kHRH:"W$jMKas5=ls.%8tq(
%^DPLOUT1AUGeL/[*]<6'gA@t$ME'2)l1f0A0/d`I6"mm/&7m5^/hX))[J$-^/`iO%CT!>SJod@3KpL?n3d5T3-"CkHl(HsI[!3E_
%fXK>KMjf>lRM'obbaOnFBdG-L!F:%<?40R3$%6H[6[d$sa?0QF/M3&t%5jpPrje/>\l@G&_M"[o7K5.HleH?@Rm+hcBfF<0W*MX5
%!C5p^(;$*gW>64B,Lf19'IZOFf%W`&L>3J.4UT4k%-2PLWC;(E28W!i1)3T%22]Lu0/QLfUMB`Yd#M3F3>JDJ]XBI9a%D5[;RT&!
%M%[BD^?+F&LK1AE/R^+!CX$o]Ctj4$!EH^.h",p4k[PQ#L[q-nGr'Tj.%=),>P5SI)up=[BJrE:oX_'hn!>[Rm^8LT^<C/ak9EBZ
%IBVHKFO8>oP27]:'s_<Qh=5rX=qOMlBa6DlikOQDD'_q6#m<],&W"q$SOf_OhQ-fRae=sFm9=3YEZ0`'d'`;)=kD@GR;u8i/fKGU
%*C@U1n?R<V$MfGB$J:uSRfi'.*"FL;JB?K6-:A-=Vh0kG^1,a2-%L>**'X13nKJ'eGG(C&B]tHpokP,s7o:kS^ZsnBiaOmI(7Y]S
%ECp_l;XO%9YH=SfL3JYr-I0/+SbUDBh=L%s5Nr$j6ePhAL?HG`9!Kr![Ri,Mg,b#PQtU]:W1Cs@U9Cnh#=pKa`H$J3iOT3PcRhFC
%RiI)K+ML7`jtP[#[n>(s7+/)kPq=V\K#hA0mmortPfVK^4_QP^@jt7bIOkah62Ib:e,mgqVnF-J?+'+@Y.REL)g0(),j)a(63H]]
%])C8ccu$)0-ggZ_m=+XjDp`n2IYD'19DQ-iS?M0^1,Y!268);tlssNe'o8gj22cbrg2gOO<D&0r&#:Z)\W1GAK't4_)2QR=qpsI'
%Xn]*mN4,D]hiQ]jmId@#]6coZQk\L/,2[9`KS"CW5"\qN]DV*8r,RUS6U*\FM"r+gf"+Gd`"=uRm$hVo.-2/PZLG;)WA7Vl5j_,4
%CDA?jAA:DIdg4H0O)8_m!A$"=EH)umY14V:cNbC+UdM[P']5kl1L5dcH&D`pMggb!bSeJj_)'AXLVK0LY8+I0H&7%jXj\'#Fq=lZ
%Wcs76@(Qn5UY_YYAkSO?0q^udO1q5)'_:nN.+\h[1GU'FfF1%cbVTIr$]B*a3iK6_VN\?kTXmA&;:OhbQ/]%pKP!nB*^<an3jh#U
%6m_KjqbtrQZ<PF4oA+P[bQf@u/NtSLS,8=*SuF9(FRS&D``i6I##[/^,1^)pVq1gn3B#dC@\sJnp1IYOrEr$@W3OE-,7ghWU.V&)
%pShYPMGTsdbWWuBg<^,h1h#t3JBH9743#"]e.ZX`a]\skH#MnY1"VseABenr@H9^0hNW#sKm6mb7rVW=gWJ1&@s$ec)p>T*n%$RE
%pIJl`93B#8Z+%W&'Wfgd:#l:Ffs_ske;9k<U'q'^Ofp]-/rHIrVu:<S*^[j_!pP)]WGtpEC$`M`at:O9S7:q*d;ga1VrJ8]M0$4F
%^!NkF__/EY]7)TdB=[E`QVVf"Wt2u3OVCmJ[Ho>uE1r_crRf$uF0C74(PL>@:Jc$;"tN#q]I90-dkKY[OiJ'':0g_=Kf?hp:6#si
%FPQ4C:*N[JFn0"oRpR(`b[G@@l&u,H]N0X(*_Q;S$?Ba:nr+iP.r'@\eB6!EP+nm%-gb@ec&WAf@ue6ES0h-=#[`<e%SHu_[ag""
%rEq,\;ffsV8KoX[:f>U)#%d(i1NsLmLo=ND\[q,#P+tcX*8!d:S$U*g#p(t(QO_<cQ65X<Mg_-L4XHhXnZ<g("p"#-Q%^mo8`bWl
%10;>(ZaC-\f!3@>l=CAG:8LqK[I*0&NTg+X-23@h_57GBq6Z`]1gO]%"eD]$)(eU"TOeVtJ4#mgAajH98$2XS1\Nnk0'asIb`,Q`
%q/hjT=AcL"cU"Ojo&n+(cl(B6%VKPknclDM5+:Sj^@g<1CoO1N-EJ!e"rJjFOgS?;a]T1SbE<@0:2&>,!h,,]E\^Q(H2KGdU^P`:
%S%X6C9!P#>OnL$3mBF+IfhsSgQb*^G\Lg]II7WUC^kML)\W&7d)Zb^=1c7<.q??]+Q9mu/V1_*4V-AUu\k-3/QaEF3`K);[$0t+M
%o'a9c4hX>)<"C^9"Okb&:SK0n07i:+/!+;$Xb;7jV!4cc]:9N[JJK:S>3gLH/6Xqm*:$*-4S0/%:9H'p$\.e`^2#mL\j(G_WJ;l-
%^Pf`R94@L$=HH"I@?D)l*lT6]XNHYGO?qR4(TFe*,::d4O+$up@F=65/bKbr(@SO((+?*Oen/XLnh6Y1kqGSpJKbB$l8]iqkD&\W
%ce^7n!`rb''MO9_B*+5-ZjO,*M@:2#_$CK%-4Ve7FR`"+d.cnFIXVGsX.JBmAniF:CCeVQSRsX^Z<'N)52EH)9>O>j4cW99R.XdI
%21$T4@nQYCa/?j='$3G1f7o9fNLRA%U:K-kX+%ij9I3`jYq5T"0]db9(5\Mu!Pa20X^%[8L6A&#Lj5h^M9/;5'hbrdl(A97Sa%m^
%hN2ofCnq90*fR6S(*Qd.Uq0Xj$>DP4ctM[P-4j"_<$nf8dhWrc=rk5MX!lq[Ej!iPXXu^gY@?SF84=:RqH7B6&c`knlFN/LI*bX_
%g[hVubE$+67J&mOo-pHT>P?W]eD:=1`#pnr\jED):`FE[:q](f:g5?BFkpEFR:&'Cck(Tlm(2ARYt,9l(&9EMGSYiS58pK?9VK[)
%EBp4b9gs(E3\#:J2>hMoRlJcnes.\*mLhgC$;5IgB\d@a?im]NP&N4c,flfY+N'UpC+kboW+jP^.&b>=^MU(XXnojp'[\$rUh=Fq
%e=@-V-b6/W"NbLfedL4`:j#AnJtau`5YI$XKaa<$phB'sTpUB5UE6GB6e=9,8r5[L@5=(Dgc$Oq/%[VpLackVJD-s]/5rASkBq%>
%ohl(0S>VK#.(HQA`&j+dgU8AHUG<L]kNh;uF[E7OEX7!U>FWr[A8"mgo4k%<SO@H^5`n=*.RXd?M%`MDU0(;@Hl6d>/I8bjZQ4^2
%VdePkIa@+AJ)'@tT7".2Yi"/:Pb\p`m_mgi^JR8<%R:Blq0$627DtU62*7D3'U4Y'Ea6m93)Uj;qM8)L4KP.?gt;T/fPf)qHT#G4
%8+<?f-NZu;K]hK&buiboU`CoNZ_''iqm@ID>4rKslN&(#CnZj,K=H!$C5gRYCps`2Og6SUfaq:Egn_/AJb'%"ht^;O6#cAa*)\Tc
%4/:cZ!u=P[frn>k/$.lkn=kV<AqU"OQSfES`d*uT:O]XdVPKiJ9;Ut;.VT[)kq149\M-sK31d"1q@:8FL11j-\U76!Jod1i['V/0
%87i[kIC.q"H#Oo1giUnOZ65h.&db6ha+]As#`qLNP4W"kTlS4m5QklIleZ?2%m$0EM(U)lh-6GQ^f\]&"TV`LPZg$+M@*A)+=9[m
%mTBBjGe9OaIIB"kIjL<Er9"_:;L+T$24ZP)-=]EM!t2JNZ'?DXH/-n%&#HXJF$SST&Yn\>-jM=6*oI0=C[/d$96@/=81$?qBu[h2
%3US`#*TYVd^+cmkn:KD-)QehU!Yl*19<[r704![3(t+nj3?khG[j&`S>cMpTGLc*fAMVc4lSO2"f*-;CBbUNp0[7%]:o>[knlBMA
%U76]n.Ql+WmgS181,tW@O-t^nr=A4H'Qe?eQ?-3$LD+/`F&OPK\Jj^;l/%roU_6H`6f_LBVrRiIZC5lk3dg&L?[X<N.<E"jB%i;^
%iX^,XRWr',oBpEG[@,C_d2HQqap&bddn),_nI5OX6:iS,b$^G1BtY?>OWU[kX6fW8\ODHs8+DE>G&G\m8)D#58EBe6/`%IE(J((c
%Q,/(c$E&=b@GN?.$bn/&@Z^$pkT]t!3PGic$71k3A3I47W'qcsYu<t:W3U2flQ.]gcRC+N(Z&'n*Qf@$b[R.Tnc''[W/_rUk.]2q
%0Z&*=,Gghc/i#h&.FpJ"-8f5?jSaL'Bg%[_$"FdCRmEI6$Y-D*cnttV@RV`'WgOOe]T'fO+/2<q\Kd^/emE2m.Bon;dm'e_e_*BM
%Nm5$'4SGAer93nf-W-8PIT/Yg6nQt6R?S78a2MZ9&We9qYHds,j`Nsl>WuL^8DY64@Om@@F"095)WO642%hDLWS]p#5%"9HloV\.
%T5XGro:5$tG?U-:Gcl$EbF4<"SCZ)>'''m?d/3qli=fMplJK5KIMWM7B@G.1ltC%d%^HnKjLpC<iZoQpop*blL`.5DD2C'#8P1ZT
%YnkUHU"%Vo6pg,AGblmp&0*Zd=nfLT$sH^<gLu_m&O7r1SN@'CcXD)2N@=Rt^O,OrIurp,Th=s`p!8!<%O>F&;G5;[]PO,KfFsKg
%8Q"5nK--#%RRD-OJI^HH6FU]"Z*q(Xd@^3iO1+_1F;litV.%Rm6QQTEK4ARNo6eD"jc)fY:(F[1q9M*@SmfrNHfqM1;uTNP1emX8
%R7A;fW>DeH*KQX]pm6V'K\oGm:=+(NP8R)&jEq[9B#S.+=_Ho-^D!:O8;lhfR?W8mHn$5+b7_I`h+,<"WSmN"_1BXl"7jg)a!($s
%#f*>_&&jIB1F/qJW-lZ9T*GcrijUsUNU!G!HT-+g1gCFOU-.Dr;:YoX.FWS]o/P[;[3o>rY#:R4LhCZdToE,8!Z@+`INP+lPQr""
%Q6&?;o\eTj1DB!EM'Qd8FBpkro^","6]jruf-As7Xi8G9]c?<NecEZ];@:[BeAV9:Te]LPW$Mh>h$bfF'V/TOFtU<DH7nrh(Jg"'
%G94.V0k&Jmg%:6Y6hr<*'ikZF:AqXkmm_l63F]O1(mmK&B<pZ/-BoX26G6rM"QhbC>`e2A6DJunHN[qQFF:NN+`#@_h^dC?Q-j>1
%3Ka!,Q7c#%,p9I.$9C!tiA<]fmfo5<8!5i*RP/J'L0T@86r.J/X)S2n1Akf&.pVVMd/(I33)pUUG*0<c6B-8oW?/J3%ihr@On"]C
%r:]$^f.B30MRWJN?HGRVnk79JFc3s7XVSmf6e;?#aGN_UkC:/M;-)c)p)R<BRJ#M\g`WV=ci`,f@cu1q]uifNhnJaf[67SiJm[H/
%,)CR0lhBk0r>PO?%:3uNjus]UG5$Zj!M3u>GHFKPGr1IDs73MBIeUhIDa+3d?f$0M1R>g`IJN7Hs5dTPs0jXFqs5Cgs6:,5^A-_Q
%IK&qu(fl]H.`e62o=HY>J+M\!msau`bHLs@eJE`5h<0:_o$;g^m'@>>OW*iVS4uf:oKU(f_`.T6Q_&OAbC9H)huD]:Dnc#,n)NEB
%qkpXtq"F;<%mK1(lhoB'pp@D8LA,&)dJG#p\,9g0]V"b=^]!&>qYJI/^NnJ_2`La(lT]mlL[u%*^#OOT.E>.d,egI-J*S`]KeIoH
%O'd>,k`UGnlH=+[r;=fhrq#<&puCOEIImB&b4#5\q0bI(\-C-[b;jRWk7.IMM_G+l?b^mD(Y`HoZrssDptdkPs(>Sb]_Ka$r;,_,
%Y'T^4li6R+^\lOsn+4*OID92$`rGOAT)\EFJ,K63T>'L7qf/7JeoTX$G<V>1#%hM];Wig6SED&H9j'R$WKNY5,qH*eb)^%-S)kM,
%.-rDX%^=-A%Rd6<6d#$!G58*94j%-lI,F5u,@!R2^\<Embj/?f@pY?(:a8<W>5<X=R]:e8QG_`ScML+K?N4\;\ueOqO%'dS=n^^B
%a$0E6LWWDdkZr5gfQT]E;>EJ:rm)0X+K2oYCE!"N3q(C%pLC,Vi&2/q[Y2`0;o9-a]!J\qUps?dS2(B9k[9bC:jqY[9[iD33+;%Y
%H'.4Z7fEEX!d^!HZ&3aEng%ra7`S[FWt:O>lGglIT\&m]%iOX.`Ua>,pu6KELa"]RO5iT=!rdk0-URr+-,.&k/c=2`C!gbhr(")p
%Lqu]N$@IWi'^4*Xs6t;K*tT*BjYKODaq>p$[L)&FQ"3J"6"tVVZ8Cl-iWODeNG4[*!GYG&TC!dIS[6u).fu@][jMM0#"0GoP;o0h
%aW;C$Ner"Ie]beH4$-r:GK/m@-4o8LhZZ+.'92Qac0Y514P<EIW9Anb/t"+,a(7%GWjJJJ3W>05nStocgh^&jp"09oLn6/AKQ18s
%6Ihs=g@6-T/+'+]UmU*Mg.8]:s+ehN+H#UGLgj)\8gB^476Ka8_k!MA-#2u:Cjl4-mrT@p)LMEYf?rSZdgi7p?HF3n-lSf^;<B"<
%bM$%AF@f`/qO_\S"tXPC#_;,BLPSB`)KH';>#aq?`.VFj!di2s&XGd>_1>D4Y,\iPNPDFp=mD]';_^^R^>;-Ap_<CLHga9P#]0lG
%e;P[.9V'@g^7YtK,S#T]^_!bAMKE;fA-N?-cJm(/d-t.^r#ukY";UnEBGcdCg#c"K,-jsFZ@ALZ3$LjE)56oM6t:m.]8ttdJe:*-
%_RWi``Up5LQH2c1W#"t6o8M(^,E-OTm=AJ4oT:3p;mc&5dmU+/-i3b3K"@T,P].>9G=MF"K<C@(gSaGtD2t-E't!Fu"]J+M(T2=]
%N[9N00PF[q5sTbNgoed&(0&MgWr*K"Se^5sAT1Jp'&E!,j/)S5lU?YV.2)o'\n%sATut3FYin%uW$)<q.gk4sbJ#ho:Q<MR1>3e,
%bGhj9<#8PMigBW+::o9-N20E.^g-+VFN@_nNuJsu6TNMU.G65XLWjklD5'Wc9U.),<=WaYZKu7i_q"Uq6(_iN?\Z>a8"@*IK!b[u
%SJ=U2_bQHIb$\h(AKelTJKr`[a=r;\66e[;k[`8ObX<.#BuN#78@DM4deqIjBb$J+E+(3\h?M@rRZ9l[:;)`WbRBR#J-Dm:=OU?/
%oT.%rs3<<>JIVE3Y<S-jI9)$:/Q>*OAeio/%^Fn?K+Yu5M1s\N:I%b,Yl]A$;db]r\u[H;5?)pZlCZSViHXb'O(tD'9+p9_On4$i
%\=IT0Z>nhJhFH;?YP:cUY4nB8B7nL3qq&Gk'8Og,'c\Eg`+P%$Fi]sN%j,$tRVKohW.uLs>)0$:0Yn%s[;\'6+s!i9L2FZZi*[7d
%irjttc=pbmK9[f_G4GYjNltL8E]J:3;+ad8l)#qVM>^>`IkKEJcWMRD00"<?k6,/MBL.7pFrZo6im.neP=^0UVGC',P#tndJr*RN
%.WH/&9lVXi_ZFuSAV\Ae]m/>05@e#H8u(`uMZR_!ZH,p4*$j*Z1/+T'\'T)lo/2M=>`0qRm>5[F,RCS`adse,AK#q.['lhgS3kjc
%!9X>VL0?LIO]IL1K4d_ur+H^&fFV(Bd$QC-Q.+r'R%.?%Hs^l%0;c^Nf?ZYt;DbTlc#A?O_sKQrZM0T$#LTYr_[:b43EZKQlU<X^
%&LJ,?G9&&I\_uDoD),"4K0I]&^Eg/FH/l$D*F]I8D>?(;88lu!4$X?sC]Y<.B7/@REF@*;L0Kq=r%a]h`=R,>NXId$-+j/a'l2.k
%]6:s+e`k;<10l*ob%S8(McUE--(nuR18$[`TKGoL`pa:uRcUT1pdJ1^$F1)\3C6]:"CsG&;!HR/j;lPUG/bo]*cEi2Q>P#)0PdWk
%O#?Abf)7N*)]i=1<VF5-\6Rl/*Nm65W$!T(!HBsCGc5mT`MH9r15%04;^)P>Q-jC[@/-c5S]9WZWA2R$['i=;Pt*2jSO\WA$4M&X
%@S^O*_[@&SJ79T6dd)ilUt/lHLoj\NE##3sh'7*t_rlQBHdjW7OHk.9M8_cUlYnS4d!=-qTnKKC5s%5Cd(eDQ`Moa-@!g,R"fOb#
%D)WliY]3!?8m<?Nkit/o-*ds+3CmTH:rfC';Z%B3O"2)'TcZ]2PUO;*V`ITX;s1BgRR<Ce5\uGl/ch4UgL]ahM@Jj%[WgV=jdeRI
%Cb_TE_?&>K/)m+h6>!k;$?Bahjp1M1/99o@f7''LU90T!P>V+ZbOr<;*jk.gmc]hfa,"?oI71kBI+S#q"Y)-^'?'#=<6L#"7!LIn
%m%Eq88+E_[qR&Z_S"Ml%1Z5Y0%qmFR9i*^/+p('hh)-HKaHg[!]/N(#rbceT2d9Vagmp#d,&=Gu_$-*Z#[>\=7YUM-IK5B2/Y5dU
%.JXi35,;HV*k2LM<,%5ekl!Esld])J>4lfXKUp/rk0dZ6.SP7<0I;@(H;^D=2q4N7'%Bh7>%@Fh_%d&,\IMAMJ\?r*?B]-lKttHX
%ZIGCkd:h3c,U"`&[:$.&E/GPP?61NJ[3gQ'B+5Up+;U:-s)0s"n/Bn)ellVSCA'(lq*XgPW@:E3TU-CcI[J0@mu6m+U!;V(KY"lV
%a4SZ!df?CZ7^L@Ho?sYlkl[2,7HBMN6e1qfn!Y=8V3Q`(rehbm>4G:;9JE7)]ag?Sb`13C)'1;_?c.=*2"joaq<V2hHcot28mDn*
%-655RAV*rKbN0A[Rg*)A6!/Jc5"sWJ4rm\%6t\6,&"RB$lO46I["lo#aDdoTlFNS\\?$84$F3&F_\3!q^,:q?&Ap7[]<]+c]UoBO
%SkqLRM\<YN5*SZp_=M05(+\e-O'Q(f=4#,;HfCcrN^G80C;6oP3DIj?NSG'5(_8[kLR-GP`Wm`OqDi"@A:1sJ=Nd/`+Yhc`&$[(=
%j(W4e@o`.\9[f$oL7;rFDCA0@JL7?.O6fnN369,Pp\J:GcoY$?hce:jW*95c0%<YQckJNMS#l0N!0+[nngYqL@]9u;@XU8lr#$[q
%+?a"MdQD$LU2Dq1_9S&uEQT0hodo:4aa^f1m0#!XQ!ZV=E%ETu9i;WE3`a<@a_RmE^UpL\<qYcb0*1i'&YS,,_^BMW^k&kp.,K.'
%-"gh2^Ru<<jARV!&u/lS*'X<PD%I$]+)-4@<dh_@7JS89><3dTSj$s?58Y$J,eN)b-4,sIVBA,'9@^-&aW<)4h^FRs;?P(pOA4E2
%JtEnG$81]R%rD=,f?*A)\B(QV>`Mc6FNEW!@hJ/"?54f(bJ^'WN4,F(PZLZs.=/\5O)Z6_e#rCD[3s$7R:Fo%gX"*W9lEs8DW?LK
%0qkWlD^8+7s6t0M;%I@!C=IY)DT7.!GqBj*3KeF;<Y$,ADge#/Kok(6Bh,^K?fM>j8?:<</'fp=gkUo"S#R9^Mn5?Rm2!Z6XlJsE
%&B9Ead+?GD&qQ=cK#mhpWiX'_qcc!U4S5K%]0Q)u^3YTA?P:\prS@bgo?.t#J,c9u$Zo1d+j:A<8<i=56<)X:pQ\>/?GsCCF(c+]
%Hf4teZD\[DBel$29t/#!(9J[De'-3ej%OGC<J5?>@6]C0J=mr$+Z#>akgtZ\-3[ALASGNkk_;Rhbn_[VV`^)eK>G/ZSaX()_)iA?
%!_Wj!TNrpa>r_fE5)"i*TLYjo=s3^n6]NJ@YDAlL`8&V'78m[X!+kbsCe/it&heZPh;N*)+<iU;FNdOLI%4O@-bkL1_Ygf\R_L^`
%7Lh7RLT58C8)>%ko:q]0H^G1V`LaG5JnfiHp)QHPh[=R-GEX?[GUb%(9h*A\Y3PqAK>V=7BuJD0=CKgG/nPD=>VQ_8ZdKQc!;"Q]
%5[C,uc4n<,FR>fBTD7-4Zq:;s^\t5Q`d`<<j!NIZH*kgQcJnZNBXNnMUHmY2F&5sL-2P+<M1Ff9fGLLL\!XB@n\hS>7@a-)GcV)_
%)!G45VBJO*]loD(O`sA^@BQS%?t]R4MTFtZ&nk@35QjoM<:-CqHM$;,Rk5@1dn(k8cQs%T'1t.U,X!F*N=tb[<CKH:<5f?s$E-YO
%66KD=6/>Kae'UnD-)n$\-KuNBn?>$RQ#-i,4bHB1Zu)m<?fh@fD6lIjT20miHI&h[K7&H`cG'r3]gC<gk'PAoV2al4+CP&JO.uG@
%S,==U28pUp@6AZ1hsGfl)1ie:?e-1n,$%UC$i4>;99<A+=<KqZ(2)@,,-:h];-$-=jpEi;Of!c13BW/@)JqQ=IU$6cPfWT0MT9(X
%:\OV'+[jl#Lj,?1`R\SHV`qti%9"'70B'^jh&Q@Mq>cq\2?_HJ<VM,'=Z06HT/UVWi%9j#0AU4VGEtIl4.Tj%n&PXMIIgaSE].)#
%Th6Gf/]#pYrUXkG4tKEo7Hg`Rdl_)'(UEs\Wf##F"Tbe0TeIl<1dY:+qpKKl=V<A%j>gCeMU7"Lqt;8m$>.UH(CuYVSC7TsjK6fs
%SQHR@M7O8:"qN.)GDZ6'$#FI9ZDHfek&DrCS0BmdCO6>O:bP4jD0]S9XLAj0nK8ZonAC)k&lch\YDbBi(.%/JZ7G9s\2m]I/1/N\
%KOuVhQe@cf!B?eJ^;ZC,>_F@/-=.4#[$%O2!#Ne>^_kR%Ml[:Uq+/s5PuLb'@7sei@[#MpP%=YCT`b>*4RQ*].24pV7lNS?+Nb&%
%(pU)_#o71I1t?I'enIFK29KkRQV!0UC=^H@PF#7><NpK&'V:1m+Ue*Zb/hu"0>Es]J!;4K/:qGuEkJ/X[eIZPg1X"j&][`:Q@"D2
%U4rD<_T+3sp]uAtPUEKANt47iVUFe)gVX")-p]4MaLMSrFh,FUbh;*9:CPQnAk/:jk$7G+5167iYH4Ak'R\EHYC=k>r8LRfh8HM.
%6IN64^$bk=>K0rOV.?$fA2-Cq>.&29Sr9q=ff*d2!Hs0G!KU55i\M1A>LHYe)ec<WhjU\fWbLK=r<"X,0]0Qknc`BK+MMXV]KuW7
%#*`Xm3XRU>2<e!65csL?f:jJ6U!0L\%?rhh5[?\P,($aAnV.cMUH>qgkQk/;0)EOuenEHk.9/"IWHATUkFd2AU][aoKn_+,UN4Rj
%<_WaA.F1816Ef(Hl^mmoT=g3Rq\j^Lm?1c(MJK`V8k+V&7F?D>+A,re"t\1=MH8L_s+4-b9[YosgusCJrFs<rHe9f@bd8mbWtmR"
%Yd>Odi%//Y9Dc7o0+!f-:p3KQs.-4J@b2.85a<+_(Q0FN+o1B,ctU-EAYb<a[Ra*J<CSZmCZ-hn56unM6ANK[cdi#B1@b?Pa*WSX
%E1qrP98(60GDLX_@VbOW&iHX0=AUB#_CrJ/eaJ*I<-?!*fgYL#1]0KjpQ:O,/2#`Pm*-@8_-F_4i"gs-GQ8VQ3$SXu/R%R5d36s4
%`\ce&b,i]_?PW7hU_$2lIj.ITe"f$cIeJO(9M\<"4K#L^6T,S;<4.8pObMj9i^M,)9&Z&ZC]9rkW5$U>m->q!^[Z8)jJ0sNPc+Yt
%H1G$dTT*,=p]'Cf;SMV*n0@73:KrW:,Ue71[$E_^WI\'oVF##([WU5,F*/-Ab*5?c%Zu*s*U1NsS<c98k;+N^c(:Ft%d^&'8<j+d
%\VHbLdfJk(RjVS-Vlk:DR2UFGQR@g`$k#UL@k[D2VA42,$VsE?.?fQ[fGqIDZ&#!p/F@HffSZ'QC%;hsD]Z%1-/To0f@.S!(+j-:
%3,P-l9D%<1->a9/h=_htVG,*D^:j$=g[93hLjind/=S#GKe@RE7a*_P*2&']%Hr\qju@3\1DH<TF@pps69-fInhA-8-LKh?r(%%4
%q^q%XCMEZg\t#,Z8N(+Y42>s@6$!`uZmb%J_dW&:<@_7Y5>Qm?e\VO.iied8FntHsd&55;_4b1aV9[qC[elS]:N!rh+&%r8OThq/
%i8PFB'6!kF4qNVKH<D=tf6Em>T3td7eB1.,G>`.H[o2;J7t>?Y"-NU*b9&hYc<J9HG5a<meXTQ4mJLduV1Y(e_Iuj%Zb#6jD3r.4
%&[e,UQ;gr;Y$Q_#>:,IY.gnia`rQsWS.YU%Y0(9MV)k?PY*"N*[nhfK(&P+g/*`c%i#f%k5PmKiOSQe.KWm!JQAVbfFf1R0QI`a0
%ZEEC"F""5$DY(<4&rBHuDl8k):D'"a[/II?dcReYeL7!3_q?TkWeY=eKL*6tl,O!#[Hb/V^=<hK+q5]\an`;u6<?C?QEDUlmfsW-
%^V8P"3-jNZdQ'r\XAP9fS*O^?RN[S+2X0)%N:uTq%#TshTao\1J&TMBqLMcoB<!1SJ"@C`Z^_[!*iFerV;N9U6(/PdO6=\>#;R[=
%fC)Er3L=b<._k?PLfgsGdEu6WnAIiq:f[%,-c@Br?2I#k^A\&6KHjfGAR]OQ?&MMc/fe]Yf$H;e_TrJh/>k:Sk36V/8I_)r1Wk-.
%6ULA-ArE@tYX)U8415q#&Y8OOX7%!\^R/>T^Y)6EKk7E,UUrK*j#W6@PuY;pX_m=T9gGl9fUR2&bi>e?^tH(.rop+d\'b]i"s.c!
%V+$UC_QUW/'5^uQ9!`U[8*iunZnN>r`>hb$?`C`h)*UJP=XQT6><=WaohkLZfE(lN;+/rSk]1WH?,*7'UY'1Tk'R:]=/nf%O'Nf6
%.<3t_FL-lnD+TYl0s%R9Hk1=Ib)7WNoptt--,$4Ar6ZkO^Xjr$M<_N!7W#C>:o31Q'.D3>7Z$]pe9WW;%iNL>8HL=2NEmF&K+tdi
%$1GCFqCo:hi)&Y+*$sbG;3.Z*lW(DpQsE0H`1+D#P^l5DBLV5jW_j<a9<Yq2>G/)$M#pL(CDZ0acuoJM0hF5/8msQldDA7O3;*?3
%PbJ2!lg\5MgEgT#[Gq8[?DCfqfn.^;U(3Dj(O,:6d(u3M/(UsH2#;j]\NHr8`:YPO1I[,cC%Q&M=[ANfXY3Z#i@dU7VKck,@%X)=
%ToFs;g:?A\fb,_F1j1nHWnK_,NYq<B8@6+<4"&VtZ"3;<?r?gIRPfiN%]e%c3]gEiLbT2^7bYSt[H#\&4!)3!'r;=D2k"uT_;(U#
%bM,Ubb[5PcYXfma9@54X-[I$<QIGkO)X9VHIc)7n[<]5tKAP^l;(]G)W1^DNHh2hQWNM(X5qVu^Mf%(n?7!jL:gY*BHc2ss'Vse)
%e)H`6C3+:tdpglpB/kQ+odWV;UO?Dmn-q3:Ne#oDqRA/AT&6Rnmi`>"<Q#?sZo+\Q_@[N-'m+[R2?-ir3Fq6J[&<Y7C5"\"HI,\'
%)YO%jp$^d^+V,bDmJLa(#Z?L/\#@OECsJY>5K$0.;\)SHZXmfM[(j9u0[sV.CcSN8-RG1pb!S;OGeI=?O4a<n*'NpB]De=K>,S_M
%)Ti3JX=/TCVWl&J\'Gh!jWK#Z&T,5f[0(!,?#X6#G)g#s<6'pRj)qjnSA&/=*.Yg:a?'Y`Q!r[Q>$P(0\u";RZ%06^/T7p[Km=t9
%=\S#79JGu&>qjQl6Dr8uA9!V+?1Fl>4DpCh9&C)!U<ip2Z8Zu)A0#TM#eGNpVjLBDcN.%,%njT\I)en!oFPL]nfpeT_OGuV.h&A@
%9d"CC<:>[1YtZ:=T^T./]k8*.1*pNd.`DMNXjM1tWAc5%:Yu(,%WM/_CWEU4gpr8>>3\u,WY\K)`O[/%-%]a0)]EcVBo=`^b)`rC
%'*6GLO@7?k+?-9k:t%9keh0uC&r'[!=mm9A,YMZaN<,=$p9O/SX7,UBp`o.W)c72mE$E<]FZ`V\XseY1[N/VsOb%/VC!VJ(Ep]T#
%,cbH-[m3t*=pR6NTER:bR8eDM2a,"-ndi=qKC3_!GK/:CNK[>=[mjl"g8N:cUI<F(6ihk=>t&j-Fi#_DkrY08OVT=cg<_<b*m6c\
%C:b\#gq<)m]ghs3R\RuFXtD8(Q0'&pl*XgN9L_q4Lbn_&A8Zarc<a(B$0nqK'(:-_+6cs]o<-oNnePP)2<eTqf&1l)FXr51DTucD
%B=K"fINQVcNRteee^t+bJnoT(E""`2-HX2agsnZIrMh,;VAQ=GMlhDJfNUD]VnnFggt](A3@N7:GNY!kc2V=8Wo("S.]]ZLd2qrS
%K7WQD#NkhB(R^aB/`$\H*iY,+EXet?(/T#^!0skEm+D4\V:69Q]oP-e,HbM<pf5o9Jkik[Q](,OhQ%Kpf*!`YGk3fj=0/P3(CIIU
%bPKT9cY6Sg/0a3>]4WBEl.#u.SiWpt=IBE75^eF`Bs[m%\_hCm*,dVWa\$5oO+]^W.%3's(p73hajWWd@!2LBo<WNaUkUOOYe*5d
%o3_#1X![PTf-U1gmK8N@H%&5D;)6F<KZDBrYe*a^'XTaA'rT_C](_g[.2;kYDN$l!E,lW"A]%ec9&CjY]0i5Ip'bN,g[(<J>n1re
%Vc$1(-'HP@h;52m'tb]*XOn"ufgncmph#CI4h&;BNPW;;O\"<']?%X#JS#<lTOG!+&jN9fT_#0pL;<EHp<T9VI*<B'L5#GfMY!ef
%2Y+/7oXgrlB`&Bi%Y*F!HL'Cs++<b6OkF79=`3aRFuns2@;0t5c\/L-LICDZQk:-`Z1$Jmc-J[^Ef;^$X8;IA,(cc#OjNGfHiA?"
%JXg@(ru/03'o'^g)B>\d6-+KZ3C;"4i5sY13?bpVb?B%2;0,\5gn.L!Y"Yh.1``PQ@MF7>NZ`O6GH-!9e$n[rjcNH6*JIfG,k\FA
%6I)FPr^.1,Rj+i9gV.s='7MW=rP>4Fc];*kNi"7R@G3J5'`%*BOq8lX/G<V'F,Z[)d)>:<d6m@oX*S;)W`5r.Nre*3M`&t`ALHdh
%RlJ/DLC/f6neI&,k7^b-R%H\Z[@('f,NX5$#l"MM'd#OVp\\!(*8=puFY<3)RaV_u&Z;u$+]@0r1<65OK;,:q]L\bIm.:tp,Kc@m
%C*8D%-d-h0oVWJq9u9u*Md!Aidb,qCq?I8\q5[C+l1E\!`msle&pI=U?!P$OQWdBuY7m`[En_^.FIgi)<Z[*&1X6QO:Za/*,qmP=
%ef>ajQY7*3-APV<7d"J.7Y*o7,#XR<B9P;u7D+BH%#.MY*]DE%fs783Pf6p:rinMEEZ&.R6(nX"MG&W.XZ4)^+>aUn`eZs;e82=O
%f@.$YNS0(8qBIl"b",I]K<r]<g.Tp1Ku:g%;uir`e=mdKLIps&(>0&Ri\i*fnud?0,969ThEg>Af>@o=#?#5_'RRR^:tRS17Sm.*
%%;dSh"if4,M^D_TPh#\aj4A1a'.g-Z\gDkXTUcEu?"[?Bc5i[Zo'.onc^&E$mZ6dTkWKpT5A>E.cP1SKp:R"3KipLO8Aj1?Sb-?T
%*j;9Y<[]0%CJo<aE#9sc.VIHj9bOn#3@pnVU#PYjYGbs'>O%[YHd5<p]7ufiof,=$4fr`YM7Xk"^BOhiePi.lW.Mg<P0]"**n>78
%Lm!qokolK`;6u+;AOB=I2IT*,=sB1[F+3YTgdml?W6nS%`hXMJreFf76e7)/RjE[#0%D#t2Hf`_E?=lMejDLZ8Zlj*G/IQ@.:-i$
%3NmcRj87O^4Ut1G8goN2!Tg)rpD!sHTBN,DHF3ZV.?+;@n$%'gEOg*uXX1:5bD=i6p]eeK-*'HQr,<bdMXdKg'mTE@2R@iSh+thW
%4+<l=ld(jPr:-kS/:!:XPZPVM($.Spf,APBgr8:k!C[K#ekQTPlFpa,!6S$V1aMF6gj;eiQlZPHUuXr(ejED?\Lo@'b/c\8_Uh2H
%2l/d'ErB+AXHc0[1YWb.@Pg>]lX!LI2KGH>iA3TiZLTbm?l/r&AZ,='<;&Dr>t*K=,0f886$]/KDfIk#7a4+H,h8Y/;6Bq]kRJf2
%S>GZ)af24Q#F$5r;M-"3!Td;QK>#p`Tl_8'F1A&f*-H&,^PnJao6/-+/pYff5ME70quK2dDR34VhD[O)[,uCn^I+?"9aaOp6?+Bl
%6P=E?`oaYCM3W@K8*`"WdrpQ57R.^^@A']#"&Kkq>_5u[pnVH>-j/b!9uht2ctG%Hd':Q,Sfo4+frlr5Zh#^#[q\HN5p!d?]HjmM
%^1-9tUZr-@]MLgOpY^8B]m/LeW_OO:)96ar!L<*^FL'`d?4f,.D,Vno4.kF>I%Xp-8tjK:A>%Y]ah:j;[cJTTd8(A3Idqdu-\b%s
%D5W#^l:;X"J+,p![8)LM.1r$r#K*pdCZ6*=X5cT<Q(rQs4YWflQC%)o1;5;*UW:]WZLY_RqUT6b!1ibJHt>S(&*ZfqT*V1R-5+>E
%SSlCW&gO1f6>AUQM56j5Y1km,%XW/bJi49#PK(=]5=$_@3TF+C@>F-"X3>ccG>J?>*Z"-'bsm&fh8:SR#taaF-')^lQ/fUOU^>R+
%$K7\Ka6\^",G8(O$(a=5M*r,KGc*9]6jAV_er?>s0H)$(\rIn%(-o0^*<F?(o<<$e\Itk_$Be5@bf]Fn/&2"]!nWLU;WW\*.l]PM
%_e^J'&hc7V2_'#a3hkVC5dfX&h2KSBSF`#8<m)iP9H;]98hkT*ofkpG.H2e@YN>1Qdi"`8-$`G7o2(@]E`jWk-QrLtQ$VL\V60bB
%>#H[9ibS!E3LeG$TQB)907m,=f6C>;PR;7qIt:'AEA,n7\":#'a=^O(F@,$Oq\Q;=\OiW4@^jM):lpTIb80OeDiUJ>917N+>s6bB
%pY,RC#Q7=H)5lkX+2a]/V+aDKdDd14P"a)7P)UX+>f.]7I(n+u9ihic>s#%,Y<%gkel'fII9jB(nD8Fr:c2X#50Q8@Ykg]<_SE)M
%+TkP"JaEaa35su98<C_XhX?$f,;+RNGA;S5\.SR[&YmE0nY"RR24u^`a-@3Jc3>FHrlI'9B&Ef/0)D5-B'fu(@_4)q."6!#qaG[S
%)6`6%S2]jq4=Ig9]pJW@I_U)E'6DH+36^5K`]GtVI7I/B;r3rVk0uA&AqSYF[7p8_;QuaI/TD=>8hH(Ql[ePWTMWckX[rdl"Z]ih
%H!A.1EGm=<96r<7ooS=-V_Fa9QC_<Uk6Ju^]D!Lp8T^1L:+I*$<&a-6++<TbD[D\]?OT>I4:>\HDe%g)&]fY-D%7B-'A:3QCc@U,
%SrTj4.kM'=PP.C"\UL[cdeep3JeJ"b<QC$fk;r(,O?A8@2MO4>\gTF"D>CatV^:7F?IWY(1FaWZEX%1)\k32KTN5eE&i`nNej:td
%1,W#jSE&@)AD$1IiY\i@9p6u%aF[nXG\&]@[fZbl$`=BHjWcB/\HX>>'WA2(V'u'^)sgjH!=TUO@F1_l)0^q(]Z.&d$[in(E7oV!
%FHR/P65<cbg>)W)aR_]953V\^HPCb<41dm9]^qEBUpkmrAiU24aAI(#fcb28EpAH'r095B`,6kc%?(\X6ENUhKdH9qO648..nCbP
%[G@JHN9!%QCd<D]/+S=UC]U[)G!Mm>Yib5h&"ltb60#!5?&Vk/U4sr=TO-em6iq+aKU1,2TuRbk3VV.sL"ai9^uN!c1/;c4-(M3m
%_\LZMn"<$VBCTGs()N-KKA0+ri)7#0ZhP7S$5(ajGdaZ:$R>jY+rYKpS0b+M-nE";I87qs;c4>"M<[4,5YjHP7+m[r](85&^]2s_
%d?Qg*>ZV(_3CP9YA'=7Mb:H;L^g=,1Uih])pbD8r2nU*lVF8=G7<cUhF_m:)oiE1G9o_o)<=rH,9me!3?UY$./N`&CeBon1PjsUt
%OLCC^BIl`*ll+F1:kgYmT)[^b'q3c?+JE.&(beMmq7SF3LUM2nX/CjZ:NTWS9)(L0We!%^]-p]dd=^+oFE#%8><ZoaPq2]?5ROSY
%f$]s2;(0MQIb`TEFL;!=l&FjjIt^GBLFrK=kt2<je&Hc[)oKU*<?%KlES728L!<KA`A2[Adpl1\2IpqXGltWI6sZ:Pe>^t]Os]#\
%LV4WF3Z`Hbdu:"uP.D('6])d.##;cL3+8=\YKY>.W6n^NnH^RnkY;r`-ic!qNFC<;Ep2H)MAG>"90qkX1d@kMAAoIlWgp$,KQFR.
%.h^)EV>(e+;R*<uVVR\L&C^3Qq%/G>-?5O.+#NkIrd"<\%EtFu"T!SDN=Rg5hV,onU>X:"#3M/44p@%V2B;XI8M%/D%TrXqN7G(u
%AL>8b?I0[fJu*%W2=h&>bV5J7/kFCA3G#b:>8/Ct5HtRa6ZM3ULJsO-Ck>o`go7#0TnqV=o>S2$eLHW^gdQ$UX+bF>"m$3:n+TU8
%_n0Yidu3,]a037,oA]6<q7$Cs+9'kVrg3ZXs8DY`s7s/(lfEWnh1,HSJ'P,>3ltt1FGTQgK@ZtBnkgo"$r=1m\(&6]0I@Gn=,('T
%1g(N(OsCg=]"X[FS%[]Bq3X**g0/m=YIuk?K5INbE_nEZ=.Ge9+m"uXDF,^`UXE+EDA:KlL^,igrN5f8nmfH,GoOlX6sQ/n[/\lG
%PM[(=ZHRBQ[Ce.l2$9V"&B5fCFqmm`kQ#AQgRqmd,hE*Z;T)r>hR)X=VB53q9K$`B;fO7uSEJ0*lG_H$k6k>PK6qd1C(F:(,N`WB
%QAF]/QA?N#T8TsEf.#Mhka[l/:aWtcW6DOr,cW\YjcCiU($Jn=[PqN>b^d`Up$IaJZ6mae;?!X\]#WJ)[.r$fV6O+c_B'M:p/E0(
%6u)'5.Ld`cLHQPl5S=NJ-n"oW^*e7!_^7,L&jI'DPLHaPkK+m&j+T8V,D;=R/13F#<,fLmKQBmP)'[NO?=Lr`ej#iX+U+u9T=Fh2
%SK1NeVLL=EG="$fp?Pha,5?h,6,"-T"cE)O#cJ&mbmr6a-t!u?SDh,U!dq0QFe"/q1$(5Wk!%d_WNI1O%g]SZG-I71&i,?T1R)f@
%mPWS57fC,Ng;@Z,(q,e>'Qitf"+p00,Db*2e`4bm"Aej+DSd;lcZ!Rj+CPDtWlY>(q&hPO`@R.%k684C_\XS(9aL46r]SlWiR1Wt
%L2OuH,03,J^RntSNBQa8";qQMN1,+>$[U5bPsq[N08%[ikf?iD3^q$?OG6<]4%Oi:e;o@ooq4U#]K>1;2RqH,$bOH!VOil]HmX@S
%4fcVqjrdN:<&;8]4H^8a=MKkC\)uQ,DCB\"Gg)6*jF1XF$/F.qgP$Kol7Tg;.QpW%q5F!P%sV"5WCYN0;69o]n6RO^W`9gKf(Vam
%@8)l]=-rP0I^RNBH1U*LIfe*]fjZt;^:FefWn]UQgACKSGDcf#j+<qO=$_8l&0'A>h`I_-9gJ6uN4cit`(!a,1#T*>%_fAYq_0qH
%<hD8Sh_pBtY(8D871HYT8uUhWliAGre,<cs3M9<kR4g`[T!]aPcQ*75%r.!Mil+>)%@#lJ(c+[0+h#[RrZk#@;I,7_%:Tbp(`a`R
%0(\L3\`4Ai?.k95D3']jlURN:1BjsqVPkb@[_C>scu'HfN=%^97*^-Z&"nT;,JN#q?t?/hV+'HM7?[;fRVi+#C6\fu,,0ocjNKNd
%0(48+b^tOtaIZH)'$b""nj=9'l;sVs&e">T]H&j*aRBmqC]6)j6.+fSfM[NiKRa[:R\6cP_*Xi+<qj0tL_Kq8C-5q4SP7C/.JpXf
%qujtG&<pgUcuop<q'HBDO'F0LRNc7G0EjJB:#Vq.!ng'QUn()=M!Y:"R5Bq-Zi*YY#C<El8QTj7Ah%QFB)S03bAT6n2SX"KVD@Q&
%Ks>-0k<fHD@-WI+HKR/[#Dir64#DS(!iS&'>Ac[c_>!q^6)`tm!&*T]96qi9l`JQ*8)#En(eaL'5`2?E8k3\&AO\HuN$<a)B[5*$
%%VNXub`t@9pM)t8it9!6#r#&N/Wj\q7"g&V&i-ES&sOSs6MUVb6QOYB?#r%$,]T1;dBOPKL0PB8kSt5LGOE!!e3pSDB9']Z6!mt\
%Y9D#]/<,'rZ1@OMNikhDniYnV#-MgsdsQ%J]WuZJ$g4@"HNgRJ25AmaRtcFB6Qaf)Q>"6+Wj1pB6LSBjSo7GI?=n6%RrjBq+mn7b
%BVImHFOfn!(,N7pU=X_D;9u7U?&j9V.T#fkqpnb+$&3KQGa#MVH!'R3c]M.2dqZts2!**fc,OH8/dZW!gF\@[8YC+">X@J6dgABP
%<lhX4bVGU,eh#fI#n1su"9dOKjbsoJf"(#lc?7/D7^`V3>g/)a,kGS\Q&t/sdD6\b,3]qFA$0UrEC@,tm%0ib^ofP?`@/8;kIf1l
%Jl1#7.V7#?>2fgl1IuK`*6SYI#JpdN`URJL;,(UWn#>*]R8g6#-MXR,bY4k/7\1\0IsE3XRDOC(Xl",hL/(u3A8"<rHRKsd92+P+
%`A9B5Fo1DMHQE\@!gf.,Wa57EM6):WH)24X>4PW9<hS>I<bu6=7m=_C08hqd/,DQ?O;s%FK%D8X.CC'Xf#9.gk6m&D+PF#=mq.;P
%mbK8H6hRCgMP@9,Dg)+]Ij%@3))s_"H/f4U-5N[5bA(]'4g:M2M\EL$ZrM1PoKmeB(:W4sNd>@.-Rf;`QEi\0MVRF*n3[nRVdsdm
%L`efF]%e_sEag$+M"`IS4hL&3P8[8!lrf55^C&ICDb81CHTLk:IkAs5/Ck6mP\LK74/DWm(a_(1Gj231T^l12Zp-*IUg3=ZNti]3
%\mIn#(?%D:W6(-M7Pk*8=".cA7lO(&4mdf_oCbA5P'u/KDB%hK>COrt70D6n+692]'R_tdKBbdSp-pHED,5o8c3YTN8et+JA0&;X
%k;o=DQ-U(4aLU[n>K>hI4hLdtjcuQqCG4)-K3Z1l;;BHkkO6krK0:t_B$,kSJc%h(bNQp^l`$uJ=+OE8=<e*S7>jCb`CZB^3Qfi.
%CUZV'0iHqsFgoTR<Mq_M'5niU6*(";>_+!YJJ"BK"VqaV;X6_1Yth"fBt6HFj'#@ra$^L6pZH[t[iAW-EgTNnEe,!d-VZ]Q=!S[C
%e*DIEWoSqfp&h?](&4f-Q`1MY&qq+V3[>%:rr^5>P)7X;]k#7+8/7s$N!+Z5Q-pm;P^H0H#Q/YXpZj,:UuG27B>9B%V6cl5XI'tk
%$-E@&WLq'5G*>9^<(eZer\a5$ic'M!L3e$*D_!ViYt0r;?PA@Fd^pMN.;$+)29leJ?=n!!OfgCj"('Cl\*,pb8ImGDA?Ug0:n+EO
%--%h0*Heiq,jCL<O_S-gnX,.(b_Zc?RtgWtbraU#LR]<rF5A@77omm]$dk$'$1*=S>2BZ;R!Q$hXA?Jq/9DNqG[fn8Crm>TAXVsP
%Ya/u]8fBJ+c;fZkJ_m"-,J8g+Gfi%6FOh$u8IP`7,SRd3Nr)Dmn^pErX=bj>;-%k,#bq+:7;8:ZLZ"oPgp'A3i,Y$hO[s()Q_a)U
%'9Jh8AO`P06J>&rg%LaU]m(IKI`C*^B1snQ)O,aj&rop6-1N<EnL<q6C48SY`]:9DLF"m/[TQ>h6=ceF/XfM#$k%!nU<*IE&&le^
%$#Nr.aP8A8E*Sk2k'"kbk4&K8=u$cZ7J4^gP*lRr[+cm*.4H7_Y9fB)U<5e"G0,E/KYYF3A0/@El/%SKB_/o?1!-S"QItS^Gp(&X
%f?K1u5XDCbq.@Ua"Y\Q9]ja<j6d5OQ_;p"i>.3$UOrDR0ZBn3$"/TRN]3=%n[929U==Z\kSG/@B^q:Ue/*2rDe@\p4=#7tS]le@X
%*nG7ra]3Kn^g8<1JF[`/Xc[fpBJ5KIXn[:V=3/G"m%"OFa%g,`rL7-kp><SCM`-Fd/apn89'FRB"Wp7"s)s%X6:*k^<sI[hX0ha4
%A?NZLLk-)IAN,?lNT']q##_rh^US_q#DVh'fCLrjqY!WBa<Cs)WP#5M9H#hO,k/"p+Rog8[1-I2qW9s[T60g\la*3sZZhCnh`Mf<
%T7?[iB>=?'of&Lmoe16t\/@NhYJ0r.MuW@OTE!X^T7-DDT7?Nh2dcLQT0@c%71?"_5D9d6SBJ\Ch%u]uH#`k.5Psg/f73_`Ma.4/
%o07Wuk<FCg=c)#I*BZ>?:Z(e/^APl-ru.4ZIrTGXmsDhd?[_Ob++GA6s4onfrPuC>^No<3O5B'7I`JporAK0$#9;()AO#;FIf$n[
%o_"\<J+KnLDf5L/f73eb&*G&4HH5o1;i[?-ms2D"]"<)ZH1@ARr9BbAQi,lF?[hV.kAU@kT0N@n+$]ejS*,9@Ibug(n+4N1R3Y=f
%^@)O2iJTAhj^5cJh\Rfp1DH*6fCO1q`rET=Co>cG]^!bnYQ)rKrUN`k][,c,p\fh0%faGA3W@?ss7,]iJ,5a$Igd:;EGtSr^@<NT
%[X?d<f!t.$:oU=mW)/pqUe#HLbhIc@X9PJ&QdTWHPE\M&WjisB<?bQ&fjM,O-E/30_LNmiDcNsYHA<A<<ND[d#98&Y";`:d[7HT2
%%k*8EJ"XYeLZ.9s\AJ"_A]FLA*]QS/jIMEN7]Z!*.l].BEJqqnBF^VF%Qs;EPS"X1*KCc<6])jN4E2f<4UDC3H#bt/Cm$CU?$ZK#
%3$8NH&iQa<![#29ZWm'7Drl^;FSE"DUeSRgQ)"M]CGH/,66n0m$B?5lfaWuPC+*!DN,dQHLhUPX'lfaZfP-F_!_<iQ2L>#BT=Ne+
%O'EgGa.d%<MHko_%'%aU<2mopH72Q^5u9<'-r8$sGb'JBRAF;N[:AasDn[b#qQFV+I@i+\Zu&9m0rs5>@%'rO<X@7R7Aea&IeE*k
%Dnc.eo5(bJm+m_8?(LuS2u4SJlrd]$NLK8jje(0Vqoc]5^ZQF5jnCoLOcc&=BE*l@Z=go(AWVnSN6Uf1Y4$(d4mR14H[`kn1W\Vs
%c$AE3<]fUDbdZa^`o&[KH08;%MmaC6Uq<Z/_rNn=q1=K6-V64:@uCE!e6'm0a<RX,bFl:l7XZlf+/1o_`QBI*c2eUWRk+Yq2U6/k
%>[Gt!UR9jSET.$r7<MW`Mt:P8V3_<3a9r3Za"$[,BnVXTR>Y$0/)3jjHKmBt;oil%%I/6bgQa*b,5D6dJbn[Ub#37k43dKT;iUEh
%Qnlu7Dh>cBoM?2`8>A@qqs$"bVdCQXD?=72b+#N$@LaS.dS`Y7n_rlf@j16I,mZOUEN2r6EqU>]f\$iuBt$q]9jR[C&^%s7aS7Xl
%D7-le]gRTA4BZJr&tiG^@"U1$%7M6^cU5Z]\e#(hOeSG.Z5/rjUY%WF.$bgVA*K*u\6O<_mk)4A(((HZmA=HLgoiBL-o'YZm.8Zf
%$08b&_c2cP%J[Gm^\]D`bB*#VQo6Js5Sebb^1)"^@b@P>@/;2jeqsa\FLoQ<U?.8dS7<_UJ3+np(H]l%$Rr843@J=i1,B-6D(Q!J
%7qR;pa;'"&//0t\A:3la+2qc<YG3oDR2SXk"Q%I*4rZ*LPgB[XAYj)<s5feEY8u;9V<8'\+#qZdJ;!lM%,G!&^]4E0TR0M17\O(K
%%?OJ_e0q*k^%5GYp:9?M9UTFJ`Nf_8;/nD`AF=*sL_X]JBf<UYq[bH[%NrRMlYDntSGoHs=>J\/&0JbM=(W!QF^Um"kd&p-6k[h)
%ghEHJJrF8,:\Rn.Z?co;W<".6m45C<+i!p+'12_`Zf-i)EUR`\p7i0fXp/?hi\1N^/mB*RK:*,q)tIY7h4).A29jd9dYn>X6Tk+U
%iuUC]j8R5DdO-&$Dp:]ClL[c^cB,RVq+@W$%3tu?;&.!\r_Y3D(s6(!o`P&M6B>0!'1aEZf=KN7F\1H@hMP4I*Xe-3]IljlF3T@"
%:A&W3Y&i+AKB3RBWBF4q&j%VHQAX<>Fs'8u7P1pr5e=Ac+o>uITX'cL_3tXpDb;Nb,r!TTqeEl6=\%EsKk<4W\63&#$$<gr`kSHZ
%r[Smh+#Wpc3K:/2Vdrn4J*fcIj+)HXL2,hCV##qE_AWBEL?C9llWO`t2h_U"3*!3hp*NEDCCMa1;CJlYi`.3`I>XI2a=Yu*=\djd
%]APegY7Qk#rAl?_gUW&$'VL\AhK4TI<4hJnk"6d,P?@(B4XimJUB*3_ZeTug^!SDD[FKK'ot4!@^4qXGiuBGhNq6,E"Ma/2CYh/1
%)6r6D!gEj+`ljNK5<!2L':\pK*\Ee]'#6?u(5(XBR0gG+Z\HuZ#0S2]9+?TN3P6DI'riF?1r-i`9$J7].@isc`->?g1R!Zi8Clo<
%DV3%]:F5pSU,u2d`0bOpX\B'^$^+&[5,@tth!LeF9XcZl?BXTVqe>piCW9`?:_7?lo:\GG3K<o3L"`V]Zt[&\XBNZ>RK+/>AE)$t
%YU&0ce5k@B4%*,ini1<nKQ(\h!<:uEC5Bb6C>'oZ3f?*'FE6mdS?[!P)5g*,7E2mCD2Sl(A?msG$3R@4=KL+'"R*7Vn>O]khI\k@
%:qiB7SR/e#K!F0k+A#ePD75Mmo;ihENhPs1"fl/GMY0mr-8eRdP=/K]EPVpXY?-)RHLo^)W7r<h]=P9Q!^f@S6>'m*^*0(.5lQ;o
%G]jb:(RAW'")h'0(,B2$HraelhJG^ic2k"Bjpsfc!2RqkD]o:@=%65@)Hr5\c73i!\GeVL?e2hE1e8]A!_`Def[ZqpB'U)g3^kB)
%AjOUX"M*EccW>2HQ'h\XBI5>^$:uEg;h:ddO'128MHYNt!+(p/r;*ts5\`Ricc`V.;`k/?MtGF050.Q6!5$1K.8(1p69IEq&'0!D
%>pj>l6>W@C(bbd[K/b)pN7Z/G(u_H$cQ`/$gO-32NgWkB#S5<6ohI]]<g]jkN_Wm,eB/'$H!PKK#0nM_a#_]<-Y4Qe`<=A+m6RNs
%]8[P3M/C:+r\@Kng%&\EN<Cgp+cR;[\"E(EI\h?tIAaVZ8jD$o'LTW^m;p%"fYkh$C[ilh#k:n1j7b;U"4N<n1:XL2V;ah:a:\t-
%FP]CagL\T@//;@3^&uC3_Bm04`*fl[SNe`n#?%mKgsJj"qI/./MNu<d9*4[!FW;].C;lH;4dYhW-,@t*&TAbpWI1T_LK2TD)M05:
%>YGQ7k3BO_LGWo2(!Cl^gY6>]A,I7YoFTDM:cjWu<^tUP5E%O(8*?&p'jc(:%@4RoO&rq6jXSo4%&p]4p4(Ia?cTnU;26RFYW)MP
%iNe;B[CgFT5uhS]ElHXE65CjJ,X"2t*.iaM=(q:SLjS%%ef<kL2^.f2idH_+Qf9H[I]f*h+u?la)=%WYW(%YV$e<m>C1j_']I[-b
%%pMFIJS9muijkqTp3a*sV3"k3`:J`)m[#Mg6l]+jNCOGFaPndL5-NjLX2Rkn&jpS:/$+V\EQ9MI+g/[n+]r".b:@nn&r')6fQVo.
%35L13J"<Wd486;YT6/G`FGO(9EWQ':1!#g\&mJFE[Qne>8c&#/X`$e`hmutW+eG%M`XHpp%P_+2qq9?n&#@"+WF/)fJVSJQZRpTn
%$C1Kl+?r8@XW:%(og2c;!C[!e`I5.^ieF&3n,Sl]AS$'Hh!1lO"cO`G;`R#sUD^j$W@^<5NYn?Yo!UekF]Lsp5DQ-"TZ6&()u_/S
%_`Uji^P:P.a7#&+O`aAu-N/;ERTCT.31NJM=8!>0'j;#=3gLa:)JjFHC+_KeQ[c'Zk%T2GA,&>iB6k\(c\@U#=*i!OnY**YB/diV
%Qu%GM*JpIF,B=ZnbWJ=a8;-Xl!clmu4._)bF#e!F\FU+88b.0D>V=AT$;'C4fk8M?W9^KBntBQE/_;\&d=d!`1_kDFO"&?PA]*!C
%!;OiM0B:t;<S6B\W6q8+mUghsA!oB0*$]TuB`s/c<,tbcFdnHSM=EWGk;Q0XQ)N8]nr'e94F9")ho_m4baV>>?ojUFa$6i![s2B3
%bMGHTht+-*^5<q""_3t>:K'JZFeBM)qm*Lm"?K-^OYn1nS7c*[GDmQ@kmDEg!O4fYSO`'V'Q_]qS17Q_N9tYK4*??>Xt%A7\ZPM6
%`.A7WH_aL.fPo3!1)/EU/Eo3[^^WIY3MK-F*VkNRTHhJ<\[a6oUEqJ7!=5!]:-l:O#kH*uI!5DjmuH56>qR?i-#[J8NIj^r`]6X>
%TChFlYKPLU)])t;g0@P2\<DhkfGdifRml^n]cr[U7@WSENM#s`YAG\=WUD$MDc/#^J5?B='#$FsBJhr<)mrnsm8-MjD#cDMJdRFX
%3Y%eqWYR.:OmM-HALZ&?Qcs?U\%AXHD\[%Z?36E0G$Cmq0Lf,"Q^03b.3qha3AM$hK*]T7=[,5%+JJVQAI^H2q#Zc:C;Fm=l%!@4
%GW:22KPpU'/OP?9NRL!hNaYLp5Acm&:&%?kK!2-R1:q)R`mMZ'fU8HQE,+_u'G%)'Rc,YC"Yr<A%p+1Ml3oJBYi('uOSCl(s+f-V
%h=Y:,Vei)=Ah+L&HkFKebHemls%UZ8^:8IiRHLtb@3_/g/Gh@e!g0YkjgiNnUDSK_'5s)";+,eA$__T1&SWVbX7&N?C7,f6]aZ2Q
%pjK:AEC?ZeM_*e#OZp-BWSJ"0V;t?pFuP^tSM$Uc*)'Lm*j0Coe_7@9=fC7ZCYqrhkt_N5@uEL9g8dJ^^Nj!ts0PpYYtFmHHMGmn
%,%5V)006B+pCU%WG4&He%<8U^WY78p9F_mT%Z%8.<KXWZSs`-g.',;^lWIE2o!/$*CIbVl=6l.]F.IS)_(;mkYL'&-FQHer$oak2
%W]kG+J+S/\O$XYKS`7YC%\Y<.7p*4;KmJ,02@X;0f:8%[A/Ote(=]`nZpbJT4B]p_7<:^L*LVds;e*&3FdlX0U71Lq1)2"G4foYP
%%<MC%2u'_Nq;A7;f)a.kPk4]nRN3bWSI)=0QSG\-.[><TkK%sIV&:ombA`-"^R;#2j%6g_>^XJro8NPnJ758cijQ8-Lk%=iXC9T-
%0>r$;5PUcMAeGo(T/UH4>,[+),*OZ[\4HrSVg.eK&^->Q3DXZj*Fr8;RC;A@<0@tL:qC$QBc[[LY."tl%f&#Z>m=ZBbVTX08JWkq
%8qh5['MAX&<.%,t<Z*Ol"DJj/!!t`=&J7XU5;<EHNVT,@"Ve/8R)Slid[">OX2QA4kse)#<]QF2T49Sg8_oodJ'U1T_dN^_OHocE
%XN@)c+>"9t6%;:J4;#HG+XtqL<E!MK!4ZSq/4O?ROo+EJ1en+=?,+DDc8Tm]?p=r!etb-)815Qb=:#0"dY6eS*&iZ88a4[G:i<DQ
%N/oYu+]Z>[LPDKn-qY<OaZ@O$iReK-]]mqR#aJ%a4A(=%S0i>/.R_?+(#ZHn_fGkH#fuZd_;nW6QN8I6jFYpc2YN5J6?FKE7dbpp
%Ms0T/)lTJJ$gj&,=HT:S3q/[i*qH<s#/6dQ,2jT%H-==qT3giK&(@mj+$d]:r:Sb+508WqLSuN@+@mPW;rKQ.3j:?*_)[DD#2DN#
%s.L//)bNo_^&$@l[aLL@<WA:Q.Rmbt&,3K6i)HMs<'>%Dj`Go[@5a!SSb"hnD2c8Z9a&#4\Zao(qU?%a&Vhd?JmY;DHkCNMa1@D6
%$cOE]@A6GI@/LD\b:-eqTHW#oa%a*8G-t33<j/?-Us0f?o[dL")F0k6'R?]H`fk.P#ndtia[MH'q"7q&=mf<2\4LnUaJ"Gn-L-lS
%n51c_<(h.s?hoC"F9,4)PcY+6I2`OT;+-s(;SS5&kcPV,fEgPpD+(J9:[WqsZC/P)TM8imPG'g2fqLq(17>bG0et`>`4aoO7ge!U
%c\>(LBCQnDC"AMV+5N)b]fmN'Ed:Tb2V<C#E^o]<cI->kME>iYoN9RG%]0'8Rf6l2rq+`7hN+dioAJg>,7ulDUqNj@gfkM.KO`da
%J0HbV<Pm7.`,M-!phg4qgJ*GtleVVBP!Xgui1f24Acq[.JM<MAB.@_=F]Vj^WaAH1/`/X5/RE*\1=NO$%+%Y3<P!gML8Yac@1BeM
%KP(o*P_h)Wm[Xn8f[u+r(8%@URVL."Suh/KEgTUIA._ZOG-9(TXD8+b0C!:#rs!kmf7S?Rm=%'WmN\/MR6hTt&W6_lDK3<E6RJUC
%,ZNO,Tnc=C"6-@%]GYNlHFn>oaOM_'XkXmCWB,Ij=e71/8`>ho@phN5">2ce9.\Y_YH$]'oNg$JDP4>G;]5d=!JOKaC<\:9BVS[1
%%r7<fKXIZ9$WH@G.Y%cXADu01T[_Kc]Q'Pi,[r&;c6+oA3?QZ4'cLI_',486D5X(Rd;Q6A?(7t!bCWm>PghcbBL*ZdH[ID!]b]GQ
%;Y#Ond59T7TIIm&q;1Wg&s\KKeN$7=]9RM1B`P4%18M5\)$0^T0klKk`WY"<L/hN^$RHmu!&n:_9f!CJ<<Zq0m9[[K'JS_BPi_&,
%E3t=2PXO8[ri*n"n'b;=eYp[#L`g>lX>6Ud;ft+@N`i5/eX1\qHC*rmj^3)c9#2JA]0f=r'N[>_m<WYE;ff,S/LeCkQ$HC2aON/Y
%`<3.)=I`i_N-?0`ip-Vug8l52S9OY;<<:GQ(>5`uoiVoi%aBXJDnaS?YF&AA1k<%ea"j$feJ`k>om`;g>VNQ`a0YI0ftr&nc[Yf^
%rh%H=W$%er"5m]]H%1W@;ZJtMLdH6!d@B@_`9I-p,'"S&&C'SA/9I*Iq=:YQWmZhqQ%0[fj2.:X-'^F`SV[Q?o*h).$e[o?)`W'4
%8Z5>uO`ON-+aYP=[OaV<'"jC+_MgG!HBZMu=B[RP?uif!Tti-?/8'CXPkaY%3*fo@Uu3M-1@L[r]C=+2);n4M:`*,KO2//\I8nVt
%+sjEDWN7]B8C0]T]p-<q*kjF-2%D,2)dh6\r?M#7>uj+CfJX$0rohPJn6%""dPH$T7=43?@:H-31jDkqXMpT^bfeCA;BRj:WeB]E
%8;Loh]C8>>n)i^h!G'b=\/6elg.A\FhtNS.CaAE?j94Ye2o?[dEa0N\U7<Sf<cd:K02Jb[ae(X2n`AQ'JokJPJj^Mk);0Q5EX_B<
%"f5Sj8]ntpN+oeNHrDTU0G_(l>J0u<-RT.alQZN`;ZX4Vab$u*IA^ifqHe"Q*0l=&_pQSeA.)c3iXXo6HBmt&6Od%I#QJZT#)3NO
%J7`'U4*eiAVV!X`\(MphWAm'LF$O(nU1'l6!)p0og-un_Sppfs.e>1M]JB6hCGAIF`1NQF0]fRWP]?%^hmZZQkUtbA2_!uh:]eab
%_.gGZ\`o)u#,\5K/PH57Icimej7r5/n%j*'abgIGD:QBbETqK/G&N3(+To`KQRSI5([d;)Vm9At43H)ekFBk<6Y3N;^4,o'BkSd<
%8:Bo^E5/,7>r2SO/8"Qt`PWhZlS4[(UG^`BZu-nKHh:jC63Yh9V4N!c8p:'>m9BU\^<K/c&1d,rP6L+:9f7oWPO=,>Wg.)=DG\f_
%0Bp5Vh_6Jm;5intO>4Bh?nG**PiE]J&kl$8FA2(jMHGUX?Zg.-V?*_G=FHhUmlakmJ!NZ3TrS;P.gTVG&Nu%21SZTY0;B"ur*bMo
%=I-YU`1RC^Xco31C?mA&,HppSm@V`\+QX;3j^C)FUWhGrRl[bjMaJ+J1,Vd;c8/?NfV)TGY=84W\e0:XrhE"S;Xjn`-4XHq8gSo_
%8D@q(!N`-;6+8&pLT)\\NQGHQ.GQu$7&KLjpC<J"fugjN+pTBR&0?Tc+k*t"DKt`X=s8GWJ3SaeG4j3o=Y)qtCNi&p@6&CXLYA"o
%9g![SC'n]t\(n]"QbT3F7C8efKWldYpfS/"XOW"uJ.SA&G:5b>haIe?jpGlpa+C,rC(=EOU/quf6m&#I2hX!3d]dOH/Ed6haehO<
%-_Q8eXXte+@u`U4l\BoWp5`a]."c,d1:gNuf=DQclW29D(8&mg%b':g-p%#f9G%Tbjp9A6Y!r)j'Xn?&ZT)48r9kVg!VWq4hID?a
%%u\H>DX>Ge<*L;56]p#'X&?D^6P.[hFIKO[[GoQ@C7cn4B)ppP%R@0&bpUjUhlrJ?OgNls&Ll^"]8m5^Dc2t^nt95SndbjWa`Zmd
%FUk0RUf@#H?b<]`46Xs5s);+be*h*%96<$mc8oD\@1#t$?BFL?nt([%On:6bD%T2j3II,*D^@GWU,'GmOiDa5P)-30'cCjkqjSW3
%Q,kJnnq3MMIP]L2?QbO.f`_&.:*#XY8BEG87lW8Hkp-oH,ugXaC$?d!eE1lr7Ck"MiR+^ob:7"(f/!:7A\\Qi6&0"A$'$(B%_qOf
%f4oYchcMu5%a(36\B`3frfr$&%(X#>-M:\%M4$@eN`nsT>?^Y[RqiuUo<=h>'M1Np5K_+S];SD_A&N<tm9j%p^u<4?<!+`*fble2
%,]+G\.3BZ6aN(BV1kHETU`emcH@ET-O=P[SWBWA"QjT0UqCtR]?UV;4;'aa;c+CEb,WIn9].Ug[[S0,R(PpZ9k"$Mo2]Q\<[HOjj
%^g4cbC+<m4E757SO3[%u].!`&q*d?OdA=j9;O0ufm]CE2lNhr2i$j,f75_=!RLT":q>)0Y4J<t.?+]sb%=\(?LsF0ZH>dSAU7YO;
%Tf=T#L6"M3h6R5D%)oZF;hP^FOU0r)Bm;8^7At-*pK5JFH_hAt5->S!bB2>`9u*0%[GuR5la'p@fC-qok2P`Cj]YO3D03dcBScjW
%FHAoF+@JlQ4fLDH<Fi'3ecSXWLh>*NY&?^jD^pdCJm&,n#.m2s9s3aeiBg:!dQk5`,dA%ad>6:?%22&l*#TJK;Il>CaAa-NAX:/0
%_OdG[&\La2%:X*W0=&$95rVt^"Vjso[N\C,MBE47EcqI"UsKH=^1bq*En,R)KBuO&JpC9f#1Bc?=*7u>LPSAg/2N/Vn^<5>:Q!V5
%:ta@\1Ur%2`O$iF]SfoDH,0_15tb@(5"%7U>Jnm-\Xgl@e>k3l;1Df7XO&/S%Ll9N!M74-or]J#)oPh9p+sBA6Y#A?EKY[5KkgIT
%HZP2TpX5*.LH,2D3mm2W>qKrj[!c96nSG:\\=gUFSq\F+38)C(C!JGO[t_2m^bl&C!*VTFqhsn<ggf&.mM%V5Ab^Fp\;a,^c[9Aj
%.HU?ECDpZ\oha"+kr<.s=*mGaFd=,;HB3gr2J,Y%Y\q6JX<8%Y^9eR_8/ib4\$h0<9%F;4),n^219Z(CQ`6$o.^)pL;$h`:&J`b$
%baqM1SW\-RGZouVZ\F+LGoLi]pE;'(f6qH#<6.t^5U?l:Z(<i'ZSqd!I7b^("-;f^<G^JX!f+ojIKQ08qf\_5n[VJSX)cOlFu=NZ
%@4);j.@Wq[&r3/1Z%/1.c5e!TlU'MX2D'shR%-m6$*'$Lr[8C)RLbc/\poQe6WV!gQibogR0k3U1<gQ2';^pN(aT<eM!j.rg?+[_
%qNCZRQQ'2>C9+_?_<u.1UirmU/QOTkOg<Rk'Je8hHA@m5^:>b:R;\dj!"[7:p!-!Qj1JBeML<rPB4CCR.5U;u=rBmt)l6f1KDEX4
%gIs%K'V>u?8^?o,i;Z1Nnjae%]$G4^.fkKri_cN2K*:(E-?s4TN"#FW/DYjD?"Ula6TU>@O5Nun6_nDt4^L3]@9.H>0@VgOI!h8B
%d"i(0_1l`noK/lb]-?QApTU!<EV%c7EZQ__[UC^-n\kMR"Q#nk;i1L]cRc!B'Q!HfPRU2NLu)*]<Q3q#3B)H(4\;=2qHrh:q0/Ir
%Aor+es#*7YXflsA<S_NJ=kSanit-uG<r02_*!VFINEOQ0?0@2O9W<J7AKLn0'F?Pf(5UjEcM"C+5do>eoFiI2aG"`K?:<l&7NE;'
%4*$;9B<rLnHe$0C/8%E?9I!4m?B=K)]X`9ckA>,Si@e%\>Jf[u&'/*<Nn*QBdTdMhk/FQAO8%@oHhNu#qgd)7ehh!TRfVel4Uu98
%1mY?I)V0IV`l[Z"))$<\94*/>HhZB,<rq]E/sVYooH3@bPON!C=)\XE*qMY)YP2nsQ26MI<g3m5Xp;,#\l.s8HIp%d7f)*&[5[VY
%naHJ'VlnI_s27d[2U]K1;<%)YXY&o_aJbYH#2PJl#SAj]9JXl"Nc/+1^MFb[C4ZtX*H/i14ufgq<-Rpf&Z6I`L(AMZV?:P*4qGXU
%eUFSW@P`;-6[9lg&gl5f8bdS'_(VfH]lbe:lbVlM)/@=l?,'Wg\SHt%Rc_dS4_1niH-<i%k<[+(VSc\keh3h7c!:*RqN,qA*p%=7
%0beqm0#76?N898]'F6FB\@/%FC/j-ge6.j3NjG#4[Z@]6!NW(b2&)7=bi1@ZAnM6^>!5VPZG$c`ciK">`uhdCU+':)Q%o+O*O>h7
%A>Yh942Yo84B=&+Y.&uq@Q0@r]k5Va#V^9q1f8"rN*Oooau=p2b8$6j$QYG--l0&tOqFk5_()AtlXGA)3f+SgllGgaSj=fTO=+7s
%p[NrY[(%f87D0[ni8<0;iYi0Cke'igU-MpT9k!<RBi=q87m'JqQ*CS<BTrYX6'p9H!YR3#T3O#>C#Ws33EaUhKXL&7K?N:hX$>pA
%00X<<"cI)Cr'Wue.,aLgcAH>$)8&&%9b>b^I9b^1fk6DOXhPRf"6c4Jp$gm=js]taFJJ1/cN1)-#NA3URQf=O#ts^?EH?Xnlo<=;
%477H0^tKe=D>iZZ[5B/`iT\VYo2uu(5[uX.:.Sq"\]]k>5rm_U(8fVdOJ0/4I,YE4Hm7AbW^b(hbVnSKk?3pPiD$)OI4,B^!\o\k
%k"&(I3St;%\5fbU>:Bm-;X;49^X9NW`j3mJP^SH3h+^n8^FTB']^P3RUZ0`mjdf'AR=(PtU<0TA&PdRhitTArB#QSXD'2b!cA2cJ
%CK!#!J>-]j#g.HNK%!C<EbCl1-CLm;Wg5,pH`uNXgH#PljKoFpg59C8mSt>K_70$B<@ca39.0U2jfPbWX9]2Hl^CU3@u%$$_cSZ^
%$lVc@nQ7KU.!oj*TeU@>SP6GE?T<,R<YSsS("Z4mNKM8dZ2r"5,1+8b\&94uOiDLX0one3_uPQ?c2P(sm^u]:VHMT!DF;=u4"%S`
%TQdJ8/i!)]BZeNQIj94P(C)UaJ.3@=bjTgm`T!1SdE>(O>T\u?<dAp?h_L1++lV1\Aq@ZOmbE]\lJQ1NeK.64KU?W5HD%1_,G,tV
%aRsOg=O(k)`N/I`=pFV1VtWH5p[[Blqr*Z`@X?a/%mQDurIPreUiJ_+<(i]q'&sVj[>e5b/LmYHq<DS&#:T4^!>Dc]q&^?)L[s#a
%oD8*5>8nibfi46cJkT%=n.%AH^D+[26nR=[0l:E(KTThD[QGATXlreNDaL&VXV]P98:hcg0;gHDW?+^V71";_,G`VPC<^1-O'jF^
%*k'MW]rh[8PnNcYHCW'':2@R[hp:0;5J$2sPPX!qL(TqPPQ<=lG(Hf>^J=,2oXp:l;9aY9HZccA]@oi>9j4IS:CL*UNB&#SXT0O2
%$_<l5+pp%nU'bq&,Cf5i5CW.2Tn_+&"[MeS!,026nZ"!55eAA$RUo!o`/emUmsj_2CuGKPVCphuU>h5;6XWfpm\B<C$b4`%+F"1A
%^O,?RhL0PqoJmR'*_mIZGRL)<?BSVfS-R[NY\Cs.Wj0OkR8++5N4?&<j6-b`MJWcpOC5#3g+H8J"Bi0Hb)@XW#2/@_ggWo>N.WYc
%Q7hB!OWM\nU[s*c&u0Lr8Bo-uDhsRq;D"D+JjX*O(c.('acbY_O1uQi=/r@MNSE<Z1'^-C;#k<bl_-*BL9ZY]P+&Xf3A?^/-<V"7
%+0W,PoeL%3?@kK&10l!;QD$8l-%QMiW(mKoZse0?$)7P_C2/>9KVuc.Ek:I'T7,*36Bh#>.RTMAQabl9[;SML,M'(QFtb>bVb2"k
%iPD>aY$5g@Q(-B*9_b&GPg?R5;u!'r+%l]G8_o:IKGaRE_(UC%aMu?+h-eVm#e5$kj50Sp9&Lb4itbq7h@/DM[l0+I7.8I4NbVse
%Xm$ephe@s+b2$.r26QUj4`(Os7%P6e2W:"i5o=<?eGNZp91rM'h9N_j6:!:/^]Z1k4;*SM&1J)AO++kL:&&_N)Ri4db6Q8IU0%No
%*uDLdDaiHh8TQ?8&nP-=0U-("USa:YjlB!p$";MUQ2Da9RKnreP[lnR(/=NHI!MWMH0a=5-6Z`adG)IC&b=H/*H/3/X\[\\[J%i6
%ZjjcXQ:cLX7UgtATpeeHjYQeZ.,K'4@WPYTU(JCqn(3]#o\^/NCr:**_E9eFZ^l!hQ"aPkZTg%9E`6f+dMA'UR)m=lfjOuO8CaQY
%7$`^MFB_[hP(!r9mNG,,B"V5Y0n!i4.OTA9RkV9knet@p:-=&mVug>lUYU>893V'AZ")7n2`trn0A([g8Ru$Q8p`FdFMc]I(&L3b
%eSQ_;6)Yhf">"Fs83;7nf1mY3qTC*V\F]8lKpmZ*rn@BC,$OGoIPiuks'8g*JK0\WA(a!tWZ>\JL^nSjW!#Do:u3Mn.2)\Lic&']
%A:`Q`hMCC*Z,[WP7uq<)PugP8Skf)J]t+23^/YMs++ba4:@6JJMNSDZ@.E+dm/i7gR63tJeTCL60KK[pj4.76`5_T)_Cmt0Ze+0^
%$u+K#/6T9/qa?`_*W88A8XE07XLe1,*8Xj\&>/>XcmYMglgU=Nj9r:sH!iHt"&2k9!%CC:SU8UT%%U%AJ_KGk1n?XG3b'YBMeS,S
%F_'+:'QP"K\cN'.+BQ_tkc>g4/u_M3>CC#bS#?FZfas1<F<Qri_nW:%DRCUJTH9+rUL-Ej+@"-^dDF,lHd*JK@ANRDm]E@0`4GSi
%3Hh@5G(7n(T0?dL$W@C/C=dfa[j\'.VObE*OO\L[AT+qoR.B2c]@">me]o],+1,t/.39*[dCra?9';F#hD_Mn+)WtK^PQ!qpVR/9
%VsbY,#1MM(IPYe<$d.FW;tb8QE]K8sl/$fdjb!HU^G1dHoPZR:QpDeXhfK&Qd3^gK2lo*0^]E8k'(R/f1]&+b">ub449H:u[C:&?
%Dj\rrdYi9ud6S;X'HuG]Jp.(fijPBORn?:99q?mQUTa(1#\lB:[aN_XY5C62c\e7<A4obHEa9Xc8BRU,'J#)DeoOYWjo@pg#.*`g
%ETRo:V^elu#gi,BjEd9GThI+2XFr#E;M19Z+Lidm2W?_N`L8Kkc1d5]6bm`/da#PL$D^+IW\4,Ws8N."7mm^@I2c#(H6Z;n(ktGF
%G&VNhZfksC7r=g</kt#NY(BT-6cs0%iX7!#E,5(.?#u&l?nJjr0L)-=-VKK*3"[D]Oq0V>jhNo1_11YRo.m$h*4[4rJ#%]n#CE+n
%A?Y[LQ(aq!Lis96jS0]b_taRiEr=sDO(Qk^qUK._7[qibB@mG?im0JV8JuCc<74oA?@M9K0C#QVWX=@o\gY\$3S_Joh&3Jr5X:XR
%(TJ+Z`LX%5l<o1p`_Rq6AcTc2<bW^ugET(d69eopXM5:cL*_sl'Oem!:B;NF1cT%m235jgF[Wf!\eR!R2i$8bOHj3R7KI;f?^R?W
%`+2=S$@QZGHQ1iW?jmVelXs;GaGSA/hE12cAFg:`&^/&pg^uW*h$r\O&Q.9EAf/KeLqr/@KWlTn*=Z=E^P.hH;(m3M+FT-2'tF@m
%[qtS[7g34<M"&&<j*;$o#h)5=p8h&^G5]aL>C.7>Vqc&VoR_<eUg'urF?^Zi$,:ch/$@^<atu_OUMfBp%o':AkAtNq:I7ADm0F4M
%_T3&j[#64?&D2jIM4'+BIe"GG8Gcs:VIi`39//'(*6tfa]#:H&.\T["Vamgd-Ape8bFV<Y=Ji=[Ou/1C^jASb20_Kn+Vj5aXqdfG
%V@>R3DCm>tiU&[4L7_N+9/@l_&>YT(,-k%Cd/qU+Q&#uoZG`,(fC[_Xc[+`!R`ptL/WDTFq@/0%'fLuM0eN&r:,QccB4!P;[RZ]S
%kH3cL$\5VdTIdrnVD)`C`3ejpaf#Qm<2eAmh?Jmq8UrZsPYlarM6#_OLhY6FG\-/]SM."Tag`EV60m)Phte2umb@b]rSd5FZ2`^2
%pu=TRrV!/XJ,&DL0>h`-f=-8)rdXt;mD$C4reJ8eRm6iHgE41[oBdY"LkGC!s1A:&jps\(s6'F^V]WX&oB1W!e%]>MVV;Qpq9;/%
%e,T@#^\N*1J7l7~>
%AI9_PrivateDataEnd
